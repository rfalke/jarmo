
//
// This is a generated file. Do not edit.
//
package holdec.jarmo.arm64;

import java.util.List;
import java.util.ArrayList;

import static holdec.jarmo.arm64.ArmDisasmHelper.*;

@SuppressWarnings("ConstantConditions")
public class ArmDisasmDecoder {
    private boolean verbose;
    private boolean showMatching;

    public AsmStatement decode(long pc, int opcode32Bit) {
        AsmStatement stmt = new AsmStatement(pc);


        try {
            if(false) {
                // Nothing
            } else if(decodeWith32BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith31BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith30BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith29BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith28BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith27BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith26BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith25BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith24BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith23BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith22BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith21BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith20BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith19BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith18BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith17BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith16BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith15BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith14BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith13BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith12BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith11BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith10BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith9BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith8BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith7BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else if(decodeWith6BitsSet(pc, opcode32Bit, stmt)) {
                // Nothing
            } else {
                if (verbose) {
                    logUnknownOpcode(opcode32Bit);
                }
                stmt.markAsUnknown(opcode32Bit);
            }
        } catch(UndefinedInstructionException e) {
            if(verbose) {
                e.printStackTrace();
            }
            stmt.markAsUnknown(opcode32Bit);
        }
        postProcessStatement(stmt);
        return stmt;
    }


    private boolean decodeWith32BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 11010101 00000011 00100001 10011111
        if ((opcode32Bit & 0xffffffff) == 0xd503219f) {
            if (verbose) {
                System.out.println("   trying AUTIA1716");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIA1716";
            stmt.key = "opcode & 0xffffffff = 0xd503219f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 10111111
        if ((opcode32Bit & 0xffffffff) == 0xd50323bf) {
            if (verbose) {
                System.out.println("   trying AUTIASP");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIASP";
            stmt.key = "opcode & 0xffffffff = 0xd50323bf";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 10011111
        if ((opcode32Bit & 0xffffffff) == 0xd503239f) {
            if (verbose) {
                System.out.println("   trying AUTIAZ");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIAZ";
            stmt.key = "opcode & 0xffffffff = 0xd503239f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100001 11011111
        if ((opcode32Bit & 0xffffffff) == 0xd50321df) {
            if (verbose) {
                System.out.println("   trying AUTIB1716");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIB1716";
            stmt.key = "opcode & 0xffffffff = 0xd50321df";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 11111111
        if ((opcode32Bit & 0xffffffff) == 0xd50323ff) {
            if (verbose) {
                System.out.println("   trying AUTIBSP");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIBSP";
            stmt.key = "opcode & 0xffffffff = 0xd50323ff";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 11011111
        if ((opcode32Bit & 0xffffffff) == 0xd50323df) {
            if (verbose) {
                System.out.println("   trying AUTIBZ");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIBZ";
            stmt.key = "opcode & 0xffffffff = 0xd50323df";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 10111111 00000011 11100000
        if ((opcode32Bit & 0xffffffff) == 0xd6bf03e0) {
            if (verbose) {
                System.out.println("   trying DRPS");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DRPS";
            stmt.key = "opcode & 0xffffffff = 0xd6bf03e0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 10011111 00000011 11100000
        if ((opcode32Bit & 0xffffffff) == 0xd69f03e0) {
            if (verbose) {
                System.out.println("   trying ERET");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ERET";
            stmt.key = "opcode & 0xffffffff = 0xd69f03e0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 10011111 00001011 11111111
        if ((opcode32Bit & 0xffffffff) == 0xd69f0bff) {
            if (verbose) {
                System.out.println("   trying ERETAA");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ERETAA";
            stmt.key = "opcode & 0xffffffff = 0xd69f0bff";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 10011111 00001111 11111111
        if ((opcode32Bit & 0xffffffff) == 0xd69f0fff) {
            if (verbose) {
                System.out.println("   trying ERETAB");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ERETAB";
            stmt.key = "opcode & 0xffffffff = 0xd69f0fff";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100010 00011111
        if ((opcode32Bit & 0xffffffff) == 0xd503221f) {
            if (verbose) {
                System.out.println("   trying ESB");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ESB";
            stmt.key = "opcode & 0xffffffff = 0xd503221f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100000 00011111
        if ((opcode32Bit & 0xffffffff) == 0xd503201f) {
            if (verbose) {
                System.out.println("   trying NOP");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "NOP";
            stmt.key = "opcode & 0xffffffff = 0xd503201f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100001 00011111
        if ((opcode32Bit & 0xffffffff) == 0xd503211f) {
            if (verbose) {
                System.out.println("   trying PACIA1716");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIA1716";
            stmt.key = "opcode & 0xffffffff = 0xd503211f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 00111111
        if ((opcode32Bit & 0xffffffff) == 0xd503233f) {
            if (verbose) {
                System.out.println("   trying PACIASP");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIASP";
            stmt.key = "opcode & 0xffffffff = 0xd503233f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 00011111
        if ((opcode32Bit & 0xffffffff) == 0xd503231f) {
            if (verbose) {
                System.out.println("   trying PACIAZ");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIAZ";
            stmt.key = "opcode & 0xffffffff = 0xd503231f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100001 01011111
        if ((opcode32Bit & 0xffffffff) == 0xd503215f) {
            if (verbose) {
                System.out.println("   trying PACIB1716");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIB1716";
            stmt.key = "opcode & 0xffffffff = 0xd503215f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 01111111
        if ((opcode32Bit & 0xffffffff) == 0xd503237f) {
            if (verbose) {
                System.out.println("   trying PACIBSP");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIBSP";
            stmt.key = "opcode & 0xffffffff = 0xd503237f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100011 01011111
        if ((opcode32Bit & 0xffffffff) == 0xd503235f) {
            if (verbose) {
                System.out.println("   trying PACIBZ");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIBZ";
            stmt.key = "opcode & 0xffffffff = 0xd503235f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100010 00111111
        if ((opcode32Bit & 0xffffffff) == 0xd503223f) {
            if (verbose) {
                System.out.println("   trying PSB CSYNC");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PSB";
            stmt.key = "opcode & 0xffffffff = 0xd503223f";
            stmt.arg1 = "CSYNC";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 01011111 00001011 11111111
        if ((opcode32Bit & 0xffffffff) == 0xd65f0bff) {
            if (verbose) {
                System.out.println("   trying RETAA");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RETAA";
            stmt.key = "opcode & 0xffffffff = 0xd65f0bff";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 01011111 00001111 11111111
        if ((opcode32Bit & 0xffffffff) == 0xd65f0fff) {
            if (verbose) {
                System.out.println("   trying RETAB");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RETAB";
            stmt.key = "opcode & 0xffffffff = 0xd65f0fff";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100000 10011111
        if ((opcode32Bit & 0xffffffff) == 0xd503209f) {
            if (verbose) {
                System.out.println("   trying SEV");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SEV";
            stmt.key = "opcode & 0xffffffff = 0xd503209f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100000 10111111
        if ((opcode32Bit & 0xffffffff) == 0xd50320bf) {
            if (verbose) {
                System.out.println("   trying SEVL");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SEVL";
            stmt.key = "opcode & 0xffffffff = 0xd50320bf";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100000 01011111
        if ((opcode32Bit & 0xffffffff) == 0xd503205f) {
            if (verbose) {
                System.out.println("   trying WFE");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "WFE";
            stmt.key = "opcode & 0xffffffff = 0xd503205f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100000 01111111
        if ((opcode32Bit & 0xffffffff) == 0xd503207f) {
            if (verbose) {
                System.out.println("   trying WFI");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "WFI";
            stmt.key = "opcode & 0xffffffff = 0xd503207f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100000 11111111
        if ((opcode32Bit & 0xffffffff) == 0xd50320ff) {
            if (verbose) {
                System.out.println("   trying XPACLRI");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "XPACLRI";
            stmt.key = "opcode & 0xffffffff = 0xd50320ff";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 00100000 00111111
        if ((opcode32Bit & 0xffffffff) == 0xd503203f) {
            if (verbose) {
                System.out.println("   trying YIELD");
            }
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "YIELD";
            stmt.key = "opcode & 0xffffffff = 0xd503203f";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith31BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith30BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith29BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith28BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 11010101 00000011 0011xxxx 01011111
        if ((opcode32Bit & 0xfffff0ff) == 0xd503305f) {
            if (verbose) {
                System.out.println("   trying CLREX {#<imm>}");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CLREX";
            stmt.key = "opcode & 0xfffff0ff = 0xd503305f";
            stmt.arg1 = CRm==15?"":formatHexImm(CRm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 0011xxxx 10111111
        if ((opcode32Bit & 0xfffff0ff) == 0xd50330bf) {
            if (verbose) {
                System.out.println("   trying DMB <option>|#<imm>");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DMB";
            stmt.key = "opcode & 0xfffff0ff = 0xd50330bf";
            stmt.arg1 = decodeDmbOption(CRm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 0011xxxx 10011111
        if ((opcode32Bit & 0xfffff0ff) == 0xd503309f) {
            if (verbose) {
                System.out.println("   trying DSB <option>|#<imm>");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DSB";
            stmt.key = "opcode & 0xfffff0ff = 0xd503309f";
            stmt.arg1 = decodeDmbOption(CRm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00000011 0011xxxx 11011111
        if ((opcode32Bit & 0xfffff0ff) == 0xd50330df) {
            if (verbose) {
                System.out.println("   trying ISB {<option>|#<imm>}");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ISB";
            stmt.key = "opcode & 0xfffff0ff = 0xd50330df";
            stmt.arg1 = decodeIsbOption(CRm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith27BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 11011010 11000001 00111011 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac13be0) {
            if (verbose) {
                System.out.println("   trying AUTDZA <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTDZA";
            stmt.key = "opcode & 0xffffffe0 = 0xdac13be0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 00111111 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac13fe0) {
            if (verbose) {
                System.out.println("   trying AUTDZB <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTDZB";
            stmt.key = "opcode & 0xffffffe0 = 0xdac13fe0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 00110011 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac133e0) {
            if (verbose) {
                System.out.println("   trying AUTIZA <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIZA";
            stmt.key = "opcode & 0xffffffe0 = 0xdac133e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 00110111 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac137e0) {
            if (verbose) {
                System.out.println("   trying AUTIZB <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIZB";
            stmt.key = "opcode & 0xffffffe0 = 0xdac137e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 00111111 000000xx xxx00000
        if ((opcode32Bit & 0xfffffc1f) == 0xd63f0000) {
            if (verbose) {
                System.out.println("   trying BLR <Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BLR";
            stmt.key = "opcode & 0xfffffc1f = 0xd63f0000";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 00111111 000010xx xxx11111
        if ((opcode32Bit & 0xfffffc1f) == 0xd63f081f) {
            if (verbose) {
                System.out.println("   trying BLRAAZ <Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BLRAAZ";
            stmt.key = "opcode & 0xfffffc1f = 0xd63f081f";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 00111111 000011xx xxx11111
        if ((opcode32Bit & 0xfffffc1f) == 0xd63f0c1f) {
            if (verbose) {
                System.out.println("   trying BLRABZ <Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BLRABZ";
            stmt.key = "opcode & 0xfffffc1f = 0xd63f0c1f";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 00011111 000000xx xxx00000
        if ((opcode32Bit & 0xfffffc1f) == 0xd61f0000) {
            if (verbose) {
                System.out.println("   trying BR <Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BR";
            stmt.key = "opcode & 0xfffffc1f = 0xd61f0000";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 00011111 000010xx xxx11111
        if ((opcode32Bit & 0xfffffc1f) == 0xd61f081f) {
            if (verbose) {
                System.out.println("   trying BRAAZ <Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BRAAZ";
            stmt.key = "opcode & 0xfffffc1f = 0xd61f081f";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 00011111 000011xx xxx11111
        if ((opcode32Bit & 0xfffffc1f) == 0xd61f0c1f) {
            if (verbose) {
                System.out.println("   trying BRABZ <Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BRABZ";
            stmt.key = "opcode & 0xfffffc1f = 0xd61f0c1f";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 00101011 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac12be0) {
            if (verbose) {
                System.out.println("   trying PACDZA <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACDZA";
            stmt.key = "opcode & 0xffffffe0 = 0xdac12be0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 00101111 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac12fe0) {
            if (verbose) {
                System.out.println("   trying PACDZB <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACDZB";
            stmt.key = "opcode & 0xffffffe0 = 0xdac12fe0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 00100011 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac123e0) {
            if (verbose) {
                System.out.println("   trying PACIZA <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIZA";
            stmt.key = "opcode & 0xffffffe0 = 0xdac123e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 00100111 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac127e0) {
            if (verbose) {
                System.out.println("   trying PACIZB <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIZB";
            stmt.key = "opcode & 0xffffffe0 = 0xdac127e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010110 01011111 000000xx xxx00000
        if ((opcode32Bit & 0xfffffc1f) == 0xd65f0000) {
            if (verbose) {
                System.out.println("   trying RET {<Xn>}");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RET";
            stmt.key = "opcode & 0xfffffc1f = 0xd65f0000";
            stmt.arg1 = getRegisterName("X", Rn, false, 30);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 01000111 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac147e0) {
            if (verbose) {
                System.out.println("   trying XPACD <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "XPACD";
            stmt.key = "opcode & 0xffffffe0 = 0xdac147e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 01000011 111xxxxx
        if ((opcode32Bit & 0xffffffe0) == 0xdac143e0) {
            if (verbose) {
                System.out.println("   trying XPACI <Xd>");
            }
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "XPACI";
            stmt.key = "opcode & 0xffffffe0 = 0xdac143e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith26BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith25BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 11010101 00000011 0010xxxx xxx11111
        if ((opcode32Bit & 0xfffff01f) == 0xd503201f) {
            if (verbose) {
                System.out.println("   trying HINT #<immh>");
            }
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "HINT";
            stmt.key = "opcode & 0xfffff01f = 0xd503201f";
            stmt.arg1 = formatHexImm((CRm<<3) + op2);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith24BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith23BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 00011010 10011111 xxxx0111 111xxxxx
        if ((opcode32Bit & 0xffff0fe0) == 0x1a9f07e0) {
            if (verbose) {
                System.out.println("   trying CSET <Wd>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSET";
                stmt.key = "opcode & 0xffff0fe0 = 0x1a9f07e0";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011010 10011111 xxxx0111 111xxxxx
        if ((opcode32Bit & 0xffff0fe0) == 0x9a9f07e0) {
            if (verbose) {
                System.out.println("   trying CSET <Xd>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSET";
                stmt.key = "opcode & 0xffff0fe0 = 0x9a9f07e0";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01011010 10011111 xxxx0011 111xxxxx
        if ((opcode32Bit & 0xffff0fe0) == 0x5a9f03e0) {
            if (verbose) {
                System.out.println("   trying CSETM <Wd>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSETM";
                stmt.key = "opcode & 0xffff0fe0 = 0x5a9f03e0";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11011010 10011111 xxxx0011 111xxxxx
        if ((opcode32Bit & 0xffff0fe0) == 0xda9f03e0) {
            if (verbose) {
                System.out.println("   trying CSETM <Xd>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSETM";
                stmt.key = "opcode & 0xffff0fe0 = 0xda9f03e0";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith22BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 01001110 00101000 010110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x4e285800) {
            if (verbose) {
                System.out.println("   trying AESD <Vd>.16B,<Vn>.16B");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AESD";
            stmt.key = "opcode & 0xfffffc00 = 0x4e285800";
            stmt.arg1 = formatVectorRegister(Rd, "16B");
            stmt.arg2 = formatVectorRegister(Rn, "16B");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001110 00101000 010010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x4e284800) {
            if (verbose) {
                System.out.println("   trying AESE <Vd>.16B,<Vn>.16B");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AESE";
            stmt.key = "opcode & 0xfffffc00 = 0x4e284800";
            stmt.arg1 = formatVectorRegister(Rd, "16B");
            stmt.arg2 = formatVectorRegister(Rn, "16B");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001110 00101000 011110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x4e287800) {
            if (verbose) {
                System.out.println("   trying AESIMC <Vd>.16B,<Vn>.16B");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AESIMC";
            stmt.key = "opcode & 0xfffffc00 = 0x4e287800";
            stmt.arg1 = formatVectorRegister(Rd, "16B");
            stmt.arg2 = formatVectorRegister(Rn, "16B");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001110 00101000 011010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x4e286800) {
            if (verbose) {
                System.out.println("   trying AESMC <Vd>.16B,<Vn>.16B");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AESMC";
            stmt.key = "opcode & 0xfffffc00 = 0x4e286800";
            stmt.arg1 = formatVectorRegister(Rd, "16B");
            stmt.arg2 = formatVectorRegister(Rn, "16B");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 000110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac11800) {
            if (verbose) {
                System.out.println("   trying AUTDA <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTDA";
            stmt.key = "opcode & 0xfffffc00 = 0xdac11800";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 000111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac11c00) {
            if (verbose) {
                System.out.println("   trying AUTDB <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTDB";
            stmt.key = "opcode & 0xfffffc00 = 0xdac11c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 000100xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac11000) {
            if (verbose) {
                System.out.println("   trying AUTIA <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIA";
            stmt.key = "opcode & 0xfffffc00 = 0xdac11000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 000101xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac11400) {
            if (verbose) {
                System.out.println("   trying AUTIB <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AUTIB";
            stmt.key = "opcode & 0xfffffc00 = 0xdac11400";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010111 00111111 000010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xd73f0800) {
            if (verbose) {
                System.out.println("   trying BLRAA <Xn>,<Xm|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rm = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BLRAA";
            stmt.key = "opcode & 0xfffffc00 = 0xd73f0800";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010111 00111111 000011xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xd73f0c00) {
            if (verbose) {
                System.out.println("   trying BLRAB <Xn>,<Xm|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rm = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BLRAB";
            stmt.key = "opcode & 0xfffffc00 = 0xd73f0c00";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010111 00011111 000010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xd71f0800) {
            if (verbose) {
                System.out.println("   trying BRAA <Xn>,<Xm|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rm = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BRAA";
            stmt.key = "opcode & 0xfffffc00 = 0xd71f0800";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010111 00011111 000011xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xd71f0c00) {
            if (verbose) {
                System.out.println("   trying BRAB <Xn>,<Xm|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rm = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BRAB";
            stmt.key = "opcode & 0xfffffc00 = 0xd71f0c00";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011010 11000000 000101xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ac01400) {
            if (verbose) {
                System.out.println("   trying CLS <Wd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CLS";
            stmt.key = "opcode & 0xfffffc00 = 0x5ac01400";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000000 000101xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac01400) {
            if (verbose) {
                System.out.println("   trying CLS <Xd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CLS";
            stmt.key = "opcode & 0xfffffc00 = 0xdac01400";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011010 11000000 000100xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ac01000) {
            if (verbose) {
                System.out.println("   trying CLZ <Wd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CLZ";
            stmt.key = "opcode & 0xfffffc00 = 0x5ac01000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000000 000100xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac01000) {
            if (verbose) {
                System.out.println("   trying CLZ <Xd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CLZ";
            stmt.key = "opcode & 0xfffffc00 = 0xdac01000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100000 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e60c000) {
            if (verbose) {
                System.out.println("   trying FABS <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e60c000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100000 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee0c000) {
            if (verbose) {
                System.out.println("   trying FABS <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABS";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee0c000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100000 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e20c000) {
            if (verbose) {
                System.out.println("   trying FABS <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e20c000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 00110000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e30d800) {
            if (verbose) {
                System.out.println("   trying FADDP <V-sz1><d>,<Vn>.<T-sz1>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADDP";
            stmt.key = "opcode & 0xfffffc00 = 0x5e30d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2H", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 11111000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ef8d800) {
            if (verbose) {
                System.out.println("   trying FCMEQ <Hd>,<Hn>,#0.0");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xfffffc00 = 0x5ef8d800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 11111000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7ef8c800) {
            if (verbose) {
                System.out.println("   trying FCMGE <Hd>,<Hn>,#0.0");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xfffffc00 = 0x7ef8c800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 11111000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ef8c800) {
            if (verbose) {
                System.out.println("   trying FCMGT <Hd>,<Hn>,#0.0");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xfffffc00 = 0x5ef8c800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 11111000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7ef8d800) {
            if (verbose) {
                System.out.println("   trying FCMLE <Hd>,<Hn>,#0.0");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLE";
            stmt.key = "opcode & 0xfffffc00 = 0x7ef8d800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 11111000 111010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ef8e800) {
            if (verbose) {
                System.out.println("   trying FCMLT <Hd>,<Hn>,#0.0");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLT";
            stmt.key = "opcode & 0xfffffc00 = 0x5ef8e800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 001000xx xxx01000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e602008) {
            if (verbose) {
                System.out.println("   trying FCMP <Dn>,#0.0");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMP";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e602008";
            stmt.arg1 = getRegisterName("D", Rn, false, -1);
            stmt.arg2 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 001000xx xxx00000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e602000) {
            if (verbose) {
                System.out.println("   trying FCMP <Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMP";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e602000";
            stmt.arg1 = getRegisterName("D", Rn, false, -1);
            stmt.arg2 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 001000xx xxx01000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1ee02008) {
            if (verbose) {
                System.out.println("   trying FCMP <Hn>,#0.0");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMP";
            stmt.key = "opcode & 0xffe0fc1f = 0x1ee02008";
            stmt.arg1 = getRegisterName("H", Rn, false, -1);
            stmt.arg2 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 001000xx xxx00000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1ee02000) {
            if (verbose) {
                System.out.println("   trying FCMP <Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMP";
            stmt.key = "opcode & 0xffe0fc1f = 0x1ee02000";
            stmt.arg1 = getRegisterName("H", Rn, false, -1);
            stmt.arg2 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 001000xx xxx01000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e202008) {
            if (verbose) {
                System.out.println("   trying FCMP <Sn>,#0.0");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMP";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e202008";
            stmt.arg1 = getRegisterName("S", Rn, false, -1);
            stmt.arg2 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 001000xx xxx00000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e202000) {
            if (verbose) {
                System.out.println("   trying FCMP <Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMP";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e202000";
            stmt.arg1 = getRegisterName("S", Rn, false, -1);
            stmt.arg2 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 001000xx xxx11000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e602018) {
            if (verbose) {
                System.out.println("   trying FCMPE <Dn>,#0.0");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMPE";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e602018";
            stmt.arg1 = getRegisterName("D", Rn, false, -1);
            stmt.arg2 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 001000xx xxx10000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e602010) {
            if (verbose) {
                System.out.println("   trying FCMPE <Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMPE";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e602010";
            stmt.arg1 = getRegisterName("D", Rn, false, -1);
            stmt.arg2 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 001000xx xxx11000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1ee02018) {
            if (verbose) {
                System.out.println("   trying FCMPE <Hn>,#0.0");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMPE";
            stmt.key = "opcode & 0xffe0fc1f = 0x1ee02018";
            stmt.arg1 = getRegisterName("H", Rn, false, -1);
            stmt.arg2 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 001000xx xxx10000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1ee02010) {
            if (verbose) {
                System.out.println("   trying FCMPE <Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMPE";
            stmt.key = "opcode & 0xffe0fc1f = 0x1ee02010";
            stmt.arg1 = getRegisterName("H", Rn, false, -1);
            stmt.arg2 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 001000xx xxx11000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e202018) {
            if (verbose) {
                System.out.println("   trying FCMPE <Sn>,#0.0");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMPE";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e202018";
            stmt.arg1 = getRegisterName("S", Rn, false, -1);
            stmt.arg2 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 001000xx xxx10000
        if ((opcode32Bit & 0xffe0fc1f) == 0x1e202010) {
            if (verbose) {
                System.out.println("   trying FCMPE <Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int opc = getPart(opcode32Bit, 3, 2);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMPE";
            stmt.key = "opcode & 0xffe0fc1f = 0x1e202010";
            stmt.arg1 = getRegisterName("S", Rn, false, -1);
            stmt.arg2 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100010 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee2c000) {
            if (verbose) {
                System.out.println("   trying FCVT <Dd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVT";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee2c000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100010 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e22c000) {
            if (verbose) {
                System.out.println("   trying FCVT <Dd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVT";
            stmt.key = "opcode & 0xfffffc00 = 0x1e22c000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100011 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e63c000) {
            if (verbose) {
                System.out.println("   trying FCVT <Hd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVT";
            stmt.key = "opcode & 0xfffffc00 = 0x1e63c000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100011 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e23c000) {
            if (verbose) {
                System.out.println("   trying FCVT <Hd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVT";
            stmt.key = "opcode & 0xfffffc00 = 0x1e23c000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100010 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e624000) {
            if (verbose) {
                System.out.println("   trying FCVT <Sd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVT";
            stmt.key = "opcode & 0xfffffc00 = 0x1e624000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100010 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee24000) {
            if (verbose) {
                System.out.println("   trying FCVT <Sd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVT";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee24000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 01111001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e79c800) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xfffffc00 = 0x5e79c800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100100 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e640000) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e640000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100100 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee40000) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee40000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100100 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e240000) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e240000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100100 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e640000) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e640000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100100 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee40000) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee40000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00100100 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e240000) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e240000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 01111001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7e79c800) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xfffffc00 = 0x7e79c800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100101 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e650000) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e650000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100101 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee50000) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee50000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100101 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e250000) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e250000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100101 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e650000) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e650000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100101 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee50000) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee50000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00100101 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e250000) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e250000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 01111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e79b800) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xfffffc00 = 0x5e79b800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01110000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e700000) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e700000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11110000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ef00000) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xfffffc00 = 0x1ef00000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00110000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e300000) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e300000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01110000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e700000) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e700000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11110000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ef00000) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xfffffc00 = 0x9ef00000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00110000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e300000) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e300000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 01111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7e79b800) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xfffffc00 = 0x7e79b800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01110001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e710000) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e710000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11110001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ef10000) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xfffffc00 = 0x1ef10000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00110001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e310000) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e310000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01110001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e710000) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e710000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11110001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ef10000) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xfffffc00 = 0x9ef10000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00110001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e310000) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e310000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 01111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e79a800) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xfffffc00 = 0x5e79a800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e600000) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e600000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee00000) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee00000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e200000) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e200000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e600000) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e600000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee00000) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee00000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00100000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e200000) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 01111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7e79a800) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xfffffc00 = 0x7e79a800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e610000) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e610000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee10000) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee10000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e210000) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e210000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e610000) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e610000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee10000) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee10000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00100001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e210000) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e210000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 11111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ef9a800) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xfffffc00 = 0x5ef9a800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01101000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e680000) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e680000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11101000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee80000) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee80000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00101000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e280000) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e280000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01101000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e680000) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e680000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11101000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee80000) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee80000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00101000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e280000) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e280000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 11111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7ef9a800) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xfffffc00 = 0x7ef9a800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01101001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e690000) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e690000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11101001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee90000) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee90000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00101001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e290000) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e290000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01101001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e690000) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e690000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11101001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee90000) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee90000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00101001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e290000) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e290000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 11111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ef9b800) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x5ef9b800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01111000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e780000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e780000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11111000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ef80000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x1ef80000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00111000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e380000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e380000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01111000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e780000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e780000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11111000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ef80000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x9ef80000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00111000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e380000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x9e380000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 11111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7ef9b800) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xfffffc00 = 0x7ef9b800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01111001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e790000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e790000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11111001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ef90000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Wd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xfffffc00 = 0x1ef90000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00111001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e390000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Wd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xfffffc00 = 0x1e390000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01111001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e790000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Xd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e790000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11111001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ef90000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Xd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xfffffc00 = 0x9ef90000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00111001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e390000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Xd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xfffffc00 = 0x9e390000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01111110 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e7e0000) {
            if (verbose) {
                System.out.println("   trying FJCVTZS <Wd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FJCVTZS";
            stmt.key = "opcode & 0xfffffc00 = 0x1e7e0000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 00110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e30c800) {
            if (verbose) {
                System.out.println("   trying FMAXNMP <V-sz1><d>,<Vn>.<T-sz1>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNMP";
            stmt.key = "opcode & 0xfffffc00 = 0x5e30c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2H", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 00110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e30f800) {
            if (verbose) {
                System.out.println("   trying FMAXP <V-sz1><d>,<Vn>.<T-sz1>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXP";
            stmt.key = "opcode & 0xfffffc00 = 0x5e30f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2H", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 10110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5eb0c800) {
            if (verbose) {
                System.out.println("   trying FMINNMP <V-sz1><d>,<Vn>.<T-sz1>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNMP";
            stmt.key = "opcode & 0xfffffc00 = 0x5eb0c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2H", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 10110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5eb0f800) {
            if (verbose) {
                System.out.println("   trying FMINP <V-sz1><d>,<Vn>.<T-sz1>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINP";
            stmt.key = "opcode & 0xfffffc00 = 0x5eb0f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2H", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100000 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e604000) {
            if (verbose) {
                System.out.println("   trying FMOV <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x1e604000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100111 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e670000) {
            if (verbose) {
                System.out.println("   trying FMOV <Dd>,<Xn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x9e670000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100000 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee04000) {
            if (verbose) {
                System.out.println("   trying FMOV <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee04000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100111 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee70000) {
            if (verbose) {
                System.out.println("   trying FMOV <Hd>,<Wn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee70000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100111 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee70000) {
            if (verbose) {
                System.out.println("   trying FMOV <Hd>,<Xn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee70000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100000 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e204000) {
            if (verbose) {
                System.out.println("   trying FMOV <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x1e204000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100111 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e270000) {
            if (verbose) {
                System.out.println("   trying FMOV <Sd>,<Wn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x1e270000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 10101111 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9eaf0000) {
            if (verbose) {
                System.out.println("   trying FMOV <Vd>.D[1],<Xn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x9eaf0000";
            stmt.arg1 = formatVectorRegister(Rd, "D[1]");
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100110 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee60000) {
            if (verbose) {
                System.out.println("   trying FMOV <Wd>,<Hn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee60000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100110 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e260000) {
            if (verbose) {
                System.out.println("   trying FMOV <Wd>,<Sn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x1e260000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100110 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e660000) {
            if (verbose) {
                System.out.println("   trying FMOV <Xd>,<Dn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x9e660000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100110 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee60000) {
            if (verbose) {
                System.out.println("   trying FMOV <Xd>,<Hn>");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee60000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 10101110 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9eae0000) {
            if (verbose) {
                System.out.println("   trying FMOV <Xd>,<Vn>.D[1]");
            }
            final int rmode = getPart(opcode32Bit, 19, 2);
            final int opcode = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfffffc00 = 0x9eae0000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = formatVectorRegister(Rn, "D[1]");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100001 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e614000) {
            if (verbose) {
                System.out.println("   trying FNEG <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNEG";
            stmt.key = "opcode & 0xfffffc00 = 0x1e614000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100001 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee14000) {
            if (verbose) {
                System.out.println("   trying FNEG <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNEG";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee14000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100001 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e214000) {
            if (verbose) {
                System.out.println("   trying FNEG <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNEG";
            stmt.key = "opcode & 0xfffffc00 = 0x1e214000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 11111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ef9d800) {
            if (verbose) {
                System.out.println("   trying FRECPE <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPE";
            stmt.key = "opcode & 0xfffffc00 = 0x5ef9d800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 11111001 111110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ef9f800) {
            if (verbose) {
                System.out.println("   trying FRECPX <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPX";
            stmt.key = "opcode & 0xfffffc00 = 0x5ef9f800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100110 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e664000) {
            if (verbose) {
                System.out.println("   trying FRINTA <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTA";
            stmt.key = "opcode & 0xfffffc00 = 0x1e664000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100110 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee64000) {
            if (verbose) {
                System.out.println("   trying FRINTA <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTA";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee64000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100110 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e264000) {
            if (verbose) {
                System.out.println("   trying FRINTA <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTA";
            stmt.key = "opcode & 0xfffffc00 = 0x1e264000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100111 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e67c000) {
            if (verbose) {
                System.out.println("   trying FRINTI <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTI";
            stmt.key = "opcode & 0xfffffc00 = 0x1e67c000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100111 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee7c000) {
            if (verbose) {
                System.out.println("   trying FRINTI <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTI";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee7c000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100111 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e27c000) {
            if (verbose) {
                System.out.println("   trying FRINTI <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTI";
            stmt.key = "opcode & 0xfffffc00 = 0x1e27c000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100101 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e654000) {
            if (verbose) {
                System.out.println("   trying FRINTM <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTM";
            stmt.key = "opcode & 0xfffffc00 = 0x1e654000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100101 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee54000) {
            if (verbose) {
                System.out.println("   trying FRINTM <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTM";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee54000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100101 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e254000) {
            if (verbose) {
                System.out.println("   trying FRINTM <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTM";
            stmt.key = "opcode & 0xfffffc00 = 0x1e254000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100100 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e644000) {
            if (verbose) {
                System.out.println("   trying FRINTN <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTN";
            stmt.key = "opcode & 0xfffffc00 = 0x1e644000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100100 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee44000) {
            if (verbose) {
                System.out.println("   trying FRINTN <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTN";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee44000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100100 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e244000) {
            if (verbose) {
                System.out.println("   trying FRINTN <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTN";
            stmt.key = "opcode & 0xfffffc00 = 0x1e244000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100100 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e64c000) {
            if (verbose) {
                System.out.println("   trying FRINTP <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTP";
            stmt.key = "opcode & 0xfffffc00 = 0x1e64c000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100100 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee4c000) {
            if (verbose) {
                System.out.println("   trying FRINTP <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTP";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee4c000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100100 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e24c000) {
            if (verbose) {
                System.out.println("   trying FRINTP <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTP";
            stmt.key = "opcode & 0xfffffc00 = 0x1e24c000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100111 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e674000) {
            if (verbose) {
                System.out.println("   trying FRINTX <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTX";
            stmt.key = "opcode & 0xfffffc00 = 0x1e674000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100111 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee74000) {
            if (verbose) {
                System.out.println("   trying FRINTX <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTX";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee74000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100111 010000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e274000) {
            if (verbose) {
                System.out.println("   trying FRINTX <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTX";
            stmt.key = "opcode & 0xfffffc00 = 0x1e274000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100101 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e65c000) {
            if (verbose) {
                System.out.println("   trying FRINTZ <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTZ";
            stmt.key = "opcode & 0xfffffc00 = 0x1e65c000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100101 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee5c000) {
            if (verbose) {
                System.out.println("   trying FRINTZ <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTZ";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee5c000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100101 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e25c000) {
            if (verbose) {
                System.out.println("   trying FRINTZ <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTZ";
            stmt.key = "opcode & 0xfffffc00 = 0x1e25c000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 11111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7ef9d800) {
            if (verbose) {
                System.out.println("   trying FRSQRTE <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTE";
            stmt.key = "opcode & 0xfffffc00 = 0x7ef9d800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100001 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e61c000) {
            if (verbose) {
                System.out.println("   trying FSQRT <Dd>,<Dn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSQRT";
            stmt.key = "opcode & 0xfffffc00 = 0x1e61c000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100001 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee1c000) {
            if (verbose) {
                System.out.println("   trying FSQRT <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSQRT";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee1c000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100001 110000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e21c000) {
            if (verbose) {
                System.out.println("   trying FSQRT <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSQRT";
            stmt.key = "opcode & 0xfffffc00 = 0x1e21c000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101010 000xxxxx 00000011 111xxxxx
        if ((opcode32Bit & 0xffe0ffe0) == 0x2a0003e0) {
            if (verbose) {
                System.out.println("   trying MOV <Wd>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOV";
            stmt.key = "opcode & 0xffe0ffe0 = 0x2a0003e0";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010001 00000000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x11000000) {
            if (verbose) {
                System.out.println("   trying MOV <Wd|WSP>,<Wn|WSP>");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((shift == 0 && imm12 == 0 && (Rd == 31 || Rn == 31))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xfffffc00 = 0x11000000";
                stmt.arg1 = getRegisterName("W", Rd, true, -1);
                stmt.arg2 = getRegisterName("W", Rn, true, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10101010 000xxxxx 00000011 111xxxxx
        if ((opcode32Bit & 0xffe0ffe0) == 0xaa0003e0) {
            if (verbose) {
                System.out.println("   trying MOV <Xd>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOV";
            stmt.key = "opcode & 0xffe0ffe0 = 0xaa0003e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10010001 00000000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x91000000) {
            if (verbose) {
                System.out.println("   trying MOV <Xd|SP>,<Xn|SP>");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((shift == 0 && imm12 == 0 && (Rd == 31 || Rn == 31)) && (Rd != Rn)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xfffffc00 = 0x91000000";
                stmt.arg1 = getRegisterName("X", Rd, true, -1);
                stmt.arg2 = getRegisterName("X", Rn, true, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01011010 000xxxxx 00000011 111xxxxx
        if ((opcode32Bit & 0xffe0ffe0) == 0x5a0003e0) {
            if (verbose) {
                System.out.println("   trying NGC <Wd>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "NGC";
            stmt.key = "opcode & 0xffe0ffe0 = 0x5a0003e0";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 000xxxxx 00000011 111xxxxx
        if ((opcode32Bit & 0xffe0ffe0) == 0xda0003e0) {
            if (verbose) {
                System.out.println("   trying NGC <Xd>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "NGC";
            stmt.key = "opcode & 0xffe0ffe0 = 0xda0003e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111010 000xxxxx 00000011 111xxxxx
        if ((opcode32Bit & 0xffe0ffe0) == 0x7a0003e0) {
            if (verbose) {
                System.out.println("   trying NGCS <Wd>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "NGCS";
                stmt.key = "opcode & 0xffe0ffe0 = 0x7a0003e0";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rm, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11111010 000xxxxx 00000011 111xxxxx
        if ((opcode32Bit & 0xffe0ffe0) == 0xfa0003e0) {
            if (verbose) {
                System.out.println("   trying NGCS <Xd>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "NGCS";
                stmt.key = "opcode & 0xffe0ffe0 = 0xfa0003e0";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rm, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11011010 11000001 000010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac10800) {
            if (verbose) {
                System.out.println("   trying PACDA <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACDA";
            stmt.key = "opcode & 0xfffffc00 = 0xdac10800";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 000011xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac10c00) {
            if (verbose) {
                System.out.println("   trying PACDB <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACDB";
            stmt.key = "opcode & 0xfffffc00 = 0xdac10c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac10000) {
            if (verbose) {
                System.out.println("   trying PACIA <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIA";
            stmt.key = "opcode & 0xfffffc00 = 0xdac10000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000001 000001xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac10400) {
            if (verbose) {
                System.out.println("   trying PACIB <Xd>,<Xn|SP>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACIB";
            stmt.key = "opcode & 0xfffffc00 = 0xdac10400";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011010 11000000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ac00000) {
            if (verbose) {
                System.out.println("   trying RBIT <Wd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RBIT";
            stmt.key = "opcode & 0xfffffc00 = 0x5ac00000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000000 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac00000) {
            if (verbose) {
                System.out.println("   trying RBIT <Xd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RBIT";
            stmt.key = "opcode & 0xfffffc00 = 0xdac00000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011010 11000000 000001xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5ac00400) {
            if (verbose) {
                System.out.println("   trying REV16 <Wd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV16";
            stmt.key = "opcode & 0xfffffc00 = 0x5ac00400";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000000 000001xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac00400) {
            if (verbose) {
                System.out.println("   trying REV16 <Xd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV16";
            stmt.key = "opcode & 0xfffffc00 = 0xdac00400";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000000 000010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xdac00800) {
            if (verbose) {
                System.out.println("   trying REV32 <Xd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV32";
            stmt.key = "opcode & 0xfffffc00 = 0xdac00800";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01100010 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e620000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Dd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x1e620000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100010 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e620000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Dd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x9e620000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 01111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e79d800) {
            if (verbose) {
                System.out.println("   trying SCVTF <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x5e79d800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100010 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee20000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Hd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee20000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100010 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee20000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Hd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee20000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100010 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e220000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Sd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x1e220000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00100010 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e220000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Sd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x9e220000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 00101000 000010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e280800) {
            if (verbose) {
                System.out.println("   trying SHA1H <Sd>,<Sn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA1H";
            stmt.key = "opcode & 0xfffffc00 = 0x5e280800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 00101000 000110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e281800) {
            if (verbose) {
                System.out.println("   trying SHA1SU1 <Vd>.4S,<Vn>.4S");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA1SU1";
            stmt.key = "opcode & 0xfffffc00 = 0x5e281800";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 00101000 001010xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x5e282800) {
            if (verbose) {
                System.out.println("   trying SHA256SU0 <Vd>.4S,<Vn>.4S");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA256SU0";
            stmt.key = "opcode & 0xfffffc00 = 0x5e282800";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 11000000 100000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xcec08000) {
            if (verbose) {
                System.out.println("   trying SHA512SU0 <Vd>.2D,<Vn>.2D");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA512SU0";
            stmt.key = "opcode & 0xfffffc00 = 0xcec08000";
            stmt.arg1 = formatVectorRegister(Rd, "2D");
            stmt.arg2 = formatVectorRegister(Rn, "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 11000000 100001xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0xcec08400) {
            if (verbose) {
                System.out.println("   trying SM4E <Vd>.4S,<Vn>.4S");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM4E";
            stmt.key = "opcode & 0xfffffc00 = 0xcec08400";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820001f) {
            if (verbose) {
                System.out.println("   trying STADDB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADDB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820001f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820001f) {
            if (verbose) {
                System.out.println("   trying STADDH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADDH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820001f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860001f) {
            if (verbose) {
                System.out.println("   trying STADDLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADDLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860001f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860001f) {
            if (verbose) {
                System.out.println("   trying STADDLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADDLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860001f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820101f) {
            if (verbose) {
                System.out.println("   trying STCLRB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLRB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820101f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820101f) {
            if (verbose) {
                System.out.println("   trying STCLRH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLRH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820101f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860101f) {
            if (verbose) {
                System.out.println("   trying STCLRLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLRLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860101f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860101f) {
            if (verbose) {
                System.out.println("   trying STCLRLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLRLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860101f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820201f) {
            if (verbose) {
                System.out.println("   trying STEORB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEORB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820201f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820201f) {
            if (verbose) {
                System.out.println("   trying STEORH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEORH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820201f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860201f) {
            if (verbose) {
                System.out.println("   trying STEORLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEORLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860201f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860201f) {
            if (verbose) {
                System.out.println("   trying STEORLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEORLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860201f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820301f) {
            if (verbose) {
                System.out.println("   trying STSETB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSETB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820301f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820301f) {
            if (verbose) {
                System.out.println("   trying STSETH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSETH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820301f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860301f) {
            if (verbose) {
                System.out.println("   trying STSETLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSETLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860301f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860301f) {
            if (verbose) {
                System.out.println("   trying STSETLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSETLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860301f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820401f) {
            if (verbose) {
                System.out.println("   trying STSMAXB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAXB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820401f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820401f) {
            if (verbose) {
                System.out.println("   trying STSMAXH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAXH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820401f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860401f) {
            if (verbose) {
                System.out.println("   trying STSMAXLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAXLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860401f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860401f) {
            if (verbose) {
                System.out.println("   trying STSMAXLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAXLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860401f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820501f) {
            if (verbose) {
                System.out.println("   trying STSMINB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMINB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820501f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820501f) {
            if (verbose) {
                System.out.println("   trying STSMINH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMINH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820501f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860501f) {
            if (verbose) {
                System.out.println("   trying STSMINLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMINLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860501f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860501f) {
            if (verbose) {
                System.out.println("   trying STSMINLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMINLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860501f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820601f) {
            if (verbose) {
                System.out.println("   trying STUMAXB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAXB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820601f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820601f) {
            if (verbose) {
                System.out.println("   trying STUMAXH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAXH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820601f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860601f) {
            if (verbose) {
                System.out.println("   trying STUMAXLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAXLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860601f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860601f) {
            if (verbose) {
                System.out.println("   trying STUMAXLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAXLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860601f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3820701f) {
            if (verbose) {
                System.out.println("   trying STUMINB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMINB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3820701f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7820701f) {
            if (verbose) {
                System.out.println("   trying STUMINH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMINH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7820701f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x3860701f) {
            if (verbose) {
                System.out.println("   trying STUMINLB <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMINLB";
            stmt.key = "opcode & 0xffe0fc1f = 0x3860701f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0xffe0fc1f) == 0x7860701f) {
            if (verbose) {
                System.out.println("   trying STUMINLH <Ws>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMINLH";
            stmt.key = "opcode & 0xffe0fc1f = 0x7860701f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010011 00000000 000111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x13001c00) {
            if (verbose) {
                System.out.println("   trying SXTB <Wd>,<Wn>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immr == 0 && imms == 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SXTB";
                stmt.key = "opcode & 0xfffffc00 = 0x13001c00";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 01000000 000111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x93401c00) {
            if (verbose) {
                System.out.println("   trying SXTB <Xd>,<Wn>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immr == 0 && imms == 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SXTB";
                stmt.key = "opcode & 0xfffffc00 = 0x93401c00";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00010011 00000000 001111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x13003c00) {
            if (verbose) {
                System.out.println("   trying SXTH <Wd>,<Wn>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immr == 0 && imms == 15)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SXTH";
                stmt.key = "opcode & 0xfffffc00 = 0x13003c00";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 01000000 001111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x93403c00) {
            if (verbose) {
                System.out.println("   trying SXTH <Xd>,<Wn>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immr == 0 && imms == 15)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SXTH";
                stmt.key = "opcode & 0xfffffc00 = 0x93403c00";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 01000000 011111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x93407c00) {
            if (verbose) {
                System.out.println("   trying SXTW <Xd>,<Wn>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immr == 0 && imms == 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SXTW";
                stmt.key = "opcode & 0xfffffc00 = 0x93407c00";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 01100011 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e630000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Dd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x1e630000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 01100011 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e630000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Dd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x9e630000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 01111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x7e79d800) {
            if (verbose) {
                System.out.println("   trying UCVTF <Hd>,<Hn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x7e79d800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 11100011 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1ee30000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Hd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x1ee30000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 11100011 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9ee30000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Hd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x9ee30000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 00100011 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x1e230000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Sd>,<Wn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x1e230000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011110 00100011 000000xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x9e230000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Sd>,<Xn>");
            }
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xfffffc00 = 0x9e230000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01010011 00000000 000111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x53001c00) {
            if (verbose) {
                System.out.println("   trying UXTB <Wd>,<Wn>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immr == 0 && imms == 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UXTB";
                stmt.key = "opcode & 0xfffffc00 = 0x53001c00";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01010011 00000000 001111xx xxxxxxxx
        if ((opcode32Bit & 0xfffffc00) == 0x53003c00) {
            if (verbose) {
                System.out.println("   trying UXTH <Wd>,<Wn>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immr == 0 && imms == 15)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UXTH";
                stmt.key = "opcode & 0xfffffc00 = 0x53003c00";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith21BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 0x001110 11111000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef8f800) {
            if (verbose) {
                System.out.println("   trying FABS <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABS";
            stmt.key = "opcode & 0xbffffc00 = 0xef8f800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x110000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e30d800) {
            if (verbose) {
                System.out.println("   trying FADDP <V-sz2><d>,<Vn>.<T-sz2>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADDP";
            stmt.key = "opcode & 0xffbffc00 = 0x7e30d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2S", "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x100000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5ea0d800) {
            if (verbose) {
                System.out.println("   trying FCMEQ <V><d>,<V><n>,#0.0");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xffbffc00 = 0x5ea0d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef8d800) {
            if (verbose) {
                System.out.println("   trying FCMEQ <Vd>.<T-h>,<Vn>.<T-h>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xbffffc00 = 0xef8d800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x100000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7ea0c800) {
            if (verbose) {
                System.out.println("   trying FCMGE <V><d>,<V><n>,#0.0");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xffbffc00 = 0x7ea0c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef8c800) {
            if (verbose) {
                System.out.println("   trying FCMGE <Vd>.<T-h>,<Vn>.<T-h>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef8c800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x100000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5ea0c800) {
            if (verbose) {
                System.out.println("   trying FCMGT <V><d>,<V><n>,#0.0");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xffbffc00 = 0x5ea0c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef8c800) {
            if (verbose) {
                System.out.println("   trying FCMGT <Vd>.<T-h>,<Vn>.<T-h>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xbffffc00 = 0xef8c800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x100000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7ea0d800) {
            if (verbose) {
                System.out.println("   trying FCMLE <V><d>,<V><n>,#0.0");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLE";
            stmt.key = "opcode & 0xffbffc00 = 0x7ea0d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef8d800) {
            if (verbose) {
                System.out.println("   trying FCMLE <Vd>.<T-h>,<Vn>.<T-h>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLE";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef8d800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x100000 111010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5ea0e800) {
            if (verbose) {
                System.out.println("   trying FCMLT <V><d>,<V><n>,#0.0");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLT";
            stmt.key = "opcode & 0xffbffc00 = 0x5ea0e800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111000 111010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef8e800) {
            if (verbose) {
                System.out.println("   trying FCMLT <Vd>.<T-h>,<Vn>.<T-h>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLT";
            stmt.key = "opcode & 0xbffffc00 = 0xef8e800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 0x100001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5e21c800) {
            if (verbose) {
                System.out.println("   trying FCVTAS <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xffbffc00 = 0x5e21c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 01111001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe79c800) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xbffffc00 = 0xe79c800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x100001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e21c800) {
            if (verbose) {
                System.out.println("   trying FCVTAU <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xffbffc00 = 0x7e21c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 01111001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e79c800) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xbffffc00 = 0x2e79c800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 0x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5e21b800) {
            if (verbose) {
                System.out.println("   trying FCVTMS <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xffbffc00 = 0x5e21b800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 01111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe79b800) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xbffffc00 = 0xe79b800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e21b800) {
            if (verbose) {
                System.out.println("   trying FCVTMU <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xffbffc00 = 0x7e21b800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 01111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e79b800) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xbffffc00 = 0x2e79b800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 0x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5e21a800) {
            if (verbose) {
                System.out.println("   trying FCVTNS <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xffbffc00 = 0x5e21a800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 01111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe79a800) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xbffffc00 = 0xe79a800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e21a800) {
            if (verbose) {
                System.out.println("   trying FCVTNU <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xffbffc00 = 0x7e21a800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 01111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e79a800) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xbffffc00 = 0x2e79a800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5ea1a800) {
            if (verbose) {
                System.out.println("   trying FCVTPS <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xffbffc00 = 0x5ea1a800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef9a800) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xbffffc00 = 0xef9a800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7ea1a800) {
            if (verbose) {
                System.out.println("   trying FCVTPU <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xffbffc00 = 0x7ea1a800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef9a800) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef9a800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x100001 011010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e216800) {
            if (verbose) {
                System.out.println("   trying FCVTXN <V-sz3><d>,<V-sz4><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTXN";
            stmt.key = "opcode & 0xffbffc00 = 0x7e216800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, null, "S");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5ea1b800) {
            if (verbose) {
                System.out.println("   trying FCVTZS <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xffbffc00 = 0x5ea1b800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef9b800) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xbffffc00 = 0xef9b800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7ea1b800) {
            if (verbose) {
                System.out.println("   trying FCVTZU <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xffbffc00 = 0x7ea1b800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef9b800) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef9b800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e30c800) {
            if (verbose) {
                System.out.println("   trying FMAXNMP <V-sz2><d>,<Vn>.<T-sz2>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNMP";
            stmt.key = "opcode & 0xffbffc00 = 0x7e30c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2S", "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 00110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe30c800) {
            if (verbose) {
                System.out.println("   trying FMAXNMV <V-sz1><d>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNMV";
            stmt.key = "opcode & 0xbffffc00 = 0xe30c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e30f800) {
            if (verbose) {
                System.out.println("   trying FMAXP <V-sz2><d>,<Vn>.<T-sz2>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXP";
            stmt.key = "opcode & 0xffbffc00 = 0x7e30f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2S", "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 00110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe30f800) {
            if (verbose) {
                System.out.println("   trying FMAXV <V-sz1><d>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXV";
            stmt.key = "opcode & 0xbffffc00 = 0xe30f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7eb0c800) {
            if (verbose) {
                System.out.println("   trying FMINNMP <V-sz2><d>,<Vn>.<T-sz2>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNMP";
            stmt.key = "opcode & 0xffbffc00 = 0x7eb0c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2S", "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 10110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xeb0c800) {
            if (verbose) {
                System.out.println("   trying FMINNMV <V-sz1><d>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNMV";
            stmt.key = "opcode & 0xbffffc00 = 0xeb0c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7eb0f800) {
            if (verbose) {
                System.out.println("   trying FMINP <V-sz2><d>,<Vn>.<T-sz2>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINP";
            stmt.key = "opcode & 0xffbffc00 = 0x7eb0f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "2S", "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 10110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xeb0f800) {
            if (verbose) {
                System.out.println("   trying FMINV <V-sz1><d>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINV";
            stmt.key = "opcode & 0xbffffc00 = 0xeb0f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "H", null);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef8f800) {
            if (verbose) {
                System.out.println("   trying FNEG <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNEG";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef8f800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5ea1d800) {
            if (verbose) {
                System.out.println("   trying FRECPE <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPE";
            stmt.key = "opcode & 0xffbffc00 = 0x5ea1d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef9d800) {
            if (verbose) {
                System.out.println("   trying FRECPE <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPE";
            stmt.key = "opcode & 0xbffffc00 = 0xef9d800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x100001 111110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5ea1f800) {
            if (verbose) {
                System.out.println("   trying FRECPX <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPX";
            stmt.key = "opcode & 0xffbffc00 = 0x5ea1f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 01111001 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e798800) {
            if (verbose) {
                System.out.println("   trying FRINTA <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTA";
            stmt.key = "opcode & 0xbffffc00 = 0x2e798800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef99800) {
            if (verbose) {
                System.out.println("   trying FRINTI <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTI";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef99800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 01111001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe799800) {
            if (verbose) {
                System.out.println("   trying FRINTM <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTM";
            stmt.key = "opcode & 0xbffffc00 = 0xe799800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 01111001 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe798800) {
            if (verbose) {
                System.out.println("   trying FRINTN <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTN";
            stmt.key = "opcode & 0xbffffc00 = 0xe798800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111001 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef98800) {
            if (verbose) {
                System.out.println("   trying FRINTP <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTP";
            stmt.key = "opcode & 0xbffffc00 = 0xef98800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 01111001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e799800) {
            if (verbose) {
                System.out.println("   trying FRINTX <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTX";
            stmt.key = "opcode & 0xbffffc00 = 0x2e799800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 11111001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xef99800) {
            if (verbose) {
                System.out.println("   trying FRINTZ <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTZ";
            stmt.key = "opcode & 0xbffffc00 = 0xef99800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7ea1d800) {
            if (verbose) {
                System.out.println("   trying FRSQRTE <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTE";
            stmt.key = "opcode & 0xffbffc00 = 0x7ea1d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef9d800) {
            if (verbose) {
                System.out.println("   trying FRSQRTE <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTE";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef9d800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 11111001 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2ef9f800) {
            if (verbose) {
                System.out.println("   trying FSQRT <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSQRT";
            stmt.key = "opcode & 0xbffffc00 = 0x2ef9f800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xd408400) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffffc00 = 0xd408400";
            stmt.arg1 = decodeLd1Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xddf8400) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.D }[<index>],[<Xn|SP>],#8");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffffc00 = 0xddf8400";
            stmt.arg1 = decodeLd1Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#8";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xd608400) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.D,<Vt2>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbffffc00 = 0xd608400";
            stmt.arg1 = decodeLd2Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xdff8400) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.D,<Vt2>.D }[<index>],[<Xn|SP>],#16");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbffffc00 = 0xdff8400";
            stmt.arg1 = decodeLd2Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#16";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xd40a400) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.D,<Vt2>.D,<Vt3>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbffffc00 = 0xd40a400";
            stmt.arg1 = decodeLd3Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xddfa400) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.D,<Vt2>.D,<Vt3>.D }[<index>],[<Xn|SP>],#24");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbffffc00 = 0xddfa400";
            stmt.arg1 = decodeLd3Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#24";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xd60a400) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.D,<Vt2>.D,<Vt3>.D,<Vt4>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbffffc00 = 0xd60a400";
            stmt.arg1 = decodeLd4Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xdffa400) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.D,<Vt2>.D,<Vt3>.D,<Vt4>.D }[<index>],[<Xn|SP>],#32");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbffffc00 = 0xdffa400";
            stmt.arg1 = decodeLd4Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#32";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001110 000x1000 001111xx xxxxxxxx
        if ((opcode32Bit & 0xffeffc00) == 0x4e083c00) {
            if (verbose) {
                System.out.println("   trying MOV <Xd>,<Vn>.D[<index-if2>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (((imm5 & 0b1111) == 0b1000)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xffeffc00 = 0x4e083c00";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, false, false, false, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101110 00100000 010110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e205800) {
            if (verbose) {
                System.out.println("   trying MVN <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MVN";
            stmt.key = "opcode & 0xbffffc00 = 0x2e205800";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 01100000 010110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e605800) {
            if (verbose) {
                System.out.println("   trying RBIT <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RBIT";
            stmt.key = "opcode & 0xbffffc00 = 0x2e605800";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011010 11000000 0000x0xx xxxxxxxx
        if ((opcode32Bit & 0xfffff400) == 0x5ac00000) {
            if (verbose) {
                System.out.println("   trying REV <Wd>,<Wn>");
            }
            final int opc = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV";
            stmt.key = "opcode & 0xfffff400 = 0x5ac00000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 11000000 0000x1xx xxxxxxxx
        if ((opcode32Bit & 0xfffff400) == 0xdac00400) {
            if (verbose) {
                System.out.println("   trying REV <Xd>,<Xn>");
            }
            final int opc = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV";
            stmt.key = "opcode & 0xfffff400 = 0xdac00400";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 0x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x5e21d800) {
            if (verbose) {
                System.out.println("   trying SCVTF <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xffbffc00 = 0x5e21d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 01111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xe79d800) {
            if (verbose) {
                System.out.println("   trying SCVTF <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xbffffc00 = 0xe79d800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xd008400) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffffc00 = 0xd008400";
            stmt.arg1 = decodeLd1Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xd9f8400) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.D }[<index>],[<Xn|SP>],#8");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffffc00 = 0xd9f8400";
            stmt.arg1 = decodeLd1Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#8";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xd208400) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.D,<Vt2>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbffffc00 = 0xd208400";
            stmt.arg1 = decodeLd2Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0xdbf8400) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.D,<Vt2>.D }[<index>],[<Xn|SP>],#16");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbffffc00 = 0xdbf8400";
            stmt.arg1 = decodeLd2Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#16";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820001f) {
            if (verbose) {
                System.out.println("   trying STADD <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADD";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820001f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820001f) {
            if (verbose) {
                System.out.println("   trying STADD <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADD";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820001f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860001f) {
            if (verbose) {
                System.out.println("   trying STADDL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADDL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860001f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 000000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860001f) {
            if (verbose) {
                System.out.println("   trying STADDL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STADDL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860001f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820101f) {
            if (verbose) {
                System.out.println("   trying STCLR <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLR";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820101f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820101f) {
            if (verbose) {
                System.out.println("   trying STCLR <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLR";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820101f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860101f) {
            if (verbose) {
                System.out.println("   trying STCLRL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLRL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860101f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 000100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860101f) {
            if (verbose) {
                System.out.println("   trying STCLRL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STCLRL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860101f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820201f) {
            if (verbose) {
                System.out.println("   trying STEOR <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEOR";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820201f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820201f) {
            if (verbose) {
                System.out.println("   trying STEOR <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEOR";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820201f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860201f) {
            if (verbose) {
                System.out.println("   trying STEORL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEORL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860201f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 001000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860201f) {
            if (verbose) {
                System.out.println("   trying STEORL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STEORL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860201f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820301f) {
            if (verbose) {
                System.out.println("   trying STSET <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSET";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820301f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820301f) {
            if (verbose) {
                System.out.println("   trying STSET <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSET";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820301f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860301f) {
            if (verbose) {
                System.out.println("   trying STSETL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSETL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860301f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 001100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860301f) {
            if (verbose) {
                System.out.println("   trying STSETL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSETL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860301f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820401f) {
            if (verbose) {
                System.out.println("   trying STSMAX <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAX";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820401f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820401f) {
            if (verbose) {
                System.out.println("   trying STSMAX <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAX";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820401f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860401f) {
            if (verbose) {
                System.out.println("   trying STSMAXL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAXL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860401f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 010000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860401f) {
            if (verbose) {
                System.out.println("   trying STSMAXL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMAXL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860401f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820501f) {
            if (verbose) {
                System.out.println("   trying STSMIN <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMIN";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820501f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820501f) {
            if (verbose) {
                System.out.println("   trying STSMIN <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMIN";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820501f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860501f) {
            if (verbose) {
                System.out.println("   trying STSMINL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMINL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860501f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 010100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860501f) {
            if (verbose) {
                System.out.println("   trying STSMINL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STSMINL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860501f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820601f) {
            if (verbose) {
                System.out.println("   trying STUMAX <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAX";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820601f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820601f) {
            if (verbose) {
                System.out.println("   trying STUMAX <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAX";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820601f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860601f) {
            if (verbose) {
                System.out.println("   trying STUMAXL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAXL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860601f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 011000xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860601f) {
            if (verbose) {
                System.out.println("   trying STUMAXL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMAXL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860601f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3820701f) {
            if (verbose) {
                System.out.println("   trying STUMIN <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMIN";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3820701f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7820701f) {
            if (verbose) {
                System.out.println("   trying STUMIN <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMIN";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7820701f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x3860701f) {
            if (verbose) {
                System.out.println("   trying STUMINL <Ws>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMINL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x3860701f";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 011100xx xxx11111
        if ((opcode32Bit & 0x7fe0fc1f) == 0x7860701f) {
            if (verbose) {
                System.out.println("   trying STUMINL <Xs>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUMINL";
            stmt.key = "opcode & 0x7fe0fc1f = 0x7860701f";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xffbffc00) == 0x7e21d800) {
            if (verbose) {
                System.out.println("   trying UCVTF <V><d>,<V><n>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xffbffc00 = 0x7e21d800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 01111001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbffffc00) == 0x2e79d800) {
            if (verbose) {
                System.out.println("   trying UCVTF <Vd>.<T-h>,<Vn>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xbffffc00 = 0x2e79d800";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001110 000x1000 001111xx xxxxxxxx
        if ((opcode32Bit & 0xffeffc00) == 0x4e083c00) {
            if (verbose) {
                System.out.println("   trying UMOV <Xd>,<Vn>.<Ts>[<index-if2>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!((imm5 & 0b1111) == 0b1000))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UMOV";
                stmt.key = "opcode & 0xffeffc00 = 0x4e083c00";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, false, false, false, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith20BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 01011110 xx100000 101110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e20b800) {
            if (verbose) {
                System.out.println("   trying ABS <V><d>,<V><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ABS";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e20b800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx110001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e31b800) {
            if (verbose) {
                System.out.println("   trying ADDP <V><d>,<Vn>.<T>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDP";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e31b800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeVectorReg2(size, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00001xxx 0111100x xxxxxxxx
        if ((opcode32Bit & 0xfff8fe00) == 0xd5087800) {
            if (verbose) {
                System.out.println("   trying AT <at_op>,<Xt>");
            }
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if ((getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("AT"))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "AT";
                stmt.key = "opcode & 0xfff8fe00 = 0xd5087800";
                stmt.arg1 = getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[1];
                stmt.arg2 = getRegisterName("X", Rt, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01011110 xx100000 100110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e209800) {
            if (verbose) {
                System.out.println("   trying CMEQ <V><d>,<V><n>,#0");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMEQ";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e209800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx100000 100010xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x7e208800) {
            if (verbose) {
                System.out.println("   trying CMGE <V><d>,<V><n>,#0");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGE";
            stmt.key = "opcode & 0xff3ffc00 = 0x7e208800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx100000 100010xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e208800) {
            if (verbose) {
                System.out.println("   trying CMGT <V><d>,<V><n>,#0");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGT";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e208800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx100000 100110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x7e209800) {
            if (verbose) {
                System.out.println("   trying CMLE <V><d>,<V><n>,#0");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMLE";
            stmt.key = "opcode & 0xff3ffc00 = 0x7e209800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx100000 101010xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e20a800) {
            if (verbose) {
                System.out.println("   trying CMLT <V><d>,<V><n>,#0");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMLT";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e20a800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea0f800) {
            if (verbose) {
                System.out.println("   trying FABS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABS";
            stmt.key = "opcode & 0xbfbffc00 = 0xea0f800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea0d800) {
            if (verbose) {
                System.out.println("   trying FCMEQ <Vd>.<T>,<Vn>.<T>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xbfbffc00 = 0xea0d800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea0c800) {
            if (verbose) {
                System.out.println("   trying FCMGE <Vd>.<T>,<Vn>.<T>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea0c800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea0c800) {
            if (verbose) {
                System.out.println("   trying FCMGT <Vd>.<T>,<Vn>.<T>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xbfbffc00 = 0xea0c800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100000 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea0d800) {
            if (verbose) {
                System.out.println("   trying FCMLE <Vd>.<T>,<Vn>.<T>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLE";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea0d800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100000 111010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea0e800) {
            if (verbose) {
                System.out.println("   trying FCMLT <Vd>.<T>,<Vn>.<T>,#0.0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLT";
            stmt.key = "opcode & 0xbfbffc00 = 0xea0e800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = "#0.0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe21c800) {
            if (verbose) {
                System.out.println("   trying FCVTAS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAS";
            stmt.key = "opcode & 0xbfbffc00 = 0xe21c800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x100001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e21c800) {
            if (verbose) {
                System.out.println("   trying FCVTAU <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTAU";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e21c800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 011110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe217800) {
            if (verbose) {
                System.out.println("   trying FCVTL{2} <Vd>.<T-sz4>,<Vn>.<T-szq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbfbffc00 = 0xe217800";
            stmt.arg1 = decodeVectorReg_sz(Rd, sz, "4S", "2D");
            stmt.arg2 = decodeVectorReg_szQ1(Rn, sz, Q);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe21b800) {
            if (verbose) {
                System.out.println("   trying FCVTMS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMS";
            stmt.key = "opcode & 0xbfbffc00 = 0xe21b800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e21b800) {
            if (verbose) {
                System.out.println("   trying FCVTMU <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTMU";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e21b800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe21a800) {
            if (verbose) {
                System.out.println("   trying FCVTNS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNS";
            stmt.key = "opcode & 0xbfbffc00 = 0xe21a800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e21a800) {
            if (verbose) {
                System.out.println("   trying FCVTNU <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTNU";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e21a800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 011010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe216800) {
            if (verbose) {
                System.out.println("   trying FCVTN{2} <Vd>.<T-szq1>,<Vn>.<T-sz4>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbfbffc00 = 0xe216800";
            stmt.arg1 = decodeVectorReg_szQ1(Rd, sz, Q);
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, "4S", "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea1a800) {
            if (verbose) {
                System.out.println("   trying FCVTPS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPS";
            stmt.key = "opcode & 0xbfbffc00 = 0xea1a800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea1a800) {
            if (verbose) {
                System.out.println("   trying FCVTPU <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTPU";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea1a800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x100001 011010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e216800) {
            if (verbose) {
                System.out.println("   trying FCVTXN{2} <Vd>.<T-szq4>,<Vn>.<T-sz3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTXN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbfbffc00 = 0x2e216800";
            stmt.arg1 = decodeVectorReg_szQ4(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg_sz(Rn, sz, null, "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea1b800) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xbfbffc00 = 0xea1b800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea1b800) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea1b800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e30c800) {
            if (verbose) {
                System.out.println("   trying FMAXNMV <V-sz5><d>,<Vn>.<T-szq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNMV";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e30c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", null);
            stmt.arg2 = decodeVectorReg_szQ3(Rn, sz, Q);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e30f800) {
            if (verbose) {
                System.out.println("   trying FMAXV <V-sz5><d>,<Vn>.<T-szq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXV";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e30f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", null);
            stmt.arg2 = decodeVectorReg_szQ3(Rn, sz, Q);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x110000 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2eb0c800) {
            if (verbose) {
                System.out.println("   trying FMINNMV <V-sz5><d>,<Vn>.<T-szq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNMV";
            stmt.key = "opcode & 0xbfbffc00 = 0x2eb0c800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", null);
            stmt.arg2 = decodeVectorReg_szQ3(Rn, sz, Q);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x110000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2eb0f800) {
            if (verbose) {
                System.out.println("   trying FMINV <V-sz5><d>,<Vn>.<T-szq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINV";
            stmt.key = "opcode & 0xbfbffc00 = 0x2eb0f800";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", null);
            stmt.arg2 = decodeVectorReg_szQ3(Rn, sz, Q);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100000 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea0f800) {
            if (verbose) {
                System.out.println("   trying FNEG <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNEG";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea0f800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea1d800) {
            if (verbose) {
                System.out.println("   trying FRECPE <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPE";
            stmt.key = "opcode & 0xbfbffc00 = 0xea1d800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x100001 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e218800) {
            if (verbose) {
                System.out.println("   trying FRINTA <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTA";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e218800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea19800) {
            if (verbose) {
                System.out.println("   trying FRINTI <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTI";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea19800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe219800) {
            if (verbose) {
                System.out.println("   trying FRINTM <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTM";
            stmt.key = "opcode & 0xbfbffc00 = 0xe219800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe218800) {
            if (verbose) {
                System.out.println("   trying FRINTN <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTN";
            stmt.key = "opcode & 0xbfbffc00 = 0xe218800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100001 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea18800) {
            if (verbose) {
                System.out.println("   trying FRINTP <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTP";
            stmt.key = "opcode & 0xbfbffc00 = 0xea18800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x100001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e219800) {
            if (verbose) {
                System.out.println("   trying FRINTX <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTX";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e219800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100001 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea19800) {
            if (verbose) {
                System.out.println("   trying FRINTZ <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRINTZ";
            stmt.key = "opcode & 0xbfbffc00 = 0xea19800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea1d800) {
            if (verbose) {
                System.out.println("   trying FRSQRTE <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTE";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea1d800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100001 111110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea1f800) {
            if (verbose) {
                System.out.println("   trying FSQRT <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSQRT";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea1f800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xd408000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfffec00 = 0xd408000";
            stmt.arg1 = decodeLd1Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xddf8000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.S }[<index>],[<Xn|SP>],#4");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfffec00 = 0xddf8000";
            stmt.arg1 = decodeLd1Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#4";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xd608000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.S,<Vt2>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfffec00 = 0xd608000";
            stmt.arg1 = decodeLd2Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xdff8000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.S,<Vt2>.S }[<index>],[<Xn|SP>],#8");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfffec00 = 0xdff8000";
            stmt.arg1 = decodeLd2Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#8";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 101x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xd40a000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.S,<Vt2>.S,<Vt3>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfffec00 = 0xd40a000";
            stmt.arg1 = decodeLd3Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 101x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xddfa000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.S,<Vt2>.S,<Vt3>.S }[<index>],[<Xn|SP>],#12");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfffec00 = 0xddfa000";
            stmt.arg1 = decodeLd3Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#12";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 101x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xd60a000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.S,<Vt2>.S,<Vt3>.S,<Vt4>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfffec00 = 0xd60a000";
            stmt.arg1 = decodeLd4Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 101x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xdffa000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.S,<Vt2>.S,<Vt3>.S,<Vt4>.S }[<index>],[<Xn|SP>],#16");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfffec00 = 0xdffa000";
            stmt.arg1 = decodeLd4Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#16";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001110 000xx100 001111xx xxxxxxxx
        if ((opcode32Bit & 0xffe7fc00) == 0xe043c00) {
            if (verbose) {
                System.out.println("   trying MOV <Wd>,<Vn>.S[<index-if1>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (((imm5 & 0b111) == 0b100)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xffe7fc00 = 0xe043c00";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, true, true, true, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01111110 xx100000 101110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x7e20b800) {
            if (verbose) {
                System.out.println("   trying NEG <V><d>,<V><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "NEG";
            stmt.key = "opcode & 0xff3ffc00 = 0x7e20b800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xe21d800) {
            if (verbose) {
                System.out.println("   trying SCVTF <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xbfbffc00 = 0xe21d800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx100000 011110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e207800) {
            if (verbose) {
                System.out.println("   trying SQABS <V-si4><d>,<V-si4><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQABS";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e207800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx100000 011110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x7e207800) {
            if (verbose) {
                System.out.println("   trying SQNEG <V-si4><d>,<V-si4><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQNEG";
            stmt.key = "opcode & 0xff3ffc00 = 0x7e207800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx100001 010010xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e214800) {
            if (verbose) {
                System.out.println("   trying SQXTN <V-si1><d>,<V-si5><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQXTN";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e214800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "H", "S", "D", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx100001 001010xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x7e212800) {
            if (verbose) {
                System.out.println("   trying SQXTUN <V-si1><d>,<V-si5><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQXTUN";
            stmt.key = "opcode & 0xff3ffc00 = 0x7e212800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "H", "S", "D", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xd008000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfffec00 = 0xd008000";
            stmt.arg1 = decodeLd1Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xd9f8000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.S }[<index>],[<Xn|SP>],#4");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfffec00 = 0xd9f8000";
            stmt.arg1 = decodeLd1Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#4";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xd208000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.S,<Vt2>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfffec00 = 0xd208000";
            stmt.arg1 = decodeLd2Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffec00) == 0xdbf8000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.S,<Vt2>.S }[<index>],[<Xn|SP>],#8");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfffec00 = 0xdbf8000";
            stmt.arg1 = decodeLd2Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#8";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbfffdc00) == 0xd008400) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.D,<Vt2>.D,<Vt3>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffdc00 = 0xd008400";
            stmt.arg1 = decodeLd3Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbfffdc00) == 0xd9f8400) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.D,<Vt2>.D,<Vt3>.D }[<index>],[<Xn|SP>],#24");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffdc00 = 0xd9f8400";
            stmt.arg1 = decodeLd3Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#24";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbfffdc00) == 0xd208400) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.D,<Vt2>.D,<Vt3>.D,<Vt4>.D }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffdc00 = 0xd208400";
            stmt.arg1 = decodeLd4Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbfffdc00) == 0xdbf8400) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.D,<Vt2>.D,<Vt3>.D,<Vt4>.D }[<index>],[<Xn|SP>],#32");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffdc00 = 0xdbf8400";
            stmt.arg1 = decodeLd4Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#32";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx100000 001110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x5e203800) {
            if (verbose) {
                System.out.println("   trying SUQADD <V-si4><d>,<V-si4><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUQADD";
            stmt.key = "opcode & 0xff3ffc00 = 0x5e203800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x100001 110110xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2e21d800) {
            if (verbose) {
                System.out.println("   trying UCVTF <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xbfbffc00 = 0x2e21d800";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx100001 010010xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x7e214800) {
            if (verbose) {
                System.out.println("   trying UQXTN <V-si1><d>,<V-si5><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQXTN";
            stmt.key = "opcode & 0xff3ffc00 = 0x7e214800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "H", "S", "D", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x100001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0xea1c800) {
            if (verbose) {
                System.out.println("   trying URECPE <Vd>.<T-szq2>,<Vn>.<T-szq2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URECPE";
            stmt.key = "opcode & 0xbfbffc00 = 0xea1c800";
            stmt.arg1 = decodeVectorReg_szQ2(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg_szQ2(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x100001 110010xx xxxxxxxx
        if ((opcode32Bit & 0xbfbffc00) == 0x2ea1c800) {
            if (verbose) {
                System.out.println("   trying URSQRTE <Vd>.<T-szq2>,<Vn>.<T-szq2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URSQRTE";
            stmt.key = "opcode & 0xbfbffc00 = 0x2ea1c800";
            stmt.arg1 = decodeVectorReg_szQ2(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg_szQ2(sz, Q, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx100000 001110xx xxxxxxxx
        if ((opcode32Bit & 0xff3ffc00) == 0x7e203800) {
            if (verbose) {
                System.out.println("   trying USQADD <V-si4><d>,<V-si4><n>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USQADD";
            stmt.key = "opcode & 0xff3ffc00 = 0x7e203800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith19BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 0x001110 xx100000 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe20b800) {
            if (verbose) {
                System.out.println("   trying ABS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ABS";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe20b800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx110001 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe31b800) {
            if (verbose) {
                System.out.println("   trying ADDV <V-si1><d>,<Vn>.<T-siq6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDV";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe31b800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____r_rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 001xxxx0 011111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x8207c00) {
            if (verbose) {
                System.out.println("   trying CASP <Ws>,<W(s+1)>,<Wt>,<W(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASP";
            stmt.key = "opcode & 0xffe1fc01 = 0x8207c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("W", Rt, false, -1);
            stmt.arg4 = getRegisterName("W", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 001xxxx0 011111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x48207c00) {
            if (verbose) {
                System.out.println("   trying CASP <Xs>,<X(s+1)>,<Xt>,<X(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASP";
            stmt.key = "opcode & 0xffe1fc01 = 0x48207c00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("X", Rt, false, -1);
            stmt.arg4 = getRegisterName("X", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 011xxxx0 011111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x8607c00) {
            if (verbose) {
                System.out.println("   trying CASPA <Ws>,<W(s+1)>,<Wt>,<W(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASPA";
            stmt.key = "opcode & 0xffe1fc01 = 0x8607c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("W", Rt, false, -1);
            stmt.arg4 = getRegisterName("W", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 011xxxx0 011111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x48607c00) {
            if (verbose) {
                System.out.println("   trying CASPA <Xs>,<X(s+1)>,<Xt>,<X(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASPA";
            stmt.key = "opcode & 0xffe1fc01 = 0x48607c00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("X", Rt, false, -1);
            stmt.arg4 = getRegisterName("X", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 011xxxx0 111111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x860fc00) {
            if (verbose) {
                System.out.println("   trying CASPAL <Ws>,<W(s+1)>,<Wt>,<W(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASPAL";
            stmt.key = "opcode & 0xffe1fc01 = 0x860fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("W", Rt, false, -1);
            stmt.arg4 = getRegisterName("W", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 011xxxx0 111111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x4860fc00) {
            if (verbose) {
                System.out.println("   trying CASPAL <Xs>,<X(s+1)>,<Xt>,<X(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASPAL";
            stmt.key = "opcode & 0xffe1fc01 = 0x4860fc00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("X", Rt, false, -1);
            stmt.arg4 = getRegisterName("X", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 001xxxx0 111111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x820fc00) {
            if (verbose) {
                System.out.println("   trying CASPL <Ws>,<W(s+1)>,<Wt>,<W(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASPL";
            stmt.key = "opcode & 0xffe1fc01 = 0x820fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("W", Rt, false, -1);
            stmt.arg4 = getRegisterName("W", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 001xxxx0 111111xx xxxxxxx0
        if ((opcode32Bit & 0xffe1fc01) == 0x4820fc00) {
            if (verbose) {
                System.out.println("   trying CASPL <Xs>,<X(s+1)>,<Xt>,<X(t+1)>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASPL";
            stmt.key = "opcode & 0xffe1fc01 = 0x4820fc00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", (Rs+1)%32, false, -1);
            stmt.arg3 = getRegisterName("X", Rt, false, -1);
            stmt.arg4 = getRegisterName("X", (Rt+1)%32, false, -1);
            stmt.arg5 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 010010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe204800) {
            if (verbose) {
                System.out.println("   trying CLS <Vd>.<T-siq1>,<Vn>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CLS";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe204800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 010010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e204800) {
            if (verbose) {
                System.out.println("   trying CLZ <Vd>.<T-siq1>,<Vn>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CLZ";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e204800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe209800) {
            if (verbose) {
                System.out.println("   trying CMEQ <Vd>.<T>,<Vn>.<T>,#0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMEQ";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe209800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e208800) {
            if (verbose) {
                System.out.println("   trying CMGE <Vd>.<T>,<Vn>.<T>,#0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGE";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e208800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 100010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe208800) {
            if (verbose) {
                System.out.println("   trying CMGT <Vd>.<T>,<Vn>.<T>,#0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGT";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe208800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 100110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e209800) {
            if (verbose) {
                System.out.println("   trying CMLE <Vd>.<T>,<Vn>.<T>,#0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMLE";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e209800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe20a800) {
            if (verbose) {
                System.out.println("   trying CMLT <Vd>.<T>,<Vn>.<T>,#0");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMLT";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe20a800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = "#0";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 010110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe205800) {
            if (verbose) {
                System.out.println("   trying CNT <Vd>.<T-siq7>,<Vn>.<T-siq7>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CNT";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe205800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "__rrrrrr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "__rrrrrr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx xxx10000 000xxxxx
        if ((opcode32Bit & 0xffe01fe0) == 0x1e601000) {
            if (verbose) {
                System.out.println("   trying FMOV <Dd>,#<imm>");
            }
            final int imm8 = getPart(opcode32Bit, 13, 8);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xffe01fe0 = 0x1e601000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = decodeFmovConstant(imm8);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx xxx10000 000xxxxx
        if ((opcode32Bit & 0xffe01fe0) == 0x1ee01000) {
            if (verbose) {
                System.out.println("   trying FMOV <Hd>,#<imm>");
            }
            final int imm8 = getPart(opcode32Bit, 13, 8);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xffe01fe0 = 0x1ee01000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = decodeFmovConstant(imm8);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx xxx10000 000xxxxx
        if ((opcode32Bit & 0xffe01fe0) == 0x1e201000) {
            if (verbose) {
                System.out.println("   trying FMOV <Sd>,#<imm>");
            }
            final int imm8 = getPart(opcode32Bit, 13, 8);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xffe01fe0 = 0x1e201000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = decodeFmovConstant(imm8);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101111 00000xxx 111101xx xxxxxxxx
        if ((opcode32Bit & 0xfff8fc00) == 0x6f00f400) {
            if (verbose) {
                System.out.println("   trying FMOV <Vd>.2D,#<imm>");
            }
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xfff8fc00 = 0x6f00f400";
            stmt.arg1 = formatVectorRegister(Rd, "2D");
            stmt.arg2 = decodeFmovConstant(a,b,c,d,e,f,g,h);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 01000000 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc407000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xc407000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 11011111 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xcdf7000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xcdf7000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 01000000 1010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc40a000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xc40a000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 11011111 1010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xcdfa000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xcdfa000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 01000000 0110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc406000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xc406000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 11011111 0110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xcdf6000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xcdf6000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 01000000 0010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc402000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xc402000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 11011111 0010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xcdf2000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbffff000 = 0xcdf2000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xd404000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfffe400 = 0xd404000";
            stmt.arg1 = decodeLd1Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xddf4000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.H }[<index>],[<Xn|SP>],#2");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfffe400 = 0xddf4000";
            stmt.arg1 = decodeLd1Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#2";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 1100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xd40c000) {
            if (verbose) {
                System.out.println("   trying LD1R { <Vt>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1R";
            stmt.key = "opcode & 0xbffff000 = 0xd40c000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 1100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xddfc000) {
            if (verbose) {
                System.out.println("   trying LD1R { <Vt>.<T> },[<Xn|SP>],<imm-f1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1R";
            stmt.key = "opcode & 0xbffff000 = 0xddfc000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, 1 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 01000000 1000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc408000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbffff000 = 0xc408000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 11011111 1000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xcdf8000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbffff000 = 0xcdf8000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xd604000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.H,<Vt2>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfffe400 = 0xd604000";
            stmt.arg1 = decodeLd2Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xdff4000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.H,<Vt2>.H }[<index>],[<Xn|SP>],#4");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfffe400 = 0xdff4000";
            stmt.arg1 = decodeLd2Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#4";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 1100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xd60c000) {
            if (verbose) {
                System.out.println("   trying LD2R { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2R";
            stmt.key = "opcode & 0xbffff000 = 0xd60c000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 1100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xdffc000) {
            if (verbose) {
                System.out.println("   trying LD2R { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<imm-f2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2R";
            stmt.key = "opcode & 0xbffff000 = 0xdffc000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, 2 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 01000000 0100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc404000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbffff000 = 0xc404000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 11011111 0100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xcdf4000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbffff000 = 0xcdf4000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 011xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xd406000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.H,<Vt2>.H,<Vt3>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfffe400 = 0xd406000";
            stmt.arg1 = decodeLd3Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 011xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xddf6000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.H,<Vt2>.H,<Vt3>.H }[<index>],[<Xn|SP>],#6");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfffe400 = 0xddf6000";
            stmt.arg1 = decodeLd3Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#6";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 1110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xd40e000) {
            if (verbose) {
                System.out.println("   trying LD3R { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3R";
            stmt.key = "opcode & 0xbffff000 = 0xd40e000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 1110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xddfe000) {
            if (verbose) {
                System.out.println("   trying LD3R { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<imm-f3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3R";
            stmt.key = "opcode & 0xbffff000 = 0xddfe000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, 3 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 01000000 0000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc400000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbffff000 = 0xc400000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 11011111 0000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xcdf0000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbffff000 = 0xcdf0000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 011xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xd606000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.H,<Vt2>.H,<Vt3>.H,<Vt4>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfffe400 = 0xd606000";
            stmt.arg1 = decodeLd4Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 011xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xdff6000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.H,<Vt2>.H,<Vt3>.H,<Vt4>.H }[<index>],[<Xn|SP>],#8");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfffe400 = 0xdff6000";
            stmt.arg1 = decodeLd4Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#8";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 1110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xd60e000) {
            if (verbose) {
                System.out.println("   trying LD4R { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4R";
            stmt.key = "opcode & 0xbffff000 = 0xd60e000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 1110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xdffe000) {
            if (verbose) {
                System.out.println("   trying LD4R { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<imm-f4>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4R";
            stmt.key = "opcode & 0xbffff000 = 0xdffe000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, 4 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101111 00000xxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xfff8fc00) == 0x2f00e400) {
            if (verbose) {
                System.out.println("   trying MOVI <Dd>,#<imm>");
            }
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVI";
            stmt.key = "opcode & 0xfff8fc00 = 0x2f00e400";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = decodeMovi64Constant(a,b,c,d,e,f,g,h);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101111 00000xxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xfff8fc00) == 0x6f00e400) {
            if (verbose) {
                System.out.println("   trying MOVI <Vd>.2D,#<imm>");
            }
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVI";
            stmt.key = "opcode & 0xfff8fc00 = 0x6f00e400";
            stmt.arg1 = formatVectorRegister(Rd, "2D");
            stmt.arg2 = decodeMovi64Constant(a,b,c,d,e,f,g,h);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 101110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e20b800) {
            if (verbose) {
                System.out.println("   trying NEG <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "NEG";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e20b800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 000110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe201800) {
            if (verbose) {
                System.out.println("   trying REV16 <Vd>.<T-siq7>,<Vn>.<T-siq7>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV16";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe201800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "__rrrrrr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "__rrrrrr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 000010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e200800) {
            if (verbose) {
                System.out.println("   trying REV32 <Vd>.<T-siq8>,<Vn>.<T-siq8>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV32";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e200800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "____rrrr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____rrrr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 000010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe200800) {
            if (verbose) {
                System.out.println("   trying REV64 <Vd>.<T-siq1>,<Vn>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "REV64";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe200800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 011010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe206800) {
            if (verbose) {
                System.out.println("   trying SADALP <Vd>.<T-siq10>,<Vn>.<T-siq9>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SADALP";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe206800";
            stmt.arg1 = decodeVectorReg_sizeQ_custom1(Rd, Q, size);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "_______r");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 001010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe202800) {
            if (verbose) {
                System.out.println("   trying SADDLP <Vd>.<T-siq10>,<Vn>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SADDLP";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe202800";
            stmt.arg1 = decodeVectorReg_sizeQ_custom1(Rd, Q, size);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx110000 001110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe303800) {
            if (verbose) {
                System.out.println("   trying SADDLV <V-si5><d>,<Vn>.<T-siq6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SADDLV";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe303800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "H", "S", "D", null);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____r_rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100001 001110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e213800) {
            if (verbose) {
                System.out.println("   trying SHLL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHLL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e213800";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeShift2(size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx110000 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe30a800) {
            if (verbose) {
                System.out.println("   trying SMAXV <V-si1><d>,<Vn>.<T-siq6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMAXV";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe30a800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____r_rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx110001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe31a800) {
            if (verbose) {
                System.out.println("   trying SMINV <V-si1><d>,<Vn>.<T-siq6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMINV";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe31a800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____r_rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 011110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe207800) {
            if (verbose) {
                System.out.println("   trying SQABS <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQABS";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe207800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 011110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e207800) {
            if (verbose) {
                System.out.println("   trying SQNEG <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQNEG";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e207800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100001 010010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe214800) {
            if (verbose) {
                System.out.println("   trying SQXTN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQXTN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf3ffc00 = 0xe214800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100001 001010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e212800) {
            if (verbose) {
                System.out.println("   trying SQXTUN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQXTUN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e212800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 00000000 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc007000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc007000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 10011111 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc9f7000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc9f7000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 00000000 1010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc00a000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc00a000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 10011111 1010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc9fa000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc9fa000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 00000000 0110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc006000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc006000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 10011111 0110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc9f6000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc9f6000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 00000000 0010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc002000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc002000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 10011111 0010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc9f2000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbffff000 = 0xc9f2000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xd004000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfffe400 = 0xd004000";
            stmt.arg1 = decodeLd1Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xd9f4000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.H }[<index>],[<Xn|SP>],#2");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfffe400 = 0xd9f4000";
            stmt.arg1 = decodeLd1Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#2";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 00000000 1000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc008000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbffff000 = 0xc008000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 10011111 1000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc9f8000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbffff000 = 0xc9f8000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xd204000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.H,<Vt2>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfffe400 = 0xd204000";
            stmt.arg1 = decodeLd2Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffe400) == 0xdbf4000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.H,<Vt2>.H }[<index>],[<Xn|SP>],#4");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfffe400 = 0xdbf4000";
            stmt.arg1 = decodeLd2Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#4";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 00000000 0100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc004000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbffff000 = 0xc004000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 10011111 0100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc9f4000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbffff000 = 0xc9f4000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 10xx00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffcc00) == 0xd008000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.S,<Vt2>.S,<Vt3>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffcc00 = 0xd008000";
            stmt.arg1 = decodeLd3Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 10xx00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffcc00) == 0xd9f8000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.S,<Vt2>.S,<Vt3>.S }[<index>],[<Xn|SP>],#12");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffcc00 = 0xd9f8000";
            stmt.arg1 = decodeLd3Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#12";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 00000000 0000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc000000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbffff000 = 0xc000000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 10011111 0000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbffff000) == 0xc9f0000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbffff000 = 0xc9f0000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, decodeLd1Offset(Q, numRegs));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 10xx00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffcc00) == 0xd208000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.S,<Vt2>.S,<Vt3>.S,<Vt4>.S }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffcc00 = 0xd208000";
            stmt.arg1 = decodeLd4Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 10xx00xx xxxxxxxx
        if ((opcode32Bit & 0xbfffcc00) == 0xdbf8000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.S,<Vt2>.S,<Vt3>.S,<Vt4>.S }[<index>],[<Xn|SP>],#16");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffcc00 = 0xdbf8000";
            stmt.arg1 = decodeLd4Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#16";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100000 001110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe203800) {
            if (verbose) {
                System.out.println("   trying SUQADD <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUQADD";
            stmt.key = "opcode & 0xbf3ffc00 = 0xe203800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 011010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e206800) {
            if (verbose) {
                System.out.println("   trying UADALP <Vd>.<T-siq10>,<Vn>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UADALP";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e206800";
            stmt.arg1 = decodeVectorReg_sizeQ_custom1(Rd, Q, size);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 001010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e202800) {
            if (verbose) {
                System.out.println("   trying UADDLP <Vd>.<T-siq10>,<Vn>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UADDLP";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e202800";
            stmt.arg1 = decodeVectorReg_sizeQ_custom1(Rd, Q, size);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx110000 001110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e303800) {
            if (verbose) {
                System.out.println("   trying UADDLV <V-si5><d>,<Vn>.<T-siq6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UADDLV";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e303800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "H", "S", "D", null);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____r_rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx110000 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e30a800) {
            if (verbose) {
                System.out.println("   trying UMAXV <V-si1><d>,<Vn>.<T-siq6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMAXV";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e30a800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____r_rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx110001 101010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e31a800) {
            if (verbose) {
                System.out.println("   trying UMINV <V-si1><d>,<Vn>.<T-siq6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMINV";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e31a800";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "____r_rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100001 010010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e214800) {
            if (verbose) {
                System.out.println("   trying UQXTN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQXTN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e214800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx100000 001110xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0x2e203800) {
            if (verbose) {
                System.out.println("   trying USQADD <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USQADD";
            stmt.key = "opcode & 0xbf3ffc00 = 0x2e203800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx100001 001010xx xxxxxxxx
        if ((opcode32Bit & 0xbf3ffc00) == 0xe212800) {
            if (verbose) {
                System.out.println("   trying XTN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "XTN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf3ffc00 = 0xe212800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith18BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 0x001111 00000xxx 111101xx xxxxxxxx
        if ((opcode32Bit & 0xbff8fc00) == 0xf00f400) {
            if (verbose) {
                System.out.println("   trying FMOV <Vd>.<T-s>,#<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xbff8fc00 = 0xf00f400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeFmovConstant(a,b,c,d,e,f,g,h);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00000xxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xbff8fc00) == 0xf00fc00) {
            if (verbose) {
                System.out.println("   trying FMOV <Vd>.<T-h>,#<imm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMOV";
            stmt.key = "opcode & 0xbff8fc00 = 0xf00fc00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeFmovConstant(a,b,c,d,e,f,g,h);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xd400000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfffe000 = 0xd400000";
            stmt.arg1 = decodeLd1Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xddf0000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.B }[<index>],[<Xn|SP>],#1");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfffe000 = 0xddf0000";
            stmt.arg1 = decodeLd1Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#1";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xd600000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.B,<Vt2>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfffe000 = 0xd600000";
            stmt.arg1 = decodeLd2Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xdff0000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.B,<Vt2>.B }[<index>],[<Xn|SP>],#2");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfffe000 = 0xdff0000";
            stmt.arg1 = decodeLd2Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#2";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01000000 001xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xd402000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.B,<Vt2>.B,<Vt3>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfffe000 = 0xd402000";
            stmt.arg1 = decodeLd3Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11011111 001xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xddf2000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.B,<Vt2>.B,<Vt3>.B }[<index>],[<Xn|SP>],#3");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfffe000 = 0xddf2000";
            stmt.arg1 = decodeLd3Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#3";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 01100000 001xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xd602000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.B,<Vt2>.B,<Vt3>.B,<Vt4>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfffe000 = 0xd602000";
            stmt.arg1 = decodeLd4Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 11111111 001xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xdff2000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.B,<Vt2>.B,<Vt3>.B,<Vt4>.B }[<index>],[<Xn|SP>],#4");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfffe000 = 0xdff2000";
            stmt.arg1 = decodeLd4Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#4";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00000xxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xbff8fc00) == 0xf00e400) {
            if (verbose) {
                System.out.println("   trying MOVI <Vd>.<T-b>,#<imm8>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVI";
            stmt.key = "opcode & 0xbff8fc00 = 0xf00e400";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeMovi8Constant(a,b,c,d,e,f,g,h);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xd000000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfffe000 = 0xd000000";
            stmt.arg1 = decodeLd1Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xd9f0000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.B }[<index>],[<Xn|SP>],#1");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfffe000 = 0xd9f0000";
            stmt.arg1 = decodeLd1Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#1";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xd200000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.B,<Vt2>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfffe000 = 0xd200000";
            stmt.arg1 = decodeLd2Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffe000) == 0xdbf0000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.B,<Vt2>.B }[<index>],[<Xn|SP>],#2");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfffe000 = 0xdbf0000";
            stmt.arg1 = decodeLd2Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#2";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 01xxx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffc400) == 0xd004000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.H,<Vt2>.H,<Vt3>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffc400 = 0xd004000";
            stmt.arg1 = decodeLd3Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 01xxx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffc400) == 0xd9f4000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.H,<Vt2>.H,<Vt3>.H }[<index>],[<Xn|SP>],#6");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffc400 = 0xd9f4000";
            stmt.arg1 = decodeLd3Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#6";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 01xxx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffc400) == 0xd204000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.H,<Vt2>.H,<Vt3>.H,<Vt4>.H }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffc400 = 0xd204000";
            stmt.arg1 = decodeLd4Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 01xxx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfffc400) == 0xdbf4000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.H,<Vt2>.H,<Vt3>.H,<Vt4>.H }[<index>],[<Xn|SP>],#8");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffc400 = 0xdbf4000";
            stmt.arg1 = decodeLd4Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#8";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith17BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 00011010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1a000000) {
            if (verbose) {
                System.out.println("   trying ADC <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADC";
            stmt.key = "opcode & 0xffe0fc00 = 0x1a000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9a000000) {
            if (verbose) {
                System.out.println("   trying ADC <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADC";
            stmt.key = "opcode & 0xffe0fc00 = 0x9a000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x3a000000) {
            if (verbose) {
                System.out.println("   trying ADCS <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADCS";
            stmt.key = "opcode & 0xffe0fc00 = 0x3a000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xba000000) {
            if (verbose) {
                System.out.println("   trying ADCS <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADCS";
            stmt.key = "opcode & 0xffe0fc00 = 0xba000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 001010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac02800) {
            if (verbose) {
                System.out.println("   trying ASR <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ASR";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac02800";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 001010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac02800) {
            if (verbose) {
                System.out.println("   trying ASR <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ASR";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac02800";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 00000xxx 10x101xx xxxxxxxx
        if ((opcode32Bit & 0xbff8dc00) == 0x2f009400) {
            if (verbose) {
                System.out.println("   trying BIC <Vd>.<T-h>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BIC";
            stmt.key = "opcode & 0xbff8dc00 = 0x2f009400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 111xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x8e07c00) {
            if (verbose) {
                System.out.println("   trying CASAB <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x8e07c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 111xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x48e07c00) {
            if (verbose) {
                System.out.println("   trying CASAH <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x48e07c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 111xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x8e0fc00) {
            if (verbose) {
                System.out.println("   trying CASALB <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x8e0fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 111xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x48e0fc00) {
            if (verbose) {
                System.out.println("   trying CASALH <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x48e0fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 101xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x8a07c00) {
            if (verbose) {
                System.out.println("   trying CASB <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASB";
            stmt.key = "opcode & 0xffe0fc00 = 0x8a07c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 101xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x48a07c00) {
            if (verbose) {
                System.out.println("   trying CASH <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASH";
            stmt.key = "opcode & 0xffe0fc00 = 0x48a07c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 101xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x8a0fc00) {
            if (verbose) {
                System.out.println("   trying CASLB <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x8a0fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 101xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x48a0fc00) {
            if (verbose) {
                System.out.println("   trying CASLH <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x48a0fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac04000) {
            if (verbose) {
                System.out.println("   trying CRC32B <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32B";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac04000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac05000) {
            if (verbose) {
                System.out.println("   trying CRC32CB <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32CB";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac05000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac05400) {
            if (verbose) {
                System.out.println("   trying CRC32CH <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32CH";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac05400";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 010110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac05800) {
            if (verbose) {
                System.out.println("   trying CRC32CW <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32CW";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac05800";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 010111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac05c00) {
            if (verbose) {
                System.out.println("   trying CRC32CX <Wd>,<Wn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32CX";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac05c00";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 010001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac04400) {
            if (verbose) {
                System.out.println("   trying CRC32H <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32H";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac04400";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 010010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac04800) {
            if (verbose) {
                System.out.println("   trying CRC32W <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32W";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac04800";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 010011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac04c00) {
            if (verbose) {
                System.out.println("   trying CRC32X <Wd>,<Wn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CRC32X";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac04c00";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00001xxx 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xfff8f000) == 0xd5087000) {
            if (verbose) {
                System.out.println("   trying DC <dc_op>,<Xt>");
            }
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if ((getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("DC"))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "DC";
                stmt.key = "opcode & 0xfff8f000 = 0xd5087000";
                stmt.arg1 = getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[1];
                stmt.arg2 = getRegisterName("X", Rt, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01111110 110xxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x7ec01400) {
            if (verbose) {
                System.out.println("   trying FABD <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABD";
            stmt.key = "opcode & 0xffe0fc00 = 0x7ec01400";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 010xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x7e402c00) {
            if (verbose) {
                System.out.println("   trying FACGE <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGE";
            stmt.key = "opcode & 0xffe0fc00 = 0x7e402c00";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 110xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x7ec02c00) {
            if (verbose) {
                System.out.println("   trying FACGT <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGT";
            stmt.key = "opcode & 0xffe0fc00 = 0x7ec02c00";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 001010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e602800) {
            if (verbose) {
                System.out.println("   trying FADD <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADD";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e602800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 001010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee02800) {
            if (verbose) {
                System.out.println("   trying FADD <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADD";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee02800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 001010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e202800) {
            if (verbose) {
                System.out.println("   trying FADD <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADD";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e202800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 010xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e402400) {
            if (verbose) {
                System.out.println("   trying FCMEQ <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e402400";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 010xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x7e402400) {
            if (verbose) {
                System.out.println("   trying FCMGE <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xffe0fc00 = 0x7e402400";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 110xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x7ec02400) {
            if (verbose) {
                System.out.println("   trying FCMGT <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xffe0fc00 = 0x7ec02400";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 000110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e601800) {
            if (verbose) {
                System.out.println("   trying FDIV <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FDIV";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e601800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 000110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee01800) {
            if (verbose) {
                System.out.println("   trying FDIV <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FDIV";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee01800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 000110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e201800) {
            if (verbose) {
                System.out.println("   trying FDIV <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FDIV";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e201800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 010010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e604800) {
            if (verbose) {
                System.out.println("   trying FMAX <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAX";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e604800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 010010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee04800) {
            if (verbose) {
                System.out.println("   trying FMAX <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAX";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee04800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 010010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e204800) {
            if (verbose) {
                System.out.println("   trying FMAX <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAX";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e204800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 011010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e606800) {
            if (verbose) {
                System.out.println("   trying FMAXNM <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNM";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e606800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 011010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee06800) {
            if (verbose) {
                System.out.println("   trying FMAXNM <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNM";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee06800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 011010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e206800) {
            if (verbose) {
                System.out.println("   trying FMAXNM <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNM";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e206800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 010110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e605800) {
            if (verbose) {
                System.out.println("   trying FMIN <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMIN";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e605800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 010110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee05800) {
            if (verbose) {
                System.out.println("   trying FMIN <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMIN";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee05800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 010110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e205800) {
            if (verbose) {
                System.out.println("   trying FMIN <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMIN";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e205800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 011110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e607800) {
            if (verbose) {
                System.out.println("   trying FMINNM <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNM";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e607800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 011110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee07800) {
            if (verbose) {
                System.out.println("   trying FMINNM <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNM";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee07800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 011110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e207800) {
            if (verbose) {
                System.out.println("   trying FMINNM <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNM";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e207800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 000010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e600800) {
            if (verbose) {
                System.out.println("   trying FMUL <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e600800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 000010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee00800) {
            if (verbose) {
                System.out.println("   trying FMUL <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee00800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 000010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e200800) {
            if (verbose) {
                System.out.println("   trying FMUL <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e200800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 010xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e401c00) {
            if (verbose) {
                System.out.println("   trying FMULX <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e401c00";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 100010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e608800) {
            if (verbose) {
                System.out.println("   trying FNMUL <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e608800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 100010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee08800) {
            if (verbose) {
                System.out.println("   trying FNMUL <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee08800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 100010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e208800) {
            if (verbose) {
                System.out.println("   trying FNMUL <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e208800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 010xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e403c00) {
            if (verbose) {
                System.out.println("   trying FRECPS <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPS";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e403c00";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 110xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5ec03c00) {
            if (verbose) {
                System.out.println("   trying FRSQRTS <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTS";
            stmt.key = "opcode & 0xffe0fc00 = 0x5ec03c00";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx 001110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e603800) {
            if (verbose) {
                System.out.println("   trying FSUB <Dd>,<Dn>,<Dm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSUB";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e603800";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx 001110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ee03800) {
            if (verbose) {
                System.out.println("   trying FSUB <Hd>,<Hn>,<Hm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSUB";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ee03800";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx 001110xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1e203800) {
            if (verbose) {
                System.out.println("   trying FSUB <Sd>,<Sn>,<Sm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSUB";
            stmt.key = "opcode & 0xffe0fc00 = 0x1e203800";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00001xxx 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xfff8f000) == 0xd5087000) {
            if (verbose) {
                System.out.println("   trying IC <ic_op>{,<Xt>}");
            }
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if ((getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("IC"))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "IC";
                stmt.key = "opcode & 0xfff8f000 = 0xd5087000";
                stmt.arg1 = getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[1];
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00111000 101xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a00000) {
            if (verbose) {
                System.out.println("   trying LDADDAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a00000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a00000) {
            if (verbose) {
                System.out.println("   trying LDADDAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a00000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e00000) {
            if (verbose) {
                System.out.println("   trying LDADDALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e00000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e00000) {
            if (verbose) {
                System.out.println("   trying LDADDALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e00000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38200000) {
            if (verbose) {
                System.out.println("   trying LDADDB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38200000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78200000) {
            if (verbose) {
                System.out.println("   trying LDADDH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78200000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38600000) {
            if (verbose) {
                System.out.println("   trying LDADDLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38600000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78600000) {
            if (verbose) {
                System.out.println("   trying LDADDLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78600000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111000 101xxxxx 110000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xb8a0c000) {
            if (verbose) {
                System.out.println("   trying LDAPR <Wt>,[<Xn|SP> {,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAPR";
            stmt.key = "opcode & 0xffe0fc00 = 0xb8a0c000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111000 101xxxxx 110000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xf8a0c000) {
            if (verbose) {
                System.out.println("   trying LDAPR <Xt>,[<Xn|SP> {,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAPR";
            stmt.key = "opcode & 0xffe0fc00 = 0xf8a0c000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 110000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a0c000) {
            if (verbose) {
                System.out.println("   trying LDAPRB <Wt>,[<Xn|SP> {,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAPRB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a0c000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 110000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a0c000) {
            if (verbose) {
                System.out.println("   trying LDAPRH <Wt>,[<Xn|SP> {,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAPRH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a0c000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a01000) {
            if (verbose) {
                System.out.println("   trying LDCLRAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a01000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a01000) {
            if (verbose) {
                System.out.println("   trying LDCLRAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a01000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e01000) {
            if (verbose) {
                System.out.println("   trying LDCLRALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e01000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e01000) {
            if (verbose) {
                System.out.println("   trying LDCLRALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e01000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38201000) {
            if (verbose) {
                System.out.println("   trying LDCLRB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38201000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78201000) {
            if (verbose) {
                System.out.println("   trying LDCLRH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78201000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38601000) {
            if (verbose) {
                System.out.println("   trying LDCLRLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38601000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78601000) {
            if (verbose) {
                System.out.println("   trying LDCLRLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78601000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a02000) {
            if (verbose) {
                System.out.println("   trying LDEORAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a02000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a02000) {
            if (verbose) {
                System.out.println("   trying LDEORAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a02000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e02000) {
            if (verbose) {
                System.out.println("   trying LDEORALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e02000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e02000) {
            if (verbose) {
                System.out.println("   trying LDEORALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e02000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38202000) {
            if (verbose) {
                System.out.println("   trying LDEORB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38202000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78202000) {
            if (verbose) {
                System.out.println("   trying LDEORH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78202000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38602000) {
            if (verbose) {
                System.out.println("   trying LDEORLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38602000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78602000) {
            if (verbose) {
                System.out.println("   trying LDEORLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78602000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a03000) {
            if (verbose) {
                System.out.println("   trying LDSETAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a03000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a03000) {
            if (verbose) {
                System.out.println("   trying LDSETAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a03000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e03000) {
            if (verbose) {
                System.out.println("   trying LDSETALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e03000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e03000) {
            if (verbose) {
                System.out.println("   trying LDSETALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e03000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38203000) {
            if (verbose) {
                System.out.println("   trying LDSETB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38203000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78203000) {
            if (verbose) {
                System.out.println("   trying LDSETH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78203000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38603000) {
            if (verbose) {
                System.out.println("   trying LDSETLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38603000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78603000) {
            if (verbose) {
                System.out.println("   trying LDSETLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78603000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a04000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a04000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e04000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e04000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38204000) {
            if (verbose) {
                System.out.println("   trying LDSMAXB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38204000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78204000) {
            if (verbose) {
                System.out.println("   trying LDSMAXH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78204000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38604000) {
            if (verbose) {
                System.out.println("   trying LDSMAXLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38604000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78604000) {
            if (verbose) {
                System.out.println("   trying LDSMAXLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78604000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a05000) {
            if (verbose) {
                System.out.println("   trying LDSMINAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a05000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a05000) {
            if (verbose) {
                System.out.println("   trying LDSMINAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a05000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e05000) {
            if (verbose) {
                System.out.println("   trying LDSMINALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e05000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e05000) {
            if (verbose) {
                System.out.println("   trying LDSMINALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e05000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38205000) {
            if (verbose) {
                System.out.println("   trying LDSMINB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38205000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78205000) {
            if (verbose) {
                System.out.println("   trying LDSMINH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78205000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38605000) {
            if (verbose) {
                System.out.println("   trying LDSMINLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38605000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78605000) {
            if (verbose) {
                System.out.println("   trying LDSMINLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78605000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a06000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a06000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e06000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e06000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38206000) {
            if (verbose) {
                System.out.println("   trying LDUMAXB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38206000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78206000) {
            if (verbose) {
                System.out.println("   trying LDUMAXH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78206000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38606000) {
            if (verbose) {
                System.out.println("   trying LDUMAXLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38606000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78606000) {
            if (verbose) {
                System.out.println("   trying LDUMAXLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78606000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a07000) {
            if (verbose) {
                System.out.println("   trying LDUMINAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a07000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a07000) {
            if (verbose) {
                System.out.println("   trying LDUMINAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a07000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e07000) {
            if (verbose) {
                System.out.println("   trying LDUMINALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e07000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e07000) {
            if (verbose) {
                System.out.println("   trying LDUMINALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e07000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38207000) {
            if (verbose) {
                System.out.println("   trying LDUMINB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38207000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78207000) {
            if (verbose) {
                System.out.println("   trying LDUMINH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78207000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38607000) {
            if (verbose) {
                System.out.println("   trying LDUMINLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38607000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78607000) {
            if (verbose) {
                System.out.println("   trying LDUMINLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78607000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac02000) {
            if (verbose) {
                System.out.println("   trying LSL <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LSL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac02000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac02000) {
            if (verbose) {
                System.out.println("   trying LSL <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LSL";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac02000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac02400) {
            if (verbose) {
                System.out.println("   trying LSR <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LSR";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac02400";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac02400) {
            if (verbose) {
                System.out.println("   trying LSR <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LSR";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac02400";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011011 000xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1b00fc00) {
            if (verbose) {
                System.out.println("   trying MNEG <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MNEG";
            stmt.key = "opcode & 0xffe0fc00 = 0x1b00fc00";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 000xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9b00fc00) {
            if (verbose) {
                System.out.println("   trying MNEG <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MNEG";
            stmt.key = "opcode & 0xffe0fc00 = 0x9b00fc00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e000400) {
            if (verbose) {
                System.out.println("   trying MOV <V><d>,<Vn>.<T>[<index>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOV";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e000400";
            stmt.arg1 = decodeFpuRegister_custom1(imm5, Rd);
            stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001110 000xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x4e001c00) {
            if (verbose) {
                System.out.println("   trying MOV <Vd>.<Ts>[<index>],<R><n2>");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOV";
            stmt.key = "opcode & 0xffe0fc00 = 0x4e001c00";
            stmt.arg1 = decodeVectorRegWithIndex1(Rd, imm5, true, true, true, true);
            stmt.arg2 = decodeBaseRegister2(imm5, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00000xxx 110x01xx xxxxxxxx
        if ((opcode32Bit & 0xbff8ec00) == 0xf00c400) {
            if (verbose) {
                System.out.println("   trying MOVI <Vd>.<T-s>,#<imm8>,MSL #<amount>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVI";
            stmt.key = "opcode & 0xbff8ec00 = 0xf00c400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeMovi8Constant(a,b,c,d,e,f,g,h);
            stmt.arg3 = decodeMslAmount(cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00000xxx 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbff8dc00) == 0xf008400) {
            if (verbose) {
                System.out.println("   trying MOVI <Vd>.<T-h>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVI";
            stmt.key = "opcode & 0xbff8dc00 = 0xf008400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011011 000xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1b007c00) {
            if (verbose) {
                System.out.println("   trying MUL <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x1b007c00";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 000xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9b007c00) {
            if (verbose) {
                System.out.println("   trying MUL <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MUL";
            stmt.key = "opcode & 0xffe0fc00 = 0x9b007c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 00000xxx 110x01xx xxxxxxxx
        if ((opcode32Bit & 0xbff8ec00) == 0x2f00c400) {
            if (verbose) {
                System.out.println("   trying MVNI <Vd>.<T-s>,#<imm8>,MSL #<amount>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MVNI";
            stmt.key = "opcode & 0xbff8ec00 = 0x2f00c400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeMovi8Constant(a,b,c,d,e,f,g,h);
            stmt.arg3 = decodeMslAmount(cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 00000xxx 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbff8dc00) == 0x2f008400) {
            if (verbose) {
                System.out.println("   trying MVNI <Vd>.<T-h>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MVNI";
            stmt.key = "opcode & 0xbff8dc00 = 0x2f008400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac03000) {
            if (verbose) {
                System.out.println("   trying PACGA <Xd>,<Xn>,<Xm|SP>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PACGA";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac03000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, true, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 011xxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xce608c00) {
            if (verbose) {
                System.out.println("   trying RAX1 <Vd>.2D,<Vn>.2D,<Vm>.2D");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RAX1";
            stmt.key = "opcode & 0xffe0fc00 = 0xce608c00";
            stmt.arg1 = formatVectorRegister(Rd, "2D");
            stmt.arg2 = formatVectorRegister(Rn, "2D");
            stmt.arg3 = formatVectorRegister(Rm, "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 110xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac02c00) {
            if (verbose) {
                System.out.println("   trying ROR <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ROR";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac02c00";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac02c00) {
            if (verbose) {
                System.out.println("   trying ROR <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ROR";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac02c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5a000000) {
            if (verbose) {
                System.out.println("   trying SBC <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SBC";
            stmt.key = "opcode & 0xffe0fc00 = 0x5a000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xda000000) {
            if (verbose) {
                System.out.println("   trying SBC <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SBC";
            stmt.key = "opcode & 0xffe0fc00 = 0xda000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x7a000000) {
            if (verbose) {
                System.out.println("   trying SBCS <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == 31))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBCS";
                stmt.key = "opcode & 0xffe0fc00 = 0x7a000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = getRegisterName("W", Rm, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11111010 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xfa000000) {
            if (verbose) {
                System.out.println("   trying SBCS <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == 31))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBCS";
                stmt.key = "opcode & 0xffe0fc00 = 0xfa000000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = getRegisterName("X", Rm, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011010 110xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac00c00) {
            if (verbose) {
                System.out.println("   trying SDIV <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SDIV";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac00c00";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac00c00) {
            if (verbose) {
                System.out.println("   trying SDIV <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SDIV";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac00c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e000000) {
            if (verbose) {
                System.out.println("   trying SHA1C <Qd>,<Sn>,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA1C";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e000000";
            stmt.arg1 = getRegisterName("Q", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e002000) {
            if (verbose) {
                System.out.println("   trying SHA1M <Qd>,<Sn>,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA1M";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e002000";
            stmt.arg1 = getRegisterName("Q", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e001000) {
            if (verbose) {
                System.out.println("   trying SHA1P <Qd>,<Sn>,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA1P";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e001000";
            stmt.arg1 = getRegisterName("Q", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e003000) {
            if (verbose) {
                System.out.println("   trying SHA1SU0 <Vd>.4S,<Vn>.4S,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA1SU0";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e003000";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e004000) {
            if (verbose) {
                System.out.println("   trying SHA256H <Qd>,<Qn>,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA256H";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e004000";
            stmt.arg1 = getRegisterName("Q", Rd, false, -1);
            stmt.arg2 = getRegisterName("Q", Rn, false, -1);
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e005000) {
            if (verbose) {
                System.out.println("   trying SHA256H2 <Qd>,<Qn>,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA256H2";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e005000";
            stmt.arg1 = getRegisterName("Q", Rd, false, -1);
            stmt.arg2 = getRegisterName("Q", Rn, false, -1);
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 000xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x5e006000) {
            if (verbose) {
                System.out.println("   trying SHA256SU1 <Vd>.4S,<Vn>.4S,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA256SU1";
            stmt.key = "opcode & 0xffe0fc00 = 0x5e006000";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 011xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xce608000) {
            if (verbose) {
                System.out.println("   trying SHA512H <Qd>,<Qn>,<Vm>.2D");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA512H";
            stmt.key = "opcode & 0xffe0fc00 = 0xce608000";
            stmt.arg1 = getRegisterName("Q", Rd, false, -1);
            stmt.arg2 = getRegisterName("Q", Rn, false, -1);
            stmt.arg3 = formatVectorRegister(Rm, "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 011xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xce608400) {
            if (verbose) {
                System.out.println("   trying SHA512H2 <Qd>,<Qn>,<Vm>.2D");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA512H2";
            stmt.key = "opcode & 0xffe0fc00 = 0xce608400";
            stmt.arg1 = getRegisterName("Q", Rd, false, -1);
            stmt.arg2 = getRegisterName("Q", Rn, false, -1);
            stmt.arg3 = formatVectorRegister(Rm, "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 011xxxxx 100010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xce608800) {
            if (verbose) {
                System.out.println("   trying SHA512SU1 <Vd>.2D,<Vn>.2D,<Vm>.2D");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHA512SU1";
            stmt.key = "opcode & 0xffe0fc00 = 0xce608800";
            stmt.arg1 = formatVectorRegister(Rd, "2D");
            stmt.arg2 = formatVectorRegister(Rn, "2D");
            stmt.arg3 = formatVectorRegister(Rm, "2D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 011xxxxx 110000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xce60c000) {
            if (verbose) {
                System.out.println("   trying SM3PARTW1 <Vd>.4S,<Vn>.4S,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM3PARTW1";
            stmt.key = "opcode & 0xffe0fc00 = 0xce60c000";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 011xxxxx 110001xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xce60c400) {
            if (verbose) {
                System.out.println("   trying SM3PARTW2 <Vd>.4S,<Vn>.4S,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM3PARTW2";
            stmt.key = "opcode & 0xffe0fc00 = 0xce60c400";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 011xxxxx 110010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xce60c800) {
            if (verbose) {
                System.out.println("   trying SM4EKEY <Vd>.4S,<Vn>.4S,<Vm>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM4EKEY";
            stmt.key = "opcode & 0xffe0fc00 = 0xce60c800";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 001xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9b20fc00) {
            if (verbose) {
                System.out.println("   trying SMNEGL <Xd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMNEGL";
            stmt.key = "opcode & 0xffe0fc00 = 0x9b20fc00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001110 000xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xe002c00) {
            if (verbose) {
                System.out.println("   trying SMOV <Wd>,<Vn>.<Ts>[<index-if3>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMOV";
            stmt.key = "opcode & 0xffe0fc00 = 0xe002c00";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, true, true, false, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001110 000xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x4e002c00) {
            if (verbose) {
                System.out.println("   trying SMOV <Xd>,<Vn>.<Ts>[<index-if1>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMOV";
            stmt.key = "opcode & 0xffe0fc00 = 0x4e002c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 001xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9b207c00) {
            if (verbose) {
                System.out.println("   trying SMULL <Xd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMULL";
            stmt.key = "opcode & 0xffe0fc00 = 0x9b207c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00000000 00xxxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffc000) == 0xd000000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.B,<Vt2>.B,<Vt3>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffc000 = 0xd000000";
            stmt.arg1 = decodeLd3Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10011111 00xxxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffc000) == 0xd9f0000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.B,<Vt2>.B,<Vt3>.B }[<index>],[<Xn|SP>],#3");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfffc000 = 0xd9f0000";
            stmt.arg1 = decodeLd3Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#3";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 00100000 00xxxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffc000) == 0xd200000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.B,<Vt2>.B,<Vt3>.B,<Vt4>.B }[<index>],[<Xn|SP>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffc000 = 0xd200000";
            stmt.arg1 = decodeLd4Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 10111111 00xxxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfffc000) == 0xdbf0000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.B,<Vt2>.B,<Vt3>.B,<Vt4>.B }[<index>],[<Xn|SP>],#4");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfffc000 = 0xdbf0000";
            stmt.arg1 = decodeLd4Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = "#4";
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 101xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38a08000) {
            if (verbose) {
                System.out.println("   trying SWPAB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPAB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38a08000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 101xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78a08000) {
            if (verbose) {
                System.out.println("   trying SWPAH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPAH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78a08000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 111xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38e08000) {
            if (verbose) {
                System.out.println("   trying SWPALB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPALB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38e08000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 111xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78e08000) {
            if (verbose) {
                System.out.println("   trying SWPALH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPALH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78e08000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38208000) {
            if (verbose) {
                System.out.println("   trying SWPB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38208000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78208000) {
            if (verbose) {
                System.out.println("   trying SWPH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78208000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x38608000) {
            if (verbose) {
                System.out.println("   trying SWPLB <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPLB";
            stmt.key = "opcode & 0xffe0fc00 = 0x38608000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x78608000) {
            if (verbose) {
                System.out.println("   trying SWPLH <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPLH";
            stmt.key = "opcode & 0xffe0fc00 = 0x78608000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxx000 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbf87fc00) == 0xf00a400) {
            if (verbose) {
                System.out.println("   trying SXTL{2} <Vd>.<T-cu1>,<Vn>.<T10>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((immb == 0 && bitCount(immh) == 1)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SXTL" + (Q==0?"":"2");
                stmt.key = "opcode & 0xbf87fc00 = 0xf00a400";
                stmt.arg1 = decodeVectorReg10(immh, Rd);
                stmt.arg2 = decodeVectorReg11(immh, Q, Rn);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010101 00001xxx 1000xxxx xxxxxxxx
        if ((opcode32Bit & 0xfff8f000) == 0xd5088000) {
            if (verbose) {
                System.out.println("   trying TLBI <tlbi_op>{,<Xt>}");
            }
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if ((getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("TLBI"))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "TLBI";
                stmt.key = "opcode & 0xfff8f000 = 0xd5088000";
                stmt.arg1 = decodeTlbiRegister(Rt, op1, CRm, op2);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011010 110xxxxx 000010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x1ac00800) {
            if (verbose) {
                System.out.println("   trying UDIV <Wd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UDIV";
            stmt.key = "opcode & 0xffe0fc00 = 0x1ac00800";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 110xxxxx 000010xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ac00800) {
            if (verbose) {
                System.out.println("   trying UDIV <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UDIV";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ac00800";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 101xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ba0fc00) {
            if (verbose) {
                System.out.println("   trying UMNEGL <Xd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMNEGL";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ba0fc00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001110 000xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0xe003c00) {
            if (verbose) {
                System.out.println("   trying UMOV <Wd>,<Vn>.<Ts>[<index-if1>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!((imm5 & 0b111) == 0b100))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UMOV";
                stmt.key = "opcode & 0xffe0fc00 = 0xe003c00";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, true, true, true, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011011 101xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xffe0fc00) == 0x9ba07c00) {
            if (verbose) {
                System.out.println("   trying UMULL <Xd>,<Wn>,<Wm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMULL";
            stmt.key = "opcode & 0xffe0fc00 = 0x9ba07c00";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxx000 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbf87fc00) == 0x2f00a400) {
            if (verbose) {
                System.out.println("   trying UXTL{2} <Vd>.<T-cu1>,<Vn>.<T10>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((bitCount(immh) == 1 && immb == 0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UXTL" + (Q==0?"":"2");
                stmt.key = "opcode & 0xbf87fc00 = 0x2f00a400";
                stmt.arg1 = decodeVectorReg10(immh, Rd);
                stmt.arg2 = decodeVectorReg11(immh, Q, Rn);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith16BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 0x001110 001xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe201c00) {
            if (verbose) {
                System.out.println("   trying AND <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AND";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe201c00";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 00000xxx 0xx101xx xxxxxxxx
        if ((opcode32Bit & 0xbff89c00) == 0x2f001400) {
            if (verbose) {
                System.out.println("   trying BIC <Vd>.<T-s>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BIC";
            stmt.key = "opcode & 0xbff89c00 = 0x2f001400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 011xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe601c00) {
            if (verbose) {
                System.out.println("   trying BIC <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BIC";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe601c00";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 111xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2ee01c00) {
            if (verbose) {
                System.out.println("   trying BIF <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BIF";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2ee01c00";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 101xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2ea01c00) {
            if (verbose) {
                System.out.println("   trying BIT <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BIT";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2ea01c00";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 001xxxxx xxxxxxxx xxx00000
        if ((opcode32Bit & 0xffe0001f) == 0xd4200000) {
            if (verbose) {
                System.out.println("   trying BRK #<imm>");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BRK";
            stmt.key = "opcode & 0xffe0001f = 0xd4200000";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 011xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e601c00) {
            if (verbose) {
                System.out.println("   trying BSL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BSL";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e601c00";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0001000 101xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x8a07c00) {
            if (verbose) {
                System.out.println("   trying CAS <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CAS";
            stmt.key = "opcode & 0x7fe0fc00 = 0x8a07c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 101xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x48a07c00) {
            if (verbose) {
                System.out.println("   trying CAS <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CAS";
            stmt.key = "opcode & 0x7fe0fc00 = 0x48a07c00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0001000 111xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x8e07c00) {
            if (verbose) {
                System.out.println("   trying CASA <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x8e07c00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 111xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x48e07c00) {
            if (verbose) {
                System.out.println("   trying CASA <Xs>,<Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x48e07c00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0001000 111xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x8e0fc00) {
            if (verbose) {
                System.out.println("   trying CASAL <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x8e0fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 111xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x48e0fc00) {
            if (verbose) {
                System.out.println("   trying CASAL <Xs>,<Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x48e0fc00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0001000 101xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x8a0fc00) {
            if (verbose) {
                System.out.println("   trying CASL <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x8a0fc00";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 101xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x48a0fc00) {
            if (verbose) {
                System.out.println("   trying CASL <Xs>,<Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CASL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x48a0fc00";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101011 001xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xffe0001f) == 0x2b20001f) {
            if (verbose) {
                System.out.println("   trying CMN <Wn|WSP>,<Wm>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMN";
            stmt.key = "opcode & 0xffe0001f = 0x2b20001f";
            stmt.arg1 = getRegisterName("W", Rn, true, -1);
            stmt.arg2 = decodeRegisterWithExtend("W", Rm, option, imm3, Rn == 31, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101011 001xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xffe0001f) == 0xab20001f) {
            if (verbose) {
                System.out.println("   trying CMN <Xn|SP>,<R><m>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMN";
            stmt.key = "opcode & 0xffe0001f = 0xab20001f";
            stmt.arg1 = getRegisterName("X", Rn, true, -1);
            stmt.arg2 = decodeRegisterWithExtend((option&3)==3 ? "X" : "W", Rm, option, imm3, Rn == 31, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101011 001xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xffe0001f) == 0x6b20001f) {
            if (verbose) {
                System.out.println("   trying CMP <Wn|WSP>,<Wm>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMP";
            stmt.key = "opcode & 0xffe0001f = 0x6b20001f";
            stmt.arg1 = getRegisterName("W", Rn, true, -1);
            stmt.arg2 = decodeRegisterWithExtend("W", Rm, option, imm3, Rn == 31, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11101011 001xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xffe0001f) == 0xeb20001f) {
            if (verbose) {
                System.out.println("   trying CMP <Xn|SP>,<R><m>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMP";
            stmt.key = "opcode & 0xffe0001f = 0xeb20001f";
            stmt.arg1 = getRegisterName("X", Rn, true, -1);
            stmt.arg2 = decodeRegisterWithExtend((option&3)==3 ? "X" : "W", Rm, option, imm3, Rn == 31, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 101xxxxx xxxxxxxx xxx00001
        if ((opcode32Bit & 0xffe0001f) == 0xd4a00001) {
            if (verbose) {
                System.out.println("   trying DCPS1 {#<imm>}");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DCPS1";
            stmt.key = "opcode & 0xffe0001f = 0xd4a00001";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 101xxxxx xxxxxxxx xxx00010
        if ((opcode32Bit & 0xffe0001f) == 0xd4a00002) {
            if (verbose) {
                System.out.println("   trying DCPS2 {#<imm>}");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DCPS2";
            stmt.key = "opcode & 0xffe0001f = 0xd4a00002";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 101xxxxx xxxxxxxx xxx00011
        if ((opcode32Bit & 0xffe0001f) == 0xd4a00003) {
            if (verbose) {
                System.out.println("   trying DCPS3 {#<imm>}");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DCPS3";
            stmt.key = "opcode & 0xffe0001f = 0xd4a00003";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe000c00) {
            if (verbose) {
                System.out.println("   trying DUP <Vd>.<T>,<R><n>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DUP";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe000c00";
            stmt.arg1 = decodeVectorReg5(Q, imm5, Rd);
            stmt.arg2 = decodeBaseRegister(imm5, Rn);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe000400) {
            if (verbose) {
                System.out.println("   trying DUP <Vd>.<T>,<Vn>.<Ts>[<index>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "DUP";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe000400";
            stmt.arg1 = decodeVectorReg5(Q, imm5, Rd);
            stmt.arg2 = decodeVectorRegWithIndex1(Rn, imm5, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 001xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e201c00) {
            if (verbose) {
                System.out.println("   trying EOR <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EOR";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e201c00";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x1xxxxx 110101xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x7ea0d400) {
            if (verbose) {
                System.out.println("   trying FABD <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABD";
            stmt.key = "opcode & 0xffa0fc00 = 0x7ea0d400";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 110xxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2ec01400) {
            if (verbose) {
                System.out.println("   trying FABD <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABD";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2ec01400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x1xxxxx 111011xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x7e20ec00) {
            if (verbose) {
                System.out.println("   trying FACGE <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGE";
            stmt.key = "opcode & 0xffa0fc00 = 0x7e20ec00";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 010xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e402c00) {
            if (verbose) {
                System.out.println("   trying FACGE <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGE";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e402c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x1xxxxx 111011xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x7ea0ec00) {
            if (verbose) {
                System.out.println("   trying FACGT <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGT";
            stmt.key = "opcode & 0xffa0fc00 = 0x7ea0ec00";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 110xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2ec02c00) {
            if (verbose) {
                System.out.println("   trying FACGT <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGT";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2ec02c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 010xxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe401400) {
            if (verbose) {
                System.out.println("   trying FADD <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADD";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe401400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 010xxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e401400) {
            if (verbose) {
                System.out.println("   trying FADDP <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADDP";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e401400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 0x1xxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x5e20e400) {
            if (verbose) {
                System.out.println("   trying FCMEQ <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xffa0fc00 = 0x5e20e400";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 010xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe402400) {
            if (verbose) {
                System.out.println("   trying FCMEQ <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe402400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 0x1xxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x7e20e400) {
            if (verbose) {
                System.out.println("   trying FCMGE <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xffa0fc00 = 0x7e20e400";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 010xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e402400) {
            if (verbose) {
                System.out.println("   trying FCMGE <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e402400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 1x1xxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x7ea0e400) {
            if (verbose) {
                System.out.println("   trying FCMGT <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xffa0fc00 = 0x7ea0e400";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 110xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2ec02400) {
            if (verbose) {
                System.out.println("   trying FCMGT <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2ec02400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01011000 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e580000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Wd>,<Dn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZS";
                stmt.key = "opcode & 0xffff0000 = 0x1e580000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("D", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 11011000 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1ed80000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Wd>,<Hn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZS";
                stmt.key = "opcode & 0xffff0000 = 0x1ed80000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("H", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 00011000 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e180000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Wd>,<Sn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZS";
                stmt.key = "opcode & 0xffff0000 = 0x1e180000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("S", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 01011000 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e580000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Xd>,<Dn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZS";
                stmt.key = "opcode & 0xffff0000 = 0x9e580000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("D", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 11011000 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9ed80000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Xd>,<Hn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZS";
                stmt.key = "opcode & 0xffff0000 = 0x9ed80000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("H", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 00011000 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e180000) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Xd>,<Sn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZS";
                stmt.key = "opcode & 0xffff0000 = 0x9e180000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("S", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 01011001 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e590000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Wd>,<Dn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZU";
                stmt.key = "opcode & 0xffff0000 = 0x1e590000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("D", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 11011001 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1ed90000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Wd>,<Hn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZU";
                stmt.key = "opcode & 0xffff0000 = 0x1ed90000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("H", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 00011001 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e190000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Wd>,<Sn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZU";
                stmt.key = "opcode & 0xffff0000 = 0x1e190000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("S", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 01011001 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e590000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Xd>,<Dn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZU";
                stmt.key = "opcode & 0xffff0000 = 0x9e590000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("D", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 11011001 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9ed90000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Xd>,<Hn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZU";
                stmt.key = "opcode & 0xffff0000 = 0x9ed90000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("H", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 00011001 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e190000) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Xd>,<Sn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCVTZU";
                stmt.key = "opcode & 0xffff0000 = 0x9e190000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("S", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101110 010xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e403c00) {
            if (verbose) {
                System.out.println("   trying FDIV <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FDIV";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e403c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 010xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe403400) {
            if (verbose) {
                System.out.println("   trying FMAX <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAX";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe403400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 010xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe400400) {
            if (verbose) {
                System.out.println("   trying FMAXNM <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNM";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe400400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 010xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e400400) {
            if (verbose) {
                System.out.println("   trying FMAXNMP <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNMP";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e400400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 010xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e403400) {
            if (verbose) {
                System.out.println("   trying FMAXP <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXP";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e403400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 110xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xec03400) {
            if (verbose) {
                System.out.println("   trying FMIN <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMIN";
            stmt.key = "opcode & 0xbfe0fc00 = 0xec03400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 110xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xec00400) {
            if (verbose) {
                System.out.println("   trying FMINNM <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNM";
            stmt.key = "opcode & 0xbfe0fc00 = 0xec00400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 110xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2ec00400) {
            if (verbose) {
                System.out.println("   trying FMINNMP <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNMP";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2ec00400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 110xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2ec03400) {
            if (verbose) {
                System.out.println("   trying FMINP <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINP";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2ec03400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 010xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe400c00) {
            if (verbose) {
                System.out.println("   trying FMLA <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLA";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe400c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 110xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xec00c00) {
            if (verbose) {
                System.out.println("   trying FMLS <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLS";
            stmt.key = "opcode & 0xbfe0fc00 = 0xec00c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 010xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e401c00) {
            if (verbose) {
                System.out.println("   trying FMUL <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e401c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 0x1xxxxx 110111xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x5e20dc00) {
            if (verbose) {
                System.out.println("   trying FMULX <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xffa0fc00 = 0x5e20dc00";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 010xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe401c00) {
            if (verbose) {
                System.out.println("   trying FMULX <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe401c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 0x1xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x5e20fc00) {
            if (verbose) {
                System.out.println("   trying FRECPS <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPS";
            stmt.key = "opcode & 0xffa0fc00 = 0x5e20fc00";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 010xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe403c00) {
            if (verbose) {
                System.out.println("   trying FRECPS <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPS";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe403c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 1x1xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xffa0fc00) == 0x5ea0fc00) {
            if (verbose) {
                System.out.println("   trying FRSQRTS <V><d>,<V><n>,<V><m>");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTS";
            stmt.key = "opcode & 0xffa0fc00 = 0x5ea0fc00";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeFpuRegister_sz(Rm, sz, "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 110xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xec03c00) {
            if (verbose) {
                System.out.println("   trying FRSQRTS <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTS";
            stmt.key = "opcode & 0xbfe0fc00 = 0xec03c00";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 110xxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xec01400) {
            if (verbose) {
                System.out.println("   trying FSUB <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.<T-h>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSUB";
            stmt.key = "opcode & 0xbfe0fc00 = 0xec01400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegHWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 010xxxxx xxxxxxxx xxx00000
        if ((opcode32Bit & 0xffe0001f) == 0xd4400000) {
            if (verbose) {
                System.out.println("   trying HLT #<imm>");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "HLT";
            stmt.key = "opcode & 0xffe0001f = 0xd4400000";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 000xxxxx xxxxxxxx xxx00010
        if ((opcode32Bit & 0xffe0001f) == 0xd4000002) {
            if (verbose) {
                System.out.println("   trying HVC #<imm>");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "HVC";
            stmt.key = "opcode & 0xffe0001f = 0xd4000002";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xdc08400) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0fc00 = 0xdc08400";
            stmt.arg1 = decodeLd1Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xde08400) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.D,<Vt2>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfe0fc00 = 0xde08400";
            stmt.arg1 = decodeLd2Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xdc0a400) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.D,<Vt2>.D,<Vt3>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfe0fc00 = 0xdc0a400";
            stmt.arg1 = decodeLd3Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xde0a400) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.D,<Vt2>.D,<Vt3>.D,<Vt4>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfe0fc00 = 0xde0a400";
            stmt.arg1 = decodeLd4Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38200000) {
            if (verbose) {
                System.out.println("   trying LDADD <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADD";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38200000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78200000) {
            if (verbose) {
                System.out.println("   trying LDADD <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADD";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78200000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a00000) {
            if (verbose) {
                System.out.println("   trying LDADDA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a00000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a00000) {
            if (verbose) {
                System.out.println("   trying LDADDA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a00000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e00000) {
            if (verbose) {
                System.out.println("   trying LDADDAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e00000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e00000) {
            if (verbose) {
                System.out.println("   trying LDADDAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e00000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38600000) {
            if (verbose) {
                System.out.println("   trying LDADDL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38600000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78600000) {
            if (verbose) {
                System.out.println("   trying LDADDL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDADDL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78600000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38201000) {
            if (verbose) {
                System.out.println("   trying LDCLR <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLR";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38201000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78201000) {
            if (verbose) {
                System.out.println("   trying LDCLR <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLR";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78201000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a01000) {
            if (verbose) {
                System.out.println("   trying LDCLRA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a01000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a01000) {
            if (verbose) {
                System.out.println("   trying LDCLRA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a01000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e01000) {
            if (verbose) {
                System.out.println("   trying LDCLRAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e01000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e01000) {
            if (verbose) {
                System.out.println("   trying LDCLRAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e01000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38601000) {
            if (verbose) {
                System.out.println("   trying LDCLRL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38601000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78601000) {
            if (verbose) {
                System.out.println("   trying LDCLRL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDCLRL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78601000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38202000) {
            if (verbose) {
                System.out.println("   trying LDEOR <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEOR";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38202000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78202000) {
            if (verbose) {
                System.out.println("   trying LDEOR <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEOR";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78202000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a02000) {
            if (verbose) {
                System.out.println("   trying LDEORA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a02000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a02000) {
            if (verbose) {
                System.out.println("   trying LDEORA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a02000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e02000) {
            if (verbose) {
                System.out.println("   trying LDEORAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e02000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e02000) {
            if (verbose) {
                System.out.println("   trying LDEORAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e02000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38602000) {
            if (verbose) {
                System.out.println("   trying LDEORL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38602000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78602000) {
            if (verbose) {
                System.out.println("   trying LDEORL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDEORL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78602000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 011xxxxx 011x10xx xxxxxxxx
        if ((opcode32Bit & 0xffe0ec00) == 0x3c606800) {
            if (verbose) {
                System.out.println("   trying LDR <Bt>,[<Xn|SP>,<Xm>{,LSL <amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe0ec00 = 0x3c606800";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegistersLsl("X", Rn, Rm, S==1?(size+4*(opc/2)):0, S);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx 011x10xx xxxxxxxx
        if ((opcode32Bit & 0xffe0ec00) == 0x38606800) {
            if (verbose) {
                System.out.println("   trying LDRB <Wt>,[<Xn|SP>,<Xm>{,LSL <amount>}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRB";
            stmt.key = "opcode & 0xffe0ec00 = 0x38606800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegistersLsl("X", Rn, Rm, S==1?size:0, S);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38203000) {
            if (verbose) {
                System.out.println("   trying LDSET <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSET";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38203000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78203000) {
            if (verbose) {
                System.out.println("   trying LDSET <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSET";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78203000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a03000) {
            if (verbose) {
                System.out.println("   trying LDSETA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a03000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a03000) {
            if (verbose) {
                System.out.println("   trying LDSETA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a03000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e03000) {
            if (verbose) {
                System.out.println("   trying LDSETAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e03000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e03000) {
            if (verbose) {
                System.out.println("   trying LDSETAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e03000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38603000) {
            if (verbose) {
                System.out.println("   trying LDSETL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38603000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78603000) {
            if (verbose) {
                System.out.println("   trying LDSETL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSETL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78603000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38204000) {
            if (verbose) {
                System.out.println("   trying LDSMAX <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAX";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38204000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78204000) {
            if (verbose) {
                System.out.println("   trying LDSMAX <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAX";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78204000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a04000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a04000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e04000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e04000) {
            if (verbose) {
                System.out.println("   trying LDSMAXAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e04000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38604000) {
            if (verbose) {
                System.out.println("   trying LDSMAXL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38604000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78604000) {
            if (verbose) {
                System.out.println("   trying LDSMAXL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMAXL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78604000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38205000) {
            if (verbose) {
                System.out.println("   trying LDSMIN <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMIN";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38205000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78205000) {
            if (verbose) {
                System.out.println("   trying LDSMIN <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMIN";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78205000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a05000) {
            if (verbose) {
                System.out.println("   trying LDSMINA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a05000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a05000) {
            if (verbose) {
                System.out.println("   trying LDSMINA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a05000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e05000) {
            if (verbose) {
                System.out.println("   trying LDSMINAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e05000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e05000) {
            if (verbose) {
                System.out.println("   trying LDSMINAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e05000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38605000) {
            if (verbose) {
                System.out.println("   trying LDSMINL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38605000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78605000) {
            if (verbose) {
                System.out.println("   trying LDSMINL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDSMINL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78605000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38206000) {
            if (verbose) {
                System.out.println("   trying LDUMAX <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAX";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38206000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78206000) {
            if (verbose) {
                System.out.println("   trying LDUMAX <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAX";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78206000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a06000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a06000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e06000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e06000) {
            if (verbose) {
                System.out.println("   trying LDUMAXAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e06000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38606000) {
            if (verbose) {
                System.out.println("   trying LDUMAXL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38606000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78606000) {
            if (verbose) {
                System.out.println("   trying LDUMAXL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMAXL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78606000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38207000) {
            if (verbose) {
                System.out.println("   trying LDUMIN <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMIN";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38207000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78207000) {
            if (verbose) {
                System.out.println("   trying LDUMIN <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMIN";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78207000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a07000) {
            if (verbose) {
                System.out.println("   trying LDUMINA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a07000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a07000) {
            if (verbose) {
                System.out.println("   trying LDUMINA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a07000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e07000) {
            if (verbose) {
                System.out.println("   trying LDUMINAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e07000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e07000) {
            if (verbose) {
                System.out.println("   trying LDUMINAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e07000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38607000) {
            if (verbose) {
                System.out.println("   trying LDUMINL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38607000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78607000) {
            if (verbose) {
                System.out.println("   trying LDUMINL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUMINL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78607000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 101xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xea01c00) {
            if (verbose) {
                System.out.println("   trying MOV <Vd>.<T>,<Vn>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xbfe0fc00 = 0xea01c00";
                stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
                stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x001111 00000xxx 0xx001xx xxxxxxxx
        if ((opcode32Bit & 0xbff89c00) == 0xf000400) {
            if (verbose) {
                System.out.println("   trying MOVI <Vd>.<T-s>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVI";
            stmt.key = "opcode & 0xbff89c00 = 0xf000400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 00000xxx 0xx001xx xxxxxxxx
        if ((opcode32Bit & 0xbff89c00) == 0x2f000400) {
            if (verbose) {
                System.out.println("   trying MVNI <Vd>.<T-s>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MVNI";
            stmt.key = "opcode & 0xbff89c00 = 0x2f000400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 111xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xee01c00) {
            if (verbose) {
                System.out.println("   trying ORN <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORN";
            stmt.key = "opcode & 0xbfe0fc00 = 0xee01c00";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00000xxx 10xx01xx xxxxxxxx
        if ((opcode32Bit & 0xbff8cc00) == 0xf008400) {
            if (verbose) {
                System.out.println("   trying ORR <Vd>.<T-h>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORR";
            stmt.key = "opcode & 0xbff8cc00 = 0xf008400";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 101xxxxx 000111xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xea01c00) {
            if (verbose) {
                System.out.println("   trying ORR <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn != Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "ORR";
                stmt.key = "opcode & 0xbfe0fc00 = 0xea01c00";
                stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
                stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
                stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 01000010 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e420000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Dd>,<Wn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x1e420000";
                stmt.arg1 = getRegisterName("D", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 01000010 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e420000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Dd>,<Xn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x9e420000";
                stmt.arg1 = getRegisterName("D", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 11000010 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1ec20000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Hd>,<Wn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x1ec20000";
                stmt.arg1 = getRegisterName("H", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 11000010 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9ec20000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Hd>,<Xn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x9ec20000";
                stmt.arg1 = getRegisterName("H", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 00000010 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e020000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Sd>,<Wn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x1e020000";
                stmt.arg1 = getRegisterName("S", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 00000010 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e020000) {
            if (verbose) {
                System.out.println("   trying SCVTF <Sd>,<Xn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x9e020000";
                stmt.arg1 = getRegisterName("S", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x001110 100xxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe809400) {
            if (verbose) {
                System.out.println("   trying SDOT <Vd>.<T-s>,<Vn>.<T-b>,<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SDOT";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe809400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 000xxxxx xxxxxxxx xxx00011
        if ((opcode32Bit & 0xffe0001f) == 0xd4000003) {
            if (verbose) {
                System.out.println("   trying SMC #<imm>");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMC";
            stmt.key = "opcode & 0xffe0001f = 0xd4000003";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xd808400) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0fc00 = 0xd808400";
            stmt.arg1 = decodeLd1Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xda08400) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.D,<Vt2>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfe0fc00 = 0xda08400";
            stmt.arg1 = decodeLd2Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 001xxxxx 011x10xx xxxxxxxx
        if ((opcode32Bit & 0xffe0ec00) == 0x3c206800) {
            if (verbose) {
                System.out.println("   trying STR <Bt>,[<Xn|SP>,<Xm>{,LSL <amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe0ec00 = 0x3c206800";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegistersLsl("X", Rn, Rm, S==1?(size+4*(opc/2)):0, S);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx 011x10xx xxxxxxxx
        if ((opcode32Bit & 0xffe0ec00) == 0x38206800) {
            if (verbose) {
                System.out.println("   trying STRB <Wt>,[<Xn|SP>,<Xm>{,LSL <amount>}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRB";
            stmt.key = "opcode & 0xffe0ec00 = 0x38206800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegistersLsl("X", Rn, Rm, S==1?size:0, S);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010100 000xxxxx xxxxxxxx xxx00001
        if ((opcode32Bit & 0xffe0001f) == 0xd4000001) {
            if (verbose) {
                System.out.println("   trying SVC #<imm>");
            }
            final int imm16 = getPart(opcode32Bit, 5, 16);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SVC";
            stmt.key = "opcode & 0xffe0001f = 0xd4000001";
            stmt.arg1 = formatHexImm(imm16);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38208000) {
            if (verbose) {
                System.out.println("   trying SWP <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWP";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38208000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78208000) {
            if (verbose) {
                System.out.println("   trying SWP <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWP";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78208000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 101xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38a08000) {
            if (verbose) {
                System.out.println("   trying SWPA <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38a08000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 101xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78a08000) {
            if (verbose) {
                System.out.println("   trying SWPA <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPA";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78a08000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 111xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38e08000) {
            if (verbose) {
                System.out.println("   trying SWPAL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38e08000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 111xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78e08000) {
            if (verbose) {
                System.out.println("   trying SWPAL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPAL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78e08000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x38608000) {
            if (verbose) {
                System.out.println("   trying SWPL <Ws>,<Wt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x38608000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0x7fe0fc00) == 0x78608000) {
            if (verbose) {
                System.out.println("   trying SWPL <Xs>,<Xt>,[<Xn|SP>]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SWPL";
            stmt.key = "opcode & 0x7fe0fc00 = 0x78608000";
            stmt.arg1 = getRegisterName("X", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe000000) {
            if (verbose) {
                System.out.println("   trying TBL <Vd>.<T-b>,{ <Vn>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBL";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe000000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 1;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe002000) {
            if (verbose) {
                System.out.println("   trying TBL <Vd>.<T-b>,{ <Vn>.16B,<Vn+1>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBL";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe002000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 2;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe004000) {
            if (verbose) {
                System.out.println("   trying TBL <Vd>.<T-b>,{ <Vn>.16B,<Vn+1>.16B,<Vn+2>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBL";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe004000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 3;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe006000) {
            if (verbose) {
                System.out.println("   trying TBL <Vd>.<T-b>,{ <Vn>.16B,<Vn+1>.16B,<Vn+2>.16B,<Vn+3>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBL";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe006000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 4;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe001000) {
            if (verbose) {
                System.out.println("   trying TBX <Vd>.<T-b>,{ <Vn>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBX";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe001000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 1;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe003000) {
            if (verbose) {
                System.out.println("   trying TBX <Vd>.<T-b>,{ <Vn>.16B,<Vn+1>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBX";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe003000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 2;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe005000) {
            if (verbose) {
                System.out.println("   trying TBX <Vd>.<T-b>,{ <Vn>.16B,<Vn+1>.16B,<Vn+2>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBX";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe005000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 3;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 000xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0xe007000) {
            if (verbose) {
                System.out.println("   trying TBX <Vd>.<T-b>,{ <Vn>.16B,<Vn+1>.16B,<Vn+2>.16B,<Vn+3>.16B },<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBX";
            stmt.key = "opcode & 0xbfe0fc00 = 0xe007000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            final int numRegs = 4;
            stmt.arg2 = decodeTbx(Rn, numRegs);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 01000011 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e430000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Dd>,<Wn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x1e430000";
                stmt.arg1 = getRegisterName("D", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 01000011 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e430000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Dd>,<Xn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x9e430000";
                stmt.arg1 = getRegisterName("D", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 11000011 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1ec30000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Hd>,<Wn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x1ec30000";
                stmt.arg1 = getRegisterName("H", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 11000011 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9ec30000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Hd>,<Xn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x9ec30000";
                stmt.arg1 = getRegisterName("H", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011110 00000011 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x1e030000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Sd>,<Wn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x1e030000";
                stmt.arg1 = getRegisterName("S", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011110 00000011 xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffff0000) == 0x9e030000) {
            if (verbose) {
                System.out.println("   trying UCVTF <Sd>,<Xn>,#<fbits>");
            }
            final int scale = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((sf == 1 || (scale>>5)>0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UCVTF";
                stmt.key = "opcode & 0xffff0000 = 0x9e030000";
                stmt.arg1 = getRegisterName("S", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeFbitsFromScale(scale);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101110 100xxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0fc00) == 0x2e809400) {
            if (verbose) {
                System.out.println("   trying UDOT <Vd>.<T-s>,<Vn>.<T-b>,<Vm>.<T-b>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UDOT";
            stmt.key = "opcode & 0xbfe0fc00 = 0x2e809400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith15BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 01011110 xx1xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e208400) {
            if (verbose) {
                System.out.println("   trying ADD <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADD";
            stmt.key = "opcode & 0xff20fc00 = 0x5e208400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00110011 00xxxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xffc003e0) == 0x330003e0) {
            if (verbose) {
                System.out.println("   trying BFC <Wd>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == 31 && imms < immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFC";
                stmt.key = "opcode & 0xffc003e0 = 0x330003e0";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg3 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10110011 01xxxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xffc003e0) == 0xb34003e0) {
            if (verbose) {
                System.out.println("   trying BFC <Xd>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == 31 && imms < immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFC";
                stmt.key = "opcode & 0xffc003e0 = 0xb34003e0";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg3 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01111110 xx1xxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e208c00) {
            if (verbose) {
                System.out.println("   trying CMEQ <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMEQ";
            stmt.key = "opcode & 0xff20fc00 = 0x7e208c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e203c00) {
            if (verbose) {
                System.out.println("   trying CMGE <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGE";
            stmt.key = "opcode & 0xff20fc00 = 0x5e203c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e203400) {
            if (verbose) {
                System.out.println("   trying CMGT <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGT";
            stmt.key = "opcode & 0xff20fc00 = 0x5e203400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e203400) {
            if (verbose) {
                System.out.println("   trying CMHI <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMHI";
            stmt.key = "opcode & 0xff20fc00 = 0x7e203400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e203c00) {
            if (verbose) {
                System.out.println("   trying CMHS <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMHS";
            stmt.key = "opcode & 0xff20fc00 = 0x7e203c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e208c00) {
            if (verbose) {
                System.out.println("   trying CMTST <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMTST";
            stmt.key = "opcode & 0xff20fc00 = 0x5e208c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x1xxxxx 110101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2ea0d400) {
            if (verbose) {
                System.out.println("   trying FABD <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FABD";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2ea0d400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x1xxxxx 111011xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2e20ec00) {
            if (verbose) {
                System.out.println("   trying FACGE <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGE";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2e20ec00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x1xxxxx 111011xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2ea0ec00) {
            if (verbose) {
                System.out.println("   trying FACGT <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FACGT";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2ea0ec00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x1xxxxx 110101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xe20d400) {
            if (verbose) {
                System.out.println("   trying FADD <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADD";
            stmt.key = "opcode & 0xbfa0fc00 = 0xe20d400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x1xxxxx 110101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2e20d400) {
            if (verbose) {
                System.out.println("   trying FADDP <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FADDP";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2e20d400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x1xxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xe20e400) {
            if (verbose) {
                System.out.println("   trying FCMEQ <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMEQ";
            stmt.key = "opcode & 0xbfa0fc00 = 0xe20e400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x1xxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2e20e400) {
            if (verbose) {
                System.out.println("   trying FCMGE <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGE";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2e20e400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x1xxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2ea0e400) {
            if (verbose) {
                System.out.println("   trying FCMGT <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMGT";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2ea0e400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f00fc00) {
            if (verbose) {
                System.out.println("   trying FCVTZS <V><d>,<V><n>,#<fbits2>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xff80fc00 = 0x5f00fc00";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f00fc00) {
            if (verbose) {
                System.out.println("   trying FCVTZU <V><d>,<V><n>,#<fbits2>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xff80fc00 = 0x7f00fc00";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x1xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2e20fc00) {
            if (verbose) {
                System.out.println("   trying FDIV <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FDIV";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2e20fc00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x1xxxxx 111101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xe20f400) {
            if (verbose) {
                System.out.println("   trying FMAX <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAX";
            stmt.key = "opcode & 0xbfa0fc00 = 0xe20f400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x1xxxxx 110001xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xe20c400) {
            if (verbose) {
                System.out.println("   trying FMAXNM <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNM";
            stmt.key = "opcode & 0xbfa0fc00 = 0xe20c400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x1xxxxx 110001xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2e20c400) {
            if (verbose) {
                System.out.println("   trying FMAXNMP <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXNMP";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2e20c400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x1xxxxx 111101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2e20f400) {
            if (verbose) {
                System.out.println("   trying FMAXP <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMAXP";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2e20f400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x1xxxxx 111101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xea0f400) {
            if (verbose) {
                System.out.println("   trying FMIN <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMIN";
            stmt.key = "opcode & 0xbfa0fc00 = 0xea0f400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x1xxxxx 110001xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xea0c400) {
            if (verbose) {
                System.out.println("   trying FMINNM <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNM";
            stmt.key = "opcode & 0xbfa0fc00 = 0xea0c400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x1xxxxx 110001xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2ea0c400) {
            if (verbose) {
                System.out.println("   trying FMINNMP <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINNMP";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2ea0c400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 1x1xxxxx 111101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2ea0f400) {
            if (verbose) {
                System.out.println("   trying FMINP <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMINP";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2ea0f400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 00xxxxxx 0001x0xx xxxxxxxx
        if ((opcode32Bit & 0xffc0f400) == 0x5f001000) {
            if (verbose) {
                System.out.println("   trying FMLA <Hd>,<Hn>,<Vm>.H[<index>]");
            }
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLA";
            stmt.key = "opcode & 0xffc0f400 = 0x5f001000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x1xxxxx 110011xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xe20cc00) {
            if (verbose) {
                System.out.println("   trying FMLA <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLA";
            stmt.key = "opcode & 0xbfa0fc00 = 0xe20cc00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 00xxxxxx 0101x0xx xxxxxxxx
        if ((opcode32Bit & 0xffc0f400) == 0x5f005000) {
            if (verbose) {
                System.out.println("   trying FMLS <Hd>,<Hn>,<Vm>.H[<index>]");
            }
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLS";
            stmt.key = "opcode & 0xffc0f400 = 0x5f005000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x1xxxxx 110011xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xea0cc00) {
            if (verbose) {
                System.out.println("   trying FMLS <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLS";
            stmt.key = "opcode & 0xbfa0fc00 = 0xea0cc00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 00xxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xffc0f400) == 0x5f009000) {
            if (verbose) {
                System.out.println("   trying FMUL <Hd>,<Hn>,<Vm>.H[<index>]");
            }
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xffc0f400 = 0x5f009000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 0x1xxxxx 110111xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0x2e20dc00) {
            if (verbose) {
                System.out.println("   trying FMUL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xbfa0fc00 = 0x2e20dc00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 00xxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xffc0f400) == 0x7f009000) {
            if (verbose) {
                System.out.println("   trying FMULX <Hd>,<Hn>,<Vm>.H[<index>]");
            }
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xffc0f400 = 0x7f009000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x1xxxxx 110111xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xe20dc00) {
            if (verbose) {
                System.out.println("   trying FMULX <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xbfa0fc00 = 0xe20dc00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 0x1xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xe20fc00) {
            if (verbose) {
                System.out.println("   trying FRECPS <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRECPS";
            stmt.key = "opcode & 0xbfa0fc00 = 0xe20fc00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x1xxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xea0fc00) {
            if (verbose) {
                System.out.println("   trying FRSQRTS <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FRSQRTS";
            stmt.key = "opcode & 0xbfa0fc00 = 0xea0fc00";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 1x1xxxxx 110101xx xxxxxxxx
        if ((opcode32Bit & 0xbfa0fc00) == 0xea0d400) {
            if (verbose) {
                System.out.println("   trying FSUB <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FSUB";
            stmt.key = "opcode & 0xbfa0fc00 = 0xea0d400";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorReg6(sz, Q, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0ec00) == 0xdc08000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0ec00 = 0xdc08000";
            stmt.arg1 = decodeLd1Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0ec00) == 0xde08000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.S,<Vt2>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfe0ec00 = 0xde08000";
            stmt.arg1 = decodeLd2Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 101x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0ec00) == 0xdc0a000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.S,<Vt2>.S,<Vt3>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfe0ec00 = 0xdc0a000";
            stmt.arg1 = decodeLd3Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 101x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0ec00) == 0xde0a000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.S,<Vt2>.S,<Vt3>.S,<Vt4>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfe0ec00 = 0xde0a000";
            stmt.arg1 = decodeLd4Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x11xxxxx 011x10xx xxxxxxxx
        if ((opcode32Bit & 0xff60ec00) == 0x38606800) {
            if (verbose) {
                System.out.println("   trying LDRSB <Wt>,[<Xn|SP>,<Xm>{,LSL <amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff60ec00 = 0x38606800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegistersLsl("X", Rn, Rm, S==1?size:0, S);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x01xxxxx 011x10xx xxxxxxxx
        if ((opcode32Bit & 0xff60ec00) == 0x38206800) {
            if (verbose) {
                System.out.println("   trying LDRSB <Xt>,[<Xn|SP>,<Xm>{,LSL <amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff60ec00 = 0x38206800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegistersLsl("X", Rn, Rm, S==1?size:0, S);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00110010 00xxxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xffc003e0) == 0x320003e0) {
            if (verbose) {
                System.out.println("   trying MOV <Wd|WSP>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOV";
            stmt.key = "opcode & 0xffc003e0 = 0x320003e0";
            stmt.arg1 = getRegisterName("W", Rd, true, -1);
            stmt.arg2 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00000xxx 0xxx01xx xxxxxxxx
        if ((opcode32Bit & 0xbff88c00) == 0xf000400) {
            if (verbose) {
                System.out.println("   trying ORR <Vd>.<T-s>,#<imm8>{,LSL #<amount>}");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int op = getPart(opcode32Bit, 29, 1);
            final int a = getPart(opcode32Bit, 18, 1);
            final int b = getPart(opcode32Bit, 17, 1);
            final int c = getPart(opcode32Bit, 16, 1);
            final int cmode = getPart(opcode32Bit, 12, 4);
            final int d = getPart(opcode32Bit, 9, 1);
            final int e = getPart(opcode32Bit, 8, 1);
            final int f = getPart(opcode32Bit, 7, 1);
            final int g = getPart(opcode32Bit, 6, 1);
            final int h = getPart(opcode32Bit, 5, 1);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORR";
            stmt.key = "opcode & 0xbff88c00 = 0xf000400";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeImm8WithLsl(a,b,c,d,e,f,g,h,op,cmode);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f00e400) {
            if (verbose) {
                System.out.println("   trying SCVTF <V><d>,<V><n>,#<fbits2>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xff80fc00 = 0x5f00e400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f005400) {
            if (verbose) {
                System.out.println("   trying SHL <V><d>,<V><n>,#<shift-hb2>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHL";
            stmt.key = "opcode & 0xff80fc00 = 0x5f005400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f005400) {
            if (verbose) {
                System.out.println("   trying SLI <V><d>,<V><n>,#<shift-hb2>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SLI";
            stmt.key = "opcode & 0xff80fc00 = 0x7f005400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 010xxxxx 10xx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe0cc00) == 0xce408000) {
            if (verbose) {
                System.out.println("   trying SM3TT1A <Vd>.4S,<Vn>.4S,<Vm>.S[<imm2>]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm2 = getPart(opcode32Bit, 12, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM3TT1A";
            stmt.key = "opcode & 0xffe0cc00 = 0xce408000";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = decodeVectorRegWithIndex12(Rm, imm2);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 010xxxxx 10xx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe0cc00) == 0xce408400) {
            if (verbose) {
                System.out.println("   trying SM3TT1B <Vd>.4S,<Vn>.4S,<Vm>.S[<imm2>]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm2 = getPart(opcode32Bit, 12, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM3TT1B";
            stmt.key = "opcode & 0xffe0cc00 = 0xce408400";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = decodeVectorRegWithIndex12(Rm, imm2);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 010xxxxx 10xx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe0cc00) == 0xce408800) {
            if (verbose) {
                System.out.println("   trying SM3TT2A <Vd>.4S,<Vn>.4S,<Vm>.S[<imm2>]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm2 = getPart(opcode32Bit, 12, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM3TT2A";
            stmt.key = "opcode & 0xffe0cc00 = 0xce408800";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = decodeVectorRegWithIndex12(Rm, imm2);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 010xxxxx 10xx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe0cc00) == 0xce408c00) {
            if (verbose) {
                System.out.println("   trying SM3TT2B <Vd>.4S,<Vn>.4S,<Vm>.S[<imm2>]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm2 = getPart(opcode32Bit, 12, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM3TT2B";
            stmt.key = "opcode & 0xffe0cc00 = 0xce408c00";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = decodeVectorRegWithIndex12(Rm, imm2);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e200c00) {
            if (verbose) {
                System.out.println("   trying SQADD <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQADD";
            stmt.key = "opcode & 0xff20fc00 = 0x5e200c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 100100xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e209000) {
            if (verbose) {
                System.out.println("   trying SQDMLAL <V-si2><d>,<V-si3><n>,<V-si3><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLAL";
            stmt.key = "opcode & 0xff20fc00 = 0x5e209000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "S", "D", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, "H", "S", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 101100xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e20b000) {
            if (verbose) {
                System.out.println("   trying SQDMLSL <V-si2><d>,<V-si3><n>,<V-si3><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLSL";
            stmt.key = "opcode & 0xff20fc00 = 0x5e20b000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "S", "D", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, "H", "S", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 101101xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e20b400) {
            if (verbose) {
                System.out.println("   trying SQDMULH <V-si3><d>,<V-si3><n>,<V-si3><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULH";
            stmt.key = "opcode & 0xff20fc00 = 0x5e20b400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, "H", "S", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 110100xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e20d000) {
            if (verbose) {
                System.out.println("   trying SQDMULL <V-si2><d>,<V-si3><n>,<V-si3><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULL";
            stmt.key = "opcode & 0xff20fc00 = 0x5e20d000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "S", "D", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, "H", "S", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx0xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e008400) {
            if (verbose) {
                System.out.println("   trying SQRDMLAH <V-si3><d>,<V-si3><n>,<V-si3><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLAH";
            stmt.key = "opcode & 0xff20fc00 = 0x7e008400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, "H", "S", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx0xxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e008c00) {
            if (verbose) {
                System.out.println("   trying SQRDMLSH <V-si3><d>,<V-si3><n>,<V-si3><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLSH";
            stmt.key = "opcode & 0xff20fc00 = 0x7e008c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, "H", "S", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 101101xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e20b400) {
            if (verbose) {
                System.out.println("   trying SQRDMULH <V-si3><d>,<V-si3><n>,<V-si3><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMULH";
            stmt.key = "opcode & 0xff20fc00 = 0x7e20b400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, "H", "S", null);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 010111xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e205c00) {
            if (verbose) {
                System.out.println("   trying SQRSHL <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRSHL";
            stmt.key = "opcode & 0xff20fc00 = 0x5e205c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 100111xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f009c00) {
            if (verbose) {
                System.out.println("   trying SQRSHRN <V-ih2><d>,<V-ih1><n>,#<shift>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRSHRN";
            stmt.key = "opcode & 0xff80fc00 = 0x5f009c00";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "H", "S", "D", null);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f008c00) {
            if (verbose) {
                System.out.println("   trying SQRSHRUN <V-ih2><d>,<V-ih1><n>,#<shift>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRSHRUN";
            stmt.key = "opcode & 0xff80fc00 = 0x7f008c00";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "H", "S", "D", null);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 011101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f007400) {
            if (verbose) {
                System.out.println("   trying SQSHL <V-ih3><d>,<V-ih3><n>,#<shift-hb3>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHL";
            stmt.key = "opcode & 0xff80fc00 = 0x5f007400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 010011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e204c00) {
            if (verbose) {
                System.out.println("   trying SQSHL <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHL";
            stmt.key = "opcode & 0xff20fc00 = 0x5e204c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 011001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f006400) {
            if (verbose) {
                System.out.println("   trying SQSHLU <V-ih3><d>,<V-ih3><n>,#<shift-hb3>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHLU";
            stmt.key = "opcode & 0xff80fc00 = 0x7f006400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f009400) {
            if (verbose) {
                System.out.println("   trying SQSHRN <V-ih2><d>,<V-ih1><n>,#<shift>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHRN";
            stmt.key = "opcode & 0xff80fc00 = 0x5f009400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "H", "S", "D", null);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f008400) {
            if (verbose) {
                System.out.println("   trying SQSHRUN <V-ih2><d>,<V-ih1><n>,#<shift>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHRUN";
            stmt.key = "opcode & 0xff80fc00 = 0x7f008400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "H", "S", "D", null);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e202c00) {
            if (verbose) {
                System.out.println("   trying SQSUB <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSUB";
            stmt.key = "opcode & 0xff20fc00 = 0x5e202c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 010001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f004400) {
            if (verbose) {
                System.out.println("   trying SRI <V-ih4><d>,<V-ih4><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRI";
            stmt.key = "opcode & 0xff80fc00 = 0x7f004400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, null, null, "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e205400) {
            if (verbose) {
                System.out.println("   trying SRSHL <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRSHL";
            stmt.key = "opcode & 0xff20fc00 = 0x5e205400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f002400) {
            if (verbose) {
                System.out.println("   trying SRSHR <V><d>,<V><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRSHR";
            stmt.key = "opcode & 0xff80fc00 = 0x5f002400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f003400) {
            if (verbose) {
                System.out.println("   trying SRSRA <V><d>,<V><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRSRA";
            stmt.key = "opcode & 0xff80fc00 = 0x5f003400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011110 xx1xxxxx 010001xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x5e204400) {
            if (verbose) {
                System.out.println("   trying SSHL <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSHL";
            stmt.key = "opcode & 0xff20fc00 = 0x5e204400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f000400) {
            if (verbose) {
                System.out.println("   trying SSHR <V-ih4><d>,<V-ih4><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSHR";
            stmt.key = "opcode & 0xff80fc00 = 0x5f000400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, null, null, "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 0xxxxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x5f001400) {
            if (verbose) {
                System.out.println("   trying SSRA <V-ih4><d>,<V-ih4><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSRA";
            stmt.key = "opcode & 0xff80fc00 = 0x5f001400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, null, null, "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0ec00) == 0xd808000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0ec00 = 0xd808000";
            stmt.arg1 = decodeLd1Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 100x00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0ec00) == 0xda08000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.S,<Vt2>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfe0ec00 = 0xda08000";
            stmt.arg1 = decodeLd2Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0dc00) == 0xd808400) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.D,<Vt2>.D,<Vt3>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfe0dc00 = 0xd808400";
            stmt.arg1 = decodeLd3Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 10x001xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0dc00) == 0xda08400) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.D,<Vt2>.D,<Vt3>.D,<Vt4>.D }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfe0dc00 = 0xda08400";
            stmt.arg1 = decodeLd4Index("D", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e208400) {
            if (verbose) {
                System.out.println("   trying SUB <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xff20fc00 = 0x7e208400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01110010 00xxxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xffc0001f) == 0x7200001f) {
            if (verbose) {
                System.out.println("   trying TST <Wn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TST";
            stmt.key = "opcode & 0xffc0001f = 0x7200001f";
            stmt.arg1 = getRegisterName("W", Rn, false, -1);
            stmt.arg2 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f00e400) {
            if (verbose) {
                System.out.println("   trying UCVTF <V><d>,<V><n>,#<fbits2>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xff80fc00 = 0x7f00e400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e200c00) {
            if (verbose) {
                System.out.println("   trying UQADD <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQADD";
            stmt.key = "opcode & 0xff20fc00 = 0x7e200c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 010111xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e205c00) {
            if (verbose) {
                System.out.println("   trying UQRSHL <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQRSHL";
            stmt.key = "opcode & 0xff20fc00 = 0x7e205c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 100111xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f009c00) {
            if (verbose) {
                System.out.println("   trying UQRSHRN <V-ih2><d>,<V-ih1><n>,#<shift>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQRSHRN";
            stmt.key = "opcode & 0xff80fc00 = 0x7f009c00";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "H", "S", "D", null);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 011101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f007400) {
            if (verbose) {
                System.out.println("   trying UQSHL <V-ih3><d>,<V-ih3><n>,#<shift-hb3>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSHL";
            stmt.key = "opcode & 0xff80fc00 = 0x7f007400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 010011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e204c00) {
            if (verbose) {
                System.out.println("   trying UQSHL <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSHL";
            stmt.key = "opcode & 0xff20fc00 = 0x7e204c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f009400) {
            if (verbose) {
                System.out.println("   trying UQSHRN <V-ih2><d>,<V-ih1><n>,#<shift>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSHRN";
            stmt.key = "opcode & 0xff80fc00 = 0x7f009400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, "B", "H", "S", null);
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, "H", "S", "D", null);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e202c00) {
            if (verbose) {
                System.out.println("   trying UQSUB <V-si4><d>,<V-si4><n>,<V-si4><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSUB";
            stmt.key = "opcode & 0xff20fc00 = 0x7e202c00";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, "B", "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, "B", "H", "S", "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, "B", "H", "S", "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e205400) {
            if (verbose) {
                System.out.println("   trying URSHL <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URSHL";
            stmt.key = "opcode & 0xff20fc00 = 0x7e205400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f002400) {
            if (verbose) {
                System.out.println("   trying URSHR <V-ih4><d>,<V-ih4><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URSHR";
            stmt.key = "opcode & 0xff80fc00 = 0x7f002400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, null, null, "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f003400) {
            if (verbose) {
                System.out.println("   trying URSRA <V><d>,<V><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URSRA";
            stmt.key = "opcode & 0xff80fc00 = 0x7f003400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, "H", "S", "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, "H", "S", "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111110 xx1xxxxx 010001xx xxxxxxxx
        if ((opcode32Bit & 0xff20fc00) == 0x7e204400) {
            if (verbose) {
                System.out.println("   trying USHL <V><d>,<V><n>,<V><m>");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USHL";
            stmt.key = "opcode & 0xff20fc00 = 0x7e204400";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, null, null, "D");
            stmt.arg3 = decodeFpuRegister_size(size, Rm, null, null, null, "D");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f000400) {
            if (verbose) {
                System.out.println("   trying USHR <V-ih4><d>,<V-ih4><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USHR";
            stmt.key = "opcode & 0xff80fc00 = 0x7f000400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, null, null, "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 0xxxxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xff80fc00) == 0x7f001400) {
            if (verbose) {
                System.out.println("   trying USRA <V-ih4><d>,<V-ih4><n>,#<shift-hb4>");
            }
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USRA";
            stmt.key = "opcode & 0xff80fc00 = 0x7f001400";
            stmt.arg1 = decodeFpuRegister_leadingZeros(immh, Rd, null, null, null, "D");
            stmt.arg2 = decodeFpuRegister_leadingZeros(immh, Rn, null, null, null, "D");
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, false, false, false, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith14BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 0x001110 xx1xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe208400) {
            if (verbose) {
                System.out.println("   trying ADD <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADD";
            stmt.key = "opcode & 0xbf20fc00 = 0xe208400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe204000) {
            if (verbose) {
                System.out.println("   trying ADDHN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>,<Vm>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDHN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe204000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_size1(size, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 101111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20bc00) {
            if (verbose) {
                System.out.println("   trying ADDP <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDP";
            stmt.key = "opcode & 0xbf20fc00 = 0xe20bc00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111010 010xxxxx xxxx10xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x3a400800) {
            if (verbose) {
                System.out.println("   trying CCMN <Wn>,#<imm>,#<nzcv>,<cond>");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMN";
            stmt.key = "opcode & 0xffe00c10 = 0x3a400800";
            stmt.arg1 = getRegisterName("W", Rn, false, -1);
            stmt.arg2 = formatHexImm(imm5);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111010 010xxxxx xxxx00xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x3a400000) {
            if (verbose) {
                System.out.println("   trying CCMN <Wn>,<Wm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMN";
            stmt.key = "opcode & 0xffe00c10 = 0x3a400000";
            stmt.arg1 = getRegisterName("W", Rn, false, -1);
            stmt.arg2 = getRegisterName("W", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111010 010xxxxx xxxx10xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0xba400800) {
            if (verbose) {
                System.out.println("   trying CCMN <Xn>,#<imm>,#<nzcv>,<cond>");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMN";
            stmt.key = "opcode & 0xffe00c10 = 0xba400800";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = formatHexImm(imm5);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111010 010xxxxx xxxx00xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0xba400000) {
            if (verbose) {
                System.out.println("   trying CCMN <Xn>,<Xm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMN";
            stmt.key = "opcode & 0xffe00c10 = 0xba400000";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111010 010xxxxx xxxx10xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x7a400800) {
            if (verbose) {
                System.out.println("   trying CCMP <Wn>,#<imm>,#<nzcv>,<cond>");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMP";
            stmt.key = "opcode & 0xffe00c10 = 0x7a400800";
            stmt.arg1 = getRegisterName("W", Rn, false, -1);
            stmt.arg2 = formatHexImm(imm5);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111010 010xxxxx xxxx00xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x7a400000) {
            if (verbose) {
                System.out.println("   trying CCMP <Wn>,<Wm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMP";
            stmt.key = "opcode & 0xffe00c10 = 0x7a400000";
            stmt.arg1 = getRegisterName("W", Rn, false, -1);
            stmt.arg2 = getRegisterName("W", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111010 010xxxxx xxxx10xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0xfa400800) {
            if (verbose) {
                System.out.println("   trying CCMP <Xn>,#<imm>,#<nzcv>,<cond>");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMP";
            stmt.key = "opcode & 0xffe00c10 = 0xfa400800";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = formatHexImm(imm5);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111010 010xxxxx xxxx00xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0xfa400000) {
            if (verbose) {
                System.out.println("   trying CCMP <Xn>,<Xm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CCMP";
            stmt.key = "opcode & 0xffe00c10 = 0xfa400000";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = getRegisterName("X", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e208c00) {
            if (verbose) {
                System.out.println("   trying CMEQ <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMEQ";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e208c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe203c00) {
            if (verbose) {
                System.out.println("   trying CMGE <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGE";
            stmt.key = "opcode & 0xbf20fc00 = 0xe203c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe203400) {
            if (verbose) {
                System.out.println("   trying CMGT <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMGT";
            stmt.key = "opcode & 0xbf20fc00 = 0xe203400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e203400) {
            if (verbose) {
                System.out.println("   trying CMHI <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMHI";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e203400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 001111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e203c00) {
            if (verbose) {
                System.out.println("   trying CMHS <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMHS";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e203c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101011 xx0xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff20001f) == 0x2b00001f) {
            if (verbose) {
                System.out.println("   trying CMN <Wn>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMN";
            stmt.key = "opcode & 0xff20001f = 0x2b00001f";
            stmt.arg1 = getRegisterName("W", Rn, false, -1);
            stmt.arg2 = decodeShiftedRegister("W", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101011 xx0xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff20001f) == 0xab00001f) {
            if (verbose) {
                System.out.println("   trying CMN <Xn>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMN";
            stmt.key = "opcode & 0xff20001f = 0xab00001f";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = decodeShiftedRegister("X", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101011 xx0xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff20001f) == 0x6b00001f) {
            if (verbose) {
                System.out.println("   trying CMP <Wn>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rd == 31 && Rn != 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CMP";
                stmt.key = "opcode & 0xff20001f = 0x6b00001f";
                stmt.arg1 = getRegisterName("W", Rn, false, -1);
                stmt.arg2 = decodeShiftedRegister("W", Rm, shift, imm6, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11101011 xx0xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff20001f) == 0xeb00001f) {
            if (verbose) {
                System.out.println("   trying CMP <Xn>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rd == 31 && Rn != 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CMP";
                stmt.key = "opcode & 0xff20001f = 0xeb00001f";
                stmt.arg1 = getRegisterName("X", Rn, false, -1);
                stmt.arg2 = decodeShiftedRegister("X", Rm, shift, imm6, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x001110 xx1xxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe208c00) {
            if (verbose) {
                System.out.println("   trying CMTST <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMTST";
            stmt.key = "opcode & 0xbf20fc00 = 0xe208c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx xxxx01xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x1e600400) {
            if (verbose) {
                System.out.println("   trying FCCMP <Dn>,<Dm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCCMP";
            stmt.key = "opcode & 0xffe00c10 = 0x1e600400";
            stmt.arg1 = getRegisterName("D", Rn, false, -1);
            stmt.arg2 = getRegisterName("D", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx xxxx01xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x1ee00400) {
            if (verbose) {
                System.out.println("   trying FCCMP <Hn>,<Hm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCCMP";
            stmt.key = "opcode & 0xffe00c10 = 0x1ee00400";
            stmt.arg1 = getRegisterName("H", Rn, false, -1);
            stmt.arg2 = getRegisterName("H", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx xxxx01xx xxx0xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x1e200400) {
            if (verbose) {
                System.out.println("   trying FCCMP <Sn>,<Sm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCCMP";
            stmt.key = "opcode & 0xffe00c10 = 0x1e200400";
            stmt.arg1 = getRegisterName("S", Rn, false, -1);
            stmt.arg2 = getRegisterName("S", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx xxxx01xx xxx1xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x1e600410) {
            if (verbose) {
                System.out.println("   trying FCCMPE <Dn>,<Dm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCCMPE";
            stmt.key = "opcode & 0xffe00c10 = 0x1e600410";
            stmt.arg1 = getRegisterName("D", Rn, false, -1);
            stmt.arg2 = getRegisterName("D", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx xxxx01xx xxx1xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x1ee00410) {
            if (verbose) {
                System.out.println("   trying FCCMPE <Hn>,<Hm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCCMPE";
            stmt.key = "opcode & 0xffe00c10 = 0x1ee00410";
            stmt.arg1 = getRegisterName("H", Rn, false, -1);
            stmt.arg2 = getRegisterName("H", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx xxxx01xx xxx1xxxx
        if ((opcode32Bit & 0xffe00c10) == 0x1e200410) {
            if (verbose) {
                System.out.println("   trying FCCMPE <Sn>,<Sm>,#<nzcv>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int nzcv = getPart(opcode32Bit, 0, 4);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCCMPE";
            stmt.key = "opcode & 0xffe00c10 = 0x1e200410";
            stmt.arg1 = getRegisterName("S", Rn, false, -1);
            stmt.arg2 = getRegisterName("S", Rm, false, -1);
            stmt.arg3 = formatHexImm(nzcv);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf00fc00) {
            if (verbose) {
                System.out.println("   trying FCVTZS <Vd>.<T>,<Vn>.<T>,#<fbits2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZS";
            stmt.key = "opcode & 0xbf80fc00 = 0xf00fc00";
            stmt.arg1 = decodeVectorReg9(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg9(immh, Q, Rn);
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 111111xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f00fc00) {
            if (verbose) {
                System.out.println("   trying FCVTZU <Vd>.<T>,<Vn>.<T>,#<fbits2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCVTZU";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f00fc00";
            stmt.arg1 = decodeVectorReg9(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg9(immh, Q, Rn);
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 1xxxxxxx 0001x0xx xxxxxxxx
        if ((opcode32Bit & 0xff80f400) == 0x5f801000) {
            if (verbose) {
                System.out.println("   trying FMLA <V><d>,<V><n>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLA";
            stmt.key = "opcode & 0xff80f400 = 0x5f801000";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00xxxxxx 0001x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc0f400) == 0xf001000) {
            if (verbose) {
                System.out.println("   trying FMLA <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.H[<index>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLA";
            stmt.key = "opcode & 0xbfc0f400 = 0xf001000";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 1xxxxxxx 0101x0xx xxxxxxxx
        if ((opcode32Bit & 0xff80f400) == 0x5f805000) {
            if (verbose) {
                System.out.println("   trying FMLS <V><d>,<V><n>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLS";
            stmt.key = "opcode & 0xff80f400 = 0x5f805000";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00xxxxxx 0101x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc0f400) == 0xf005000) {
            if (verbose) {
                System.out.println("   trying FMLS <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.H[<index>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLS";
            stmt.key = "opcode & 0xbfc0f400 = 0xf005000";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 1xxxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xff80f400) == 0x5f809000) {
            if (verbose) {
                System.out.println("   trying FMUL <V><d>,<V><n>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xff80f400 = 0x5f809000";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 00xxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc0f400) == 0xf009000) {
            if (verbose) {
                System.out.println("   trying FMUL <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.H[<index>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xbfc0f400 = 0xf009000";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 1xxxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xff80f400) == 0x7f809000) {
            if (verbose) {
                System.out.println("   trying FMULX <V><d>,<V><n>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xff80f400 = 0x7f809000";
            stmt.arg1 = decodeFpuRegister_sz(Rd, sz, "S", "D");
            stmt.arg2 = decodeFpuRegister_sz(Rn, sz, "S", "D");
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 00xxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc0f400) == 0x2f009000) {
            if (verbose) {
                System.out.println("   trying FMULX <Vd>.<T-h>,<Vn>.<T-h>,<Vm>.H[<index>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xbfc0f400 = 0x2f009000";
            stmt.arg1 = decodeVectorRegHWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegHWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex3(Rm, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 110xxxxx 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xcc07000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0f000 = 0xcc07000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 110xxxxx 1010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xcc0a000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0f000 = 0xcc0a000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 110xxxxx 0110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xcc06000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0f000 = 0xcc06000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 110xxxxx 0010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xcc02000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0f000 = 0xcc02000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e400) == 0xdc04000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0e400 = 0xdc04000";
            stmt.arg1 = decodeLd1Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 1100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xdc0c000) {
            if (verbose) {
                System.out.println("   trying LD1R { <Vt>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1R";
            stmt.key = "opcode & 0xbfe0f000 = 0xdc0c000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 110xxxxx 1000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xcc08000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfe0f000 = 0xcc08000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e400) == 0xde04000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.H,<Vt2>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfe0e400 = 0xde04000";
            stmt.arg1 = decodeLd2Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 1100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xde0c000) {
            if (verbose) {
                System.out.println("   trying LD2R { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2R";
            stmt.key = "opcode & 0xbfe0f000 = 0xde0c000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 110xxxxx 0100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xcc04000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfe0f000 = 0xcc04000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 011xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e400) == 0xdc06000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.H,<Vt2>.H,<Vt3>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfe0e400 = 0xdc06000";
            stmt.arg1 = decodeLd3Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 1110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xdc0e000) {
            if (verbose) {
                System.out.println("   trying LD3R { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3R";
            stmt.key = "opcode & 0xbfe0f000 = 0xdc0e000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 110xxxxx 0000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xcc00000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfe0f000 = 0xcc00000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 011xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e400) == 0xde06000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.H,<Vt2>.H,<Vt3>.H,<Vt4>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfe0e400 = 0xde06000";
            stmt.arg1 = decodeLd4Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 1110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xde0e000) {
            if (verbose) {
                System.out.println("   trying LD4R { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4R";
            stmt.key = "opcode & 0xbfe0f000 = 0xde0e000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe209400) {
            if (verbose) {
                System.out.println("   trying MLA <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MLA";
            stmt.key = "opcode & 0xbf20fc00 = 0xe209400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e209400) {
            if (verbose) {
                System.out.println("   trying MLS <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MLS";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e209400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10110010 0xxxxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xff8003e0) == 0xb20003e0) {
            if (verbose) {
                System.out.println("   trying MOV <Xd|SP>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOV";
            stmt.key = "opcode & 0xff8003e0 = 0xb20003e0";
            stmt.arg1 = getRegisterName("X", Rd, true, -1);
            stmt.arg2 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 100111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe209c00) {
            if (verbose) {
                System.out.println("   trying MUL <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MUL";
            stmt.key = "opcode & 0xbf20fc00 = 0xe209c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101010 xx1xxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xff2003e0) == 0x2a2003e0) {
            if (verbose) {
                System.out.println("   trying MVN <Wd>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MVN";
            stmt.key = "opcode & 0xff2003e0 = 0x2a2003e0";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101010 xx1xxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xff2003e0) == 0xaa2003e0) {
            if (verbose) {
                System.out.println("   trying MVN <Xd>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MVN";
            stmt.key = "opcode & 0xff2003e0 = 0xaa2003e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001011 xx0xxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xff2003e0) == 0x4b0003e0) {
            if (verbose) {
                System.out.println("   trying NEG <Wd>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "NEG";
            stmt.key = "opcode & 0xff2003e0 = 0x4b0003e0";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = decodeShiftedRegister("W", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001011 xx0xxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xff2003e0) == 0xcb0003e0) {
            if (verbose) {
                System.out.println("   trying NEG <Xd>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "NEG";
            stmt.key = "opcode & 0xff2003e0 = 0xcb0003e0";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = decodeShiftedRegister("X", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101011 xx0xxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xff2003e0) == 0x6b0003e0) {
            if (verbose) {
                System.out.println("   trying NEGS <Wd>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "NEGS";
                stmt.key = "opcode & 0xff2003e0 = 0x6b0003e0";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeShiftedRegister("W", Rm, shift, imm6, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11101011 xx0xxxxx xxxxxx11 111xxxxx
        if ((opcode32Bit & 0xff2003e0) == 0xeb0003e0) {
            if (verbose) {
                System.out.println("   trying NEGS <Xd>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "NEGS";
                stmt.key = "opcode & 0xff2003e0 = 0xeb0003e0";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeShiftedRegister("X", Rm, shift, imm6, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101110 xx1xxxxx 100111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e209c00) {
            if (verbose) {
                System.out.println("   trying PMUL <Vd>.<T-siq7>,<Vn>.<T-siq7>,<Vm>.<T-siq7>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PMUL";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e209c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "__rrrrrr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "__rrrrrr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "__rrrrrr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 111000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20e000) {
            if (verbose) {
                System.out.println("   trying PMULL{2} <Vd>.<T-si2>,<Vn>.<T-siq2>,<Vm>.<T-siq2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PMULL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe20e000";
            stmt.arg1 = decodeVectorReg_size2(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "__rrrr__");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "__rrrr__");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 010000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e204000) {
            if (verbose) {
                System.out.println("   trying RADDHN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>,<Vm>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RADDHN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e204000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_size1(size, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf008c00) {
            if (verbose) {
                System.out.println("   trying RSHRN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RSHRN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0xf008c00";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e206000) {
            if (verbose) {
                System.out.println("   trying RSUBHN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>,<Vm>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "RSUBHN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e206000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_size1(size, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe207c00) {
            if (verbose) {
                System.out.println("   trying SABA <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SABA";
            stmt.key = "opcode & 0xbf20fc00 = 0xe207c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe205000) {
            if (verbose) {
                System.out.println("   trying SABAL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SABAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe205000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 011101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe207400) {
            if (verbose) {
                System.out.println("   trying SABD <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SABD";
            stmt.key = "opcode & 0xbf20fc00 = 0xe207400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe207000) {
            if (verbose) {
                System.out.println("   trying SABDL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SABDL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe207000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe200000) {
            if (verbose) {
                System.out.println("   trying SADDL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SADDL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe200000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe201000) {
            if (verbose) {
                System.out.println("   trying SADDW{2} <Vd>.<T-si1>,<Vn>.<T-si1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SADDW" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe201000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf00e400) {
            if (verbose) {
                System.out.println("   trying SCVTF <Vd>.<T>,<Vn>.<T>,#<fbits2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SCVTF";
            stmt.key = "opcode & 0xbf80fc00 = 0xf00e400";
            stmt.arg1 = decodeVectorReg9(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg9(immh, Q, Rn);
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 10xxxxxx 1110x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc0f400) == 0xf80e000) {
            if (verbose) {
                System.out.println("   trying SDOT <Vd>.<T-s>,<Vn>.<T-b>,<Vm>.4B[<index>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SDOT";
            stmt.key = "opcode & 0xbfc0f400 = 0xf80e000";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex11(Rm, M, H, L);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe200400) {
            if (verbose) {
                System.out.println("   trying SHADD <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHADD";
            stmt.key = "opcode & 0xbf20fc00 = 0xe200400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf005400) {
            if (verbose) {
                System.out.println("   trying SHL <Vd>.<T11>,<Vn>.<T11>,#<shift-hb3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHL";
            stmt.key = "opcode & 0xbf80fc00 = 0xf005400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf008400) {
            if (verbose) {
                System.out.println("   trying SHRN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHRN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0xf008400";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe202400) {
            if (verbose) {
                System.out.println("   trying SHSUB <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SHSUB";
            stmt.key = "opcode & 0xbf20fc00 = 0xe202400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f005400) {
            if (verbose) {
                System.out.println("   trying SLI <Vd>.<T11>,<Vn>.<T11>,#<shift-hb3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SLI";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f005400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 011001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe206400) {
            if (verbose) {
                System.out.println("   trying SMAX <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMAX";
            stmt.key = "opcode & 0xbf20fc00 = 0xe206400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20a400) {
            if (verbose) {
                System.out.println("   trying SMAXP <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMAXP";
            stmt.key = "opcode & 0xbf20fc00 = 0xe20a400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 011011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe206c00) {
            if (verbose) {
                System.out.println("   trying SMIN <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMIN";
            stmt.key = "opcode & 0xbf20fc00 = 0xe206c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 101011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20ac00) {
            if (verbose) {
                System.out.println("   trying SMINP <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMINP";
            stmt.key = "opcode & 0xbf20fc00 = 0xe20ac00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe208000) {
            if (verbose) {
                System.out.println("   trying SMLAL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMLAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe208000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 101000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20a000) {
            if (verbose) {
                System.out.println("   trying SMLSL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMLSL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe20a000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 110000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20c000) {
            if (verbose) {
                System.out.println("   trying SMULL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMULL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe20c000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe200c00) {
            if (verbose) {
                System.out.println("   trying SQADD <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQADD";
            stmt.key = "opcode & 0xbf20fc00 = 0xe200c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 100100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe209000) {
            if (verbose) {
                System.out.println("   trying SQDMLAL{2} <Vd>.<T-si3>,<Vn>.<T-siq3>,<Vm>.<T-siq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe209000";
            stmt.arg1 = decodeVectorReg_size3(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 101100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20b000) {
            if (verbose) {
                System.out.println("   trying SQDMLSL{2} <Vd>.<T-si3>,<Vn>.<T-siq3>,<Vm>.<T-siq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLSL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe20b000";
            stmt.arg1 = decodeVectorReg_size3(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 101101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20b400) {
            if (verbose) {
                System.out.println("   trying SQDMULH <Vd>.<T-siq3>,<Vn>.<T-siq3>,<Vm>.<T-siq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULH";
            stmt.key = "opcode & 0xbf20fc00 = 0xe20b400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr____rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 110100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe20d000) {
            if (verbose) {
                System.out.println("   trying SQDMULL{2} <Vd>.<T-si3>,<Vn>.<T-siq3>,<Vm>.<T-siq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe20d000";
            stmt.arg1 = decodeVectorReg_size3(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx0xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e008400) {
            if (verbose) {
                System.out.println("   trying SQRDMLAH <Vd>.<T-siq3>,<Vn>.<T-siq3>,<Vm>.<T-siq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLAH";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e008400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr____rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx0xxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e008c00) {
            if (verbose) {
                System.out.println("   trying SQRDMLSH <Vd>.<T-siq3>,<Vn>.<T-siq3>,<Vm>.<T-siq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLSH";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e008c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr____rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 101101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e20b400) {
            if (verbose) {
                System.out.println("   trying SQRDMULH <Vd>.<T-siq3>,<Vn>.<T-siq3>,<Vm>.<T-siq3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMULH";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e20b400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr____rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 010111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe205c00) {
            if (verbose) {
                System.out.println("   trying SQRSHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRSHL";
            stmt.key = "opcode & 0xbf20fc00 = 0xe205c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 100111xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf009c00) {
            if (verbose) {
                System.out.println("   trying SQRSHRN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRSHRN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0xf009c00";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 100011xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f008c00) {
            if (verbose) {
                System.out.println("   trying SQRSHRUN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRSHRUN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0x2f008c00";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 011101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf007400) {
            if (verbose) {
                System.out.println("   trying SQSHL <Vd>.<T11>,<Vn>.<T11>,#<shift-hb3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHL";
            stmt.key = "opcode & 0xbf80fc00 = 0xf007400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 010011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe204c00) {
            if (verbose) {
                System.out.println("   trying SQSHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHL";
            stmt.key = "opcode & 0xbf20fc00 = 0xe204c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 011001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f006400) {
            if (verbose) {
                System.out.println("   trying SQSHLU <Vd>.<T11>,<Vn>.<T11>,#<shift-hb3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHLU";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f006400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf009400) {
            if (verbose) {
                System.out.println("   trying SQSHRN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHRN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0xf009400";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f008400) {
            if (verbose) {
                System.out.println("   trying SQSHRUN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSHRUN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0x2f008400";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe202c00) {
            if (verbose) {
                System.out.println("   trying SQSUB <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQSUB";
            stmt.key = "opcode & 0xbf20fc00 = 0xe202c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe201400) {
            if (verbose) {
                System.out.println("   trying SRHADD <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRHADD";
            stmt.key = "opcode & 0xbf20fc00 = 0xe201400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 010001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f004400) {
            if (verbose) {
                System.out.println("   trying SRI <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRI";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f004400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe205400) {
            if (verbose) {
                System.out.println("   trying SRSHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRSHL";
            stmt.key = "opcode & 0xbf20fc00 = 0xe205400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf002400) {
            if (verbose) {
                System.out.println("   trying SRSHR <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRSHR";
            stmt.key = "opcode & 0xbf80fc00 = 0xf002400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf003400) {
            if (verbose) {
                System.out.println("   trying SRSRA <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SRSRA";
            stmt.key = "opcode & 0xbf80fc00 = 0xf003400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 010001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe204400) {
            if (verbose) {
                System.out.println("   trying SSHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSHL";
            stmt.key = "opcode & 0xbf20fc00 = 0xe204400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf00a400) {
            if (verbose) {
                System.out.println("   trying SSHLL{2} <Vd>.<T-cu1>,<Vn>.<T10>,#<shift-hb6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(immb == 0 && bitCount(immh) == 1))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SSHLL" + (Q==0?"":"2");
                stmt.key = "opcode & 0xbf80fc00 = 0xf00a400";
                stmt.arg1 = decodeVectorReg10(immh, Rd);
                stmt.arg2 = decodeVectorReg11(immh, Q, Rn);
                stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x001111 0xxxxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf000400) {
            if (verbose) {
                System.out.println("   trying SSHR <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSHR";
            stmt.key = "opcode & 0xbf80fc00 = 0xf000400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 0xxxxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0xf001400) {
            if (verbose) {
                System.out.println("   trying SSRA <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSRA";
            stmt.key = "opcode & 0xbf80fc00 = 0xf001400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe202000) {
            if (verbose) {
                System.out.println("   trying SSUBL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSUBL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe202000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe203000) {
            if (verbose) {
                System.out.println("   trying SSUBW{2} <Vd>.<T-si1>,<Vn>.<T-si1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SSUBW" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe203000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 100xxxxx 0111xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xc807000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0f000 = 0xc807000";
            final int numRegs = 1;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 100xxxxx 1010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xc80a000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0f000 = 0xc80a000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 100xxxxx 0110xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xc806000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0f000 = 0xc806000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 100xxxxx 0010xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xc802000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 12, 4);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0f000 = 0xc802000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, true);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e400) == 0xd804000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0e400 = 0xd804000";
            stmt.arg1 = decodeLd1Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 100xxxxx 1000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xc808000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.<T>,<Vt2>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfe0f000 = 0xc808000";
            final int numRegs = 2;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 010xx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e400) == 0xda04000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.H,<Vt2>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfe0e400 = 0xda04000";
            stmt.arg1 = decodeLd2Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 100xxxxx 0100xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xc804000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfe0f000 = 0xc804000";
            final int numRegs = 3;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 10xx00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0cc00) == 0xd808000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.S,<Vt2>.S,<Vt3>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfe0cc00 = 0xd808000";
            stmt.arg1 = decodeLd3Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001100 100xxxxx 0000xxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0f000) == 0xc800000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.<T>,<Vt2>.<T>,<Vt3>.<T>,<Vt4>.<T> },[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfe0f000 = 0xc800000";
            final int numRegs = 4;
            stmt.arg1 = decodeLd1(Q, size, Rt, numRegs, false);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 10xx00xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0cc00) == 0xda08000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.S,<Vt2>.S,<Vt3>.S,<Vt4>.S }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfe0cc00 = 0xda08000";
            stmt.arg1 = decodeLd4Index("S", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 100001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e208400) {
            if (verbose) {
                System.out.println("   trying SUB <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e208400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx1xxxxx 011000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe206000) {
            if (verbose) {
                System.out.println("   trying SUBHN{2} <Vd>.<T-siq1>,<Vn>.<T-si1>,<Vm>.<T-si1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUBHN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0xe206000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_size1(size, Rm);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx0xxxxx 001010xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe002800) {
            if (verbose) {
                System.out.println("   trying TRN1 <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TRN1";
            stmt.key = "opcode & 0xbf20fc00 = 0xe002800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx0xxxxx 011010xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe006800) {
            if (verbose) {
                System.out.println("   trying TRN2 <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TRN2";
            stmt.key = "opcode & 0xbf20fc00 = 0xe006800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101010 xx0xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff20001f) == 0x6a00001f) {
            if (verbose) {
                System.out.println("   trying TST <Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TST";
            stmt.key = "opcode & 0xff20001f = 0x6a00001f";
            stmt.arg1 = getRegisterName("W", Rn, false, -1);
            stmt.arg2 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11110010 0xxxxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff80001f) == 0xf200001f) {
            if (verbose) {
                System.out.println("   trying TST <Xn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TST";
            stmt.key = "opcode & 0xff80001f = 0xf200001f";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11101010 xx0xxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff20001f) == 0xea00001f) {
            if (verbose) {
                System.out.println("   trying TST <Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TST";
            stmt.key = "opcode & 0xff20001f = 0xea00001f";
            stmt.arg1 = getRegisterName("X", Rn, false, -1);
            stmt.arg2 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 011111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e207c00) {
            if (verbose) {
                System.out.println("   trying UABA <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UABA";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e207c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 010100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e205000) {
            if (verbose) {
                System.out.println("   trying UABAL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UABAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e205000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 011101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e207400) {
            if (verbose) {
                System.out.println("   trying UABD <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UABD";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e207400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 011100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e207000) {
            if (verbose) {
                System.out.println("   trying UABDL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UABDL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e207000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 000000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e200000) {
            if (verbose) {
                System.out.println("   trying UADDL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UADDL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e200000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 000100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e201000) {
            if (verbose) {
                System.out.println("   trying UADDW{2} <Vd>.<T-si1>,<Vn>.<T-si1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UADDW" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e201000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 111001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f00e400) {
            if (verbose) {
                System.out.println("   trying UCVTF <Vd>.<T>,<Vn>.<T>,#<fbits2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UCVTF";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f00e400";
            stmt.arg1 = decodeVectorReg9(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg9(immh, Q, Rn);
            stmt.arg3 = decodeFbits2(immh, immb);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 10xxxxxx 1110x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc0f400) == 0x2f80e000) {
            if (verbose) {
                System.out.println("   trying UDOT <Vd>.<T-s>,<Vn>.<T-b>,<Vm>.4B[<index>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UDOT";
            stmt.key = "opcode & 0xbfc0f400 = 0x2f80e000";
            stmt.arg1 = decodeVectorRegSWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex11(Rm, M, H, L);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e200400) {
            if (verbose) {
                System.out.println("   trying UHADD <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UHADD";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e200400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e202400) {
            if (verbose) {
                System.out.println("   trying UHSUB <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UHSUB";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e202400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 011001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e206400) {
            if (verbose) {
                System.out.println("   trying UMAX <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMAX";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e206400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e20a400) {
            if (verbose) {
                System.out.println("   trying UMAXP <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMAXP";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e20a400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 011011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e206c00) {
            if (verbose) {
                System.out.println("   trying UMIN <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMIN";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e206c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 101011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e20ac00) {
            if (verbose) {
                System.out.println("   trying UMINP <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMINP";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e20ac00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 100000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e208000) {
            if (verbose) {
                System.out.println("   trying UMLAL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMLAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e208000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 101000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e20a000) {
            if (verbose) {
                System.out.println("   trying UMLSL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMLSL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e20a000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 110000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e20c000) {
            if (verbose) {
                System.out.println("   trying UMULL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMULL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e20c000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 000011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e200c00) {
            if (verbose) {
                System.out.println("   trying UQADD <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQADD";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e200c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 010111xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e205c00) {
            if (verbose) {
                System.out.println("   trying UQRSHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQRSHL";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e205c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 100111xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f009c00) {
            if (verbose) {
                System.out.println("   trying UQRSHRN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQRSHRN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0x2f009c00";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 011101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f007400) {
            if (verbose) {
                System.out.println("   trying UQSHL <Vd>.<T11>,<Vn>.<T11>,#<shift-hb3>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSHL";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f007400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 010011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e204c00) {
            if (verbose) {
                System.out.println("   trying UQSHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSHL";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e204c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 100101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f009400) {
            if (verbose) {
                System.out.println("   trying UQSHRN{2} <Vd>.<T10>,<Vn>.<T-cu1>,#<shift>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSHRN" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf80fc00 = 0x2f009400";
            stmt.arg1 = decodeVectorReg11(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg10(immh, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 001011xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e202c00) {
            if (verbose) {
                System.out.println("   trying UQSUB <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UQSUB";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e202c00";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e201400) {
            if (verbose) {
                System.out.println("   trying URHADD <Vd>.<T-siq1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URHADD";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e201400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______rr");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 010101xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e205400) {
            if (verbose) {
                System.out.println("   trying URSHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URSHL";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e205400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 001001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f002400) {
            if (verbose) {
                System.out.println("   trying URSHR <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URSHR";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f002400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 001101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f003400) {
            if (verbose) {
                System.out.println("   trying URSRA <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "URSRA";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f003400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 010001xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e204400) {
            if (verbose) {
                System.out.println("   trying USHL <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USHL";
            stmt.key = "opcode & 0xbf20fc00 = 0x2e204400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 101001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f00a400) {
            if (verbose) {
                System.out.println("   trying USHLL{2} <Vd>.<T-cu1>,<Vn>.<T10>,#<shift-hb6>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(bitCount(immh) == 1 && immb == 0))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "USHLL" + (Q==0?"":"2");
                stmt.key = "opcode & 0xbf80fc00 = 0x2f00a400";
                stmt.arg1 = decodeVectorReg10(immh, Rd);
                stmt.arg2 = decodeVectorReg11(immh, Q, Rn);
                stmt.arg3 = decodeShift_immMinusConst(immh, immb, true, true, true, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101111 0xxxxxxx 000001xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f000400) {
            if (verbose) {
                System.out.println("   trying USHR <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USHR";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f000400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 0xxxxxxx 000101xx xxxxxxxx
        if ((opcode32Bit & 0xbf80fc00) == 0x2f001400) {
            if (verbose) {
                System.out.println("   trying USRA <Vd>.<T11>,<Vn>.<T11>,#<shift-hb5>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int immh = getPart(opcode32Bit, 19, 4);
            final int immb = getPart(opcode32Bit, 16, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USRA";
            stmt.key = "opcode & 0xbf80fc00 = 0x2f001400";
            stmt.arg1 = decodeVectorReg12(immh, Q, Rd);
            stmt.arg2 = decodeVectorReg12(immh, Q, Rn);
            stmt.arg3 = decodeShift_constMinusImm(immh, immb, true, true, true, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 001000xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e202000) {
            if (verbose) {
                System.out.println("   trying USUBL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USUBL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e202000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 xx1xxxxx 001100xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0x2e203000) {
            if (verbose) {
                System.out.println("   trying USUBW{2} <Vd>.<T-si1>,<Vn>.<T-si1>,<Vm>.<T-siq1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "USUBW" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf20fc00 = 0x2e203000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_size1(size, Rn);
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______rr");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx0xxxxx 000110xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe001800) {
            if (verbose) {
                System.out.println("   trying UZP1 <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UZP1";
            stmt.key = "opcode & 0xbf20fc00 = 0xe001800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx0xxxxx 010110xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe005800) {
            if (verbose) {
                System.out.println("   trying UZP2 <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UZP2";
            stmt.key = "opcode & 0xbf20fc00 = 0xe005800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx0xxxxx 001110xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe003800) {
            if (verbose) {
                System.out.println("   trying ZIP1 <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ZIP1";
            stmt.key = "opcode & 0xbf20fc00 = 0xe003800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001110 xx0xxxxx 011110xx xxxxxxxx
        if ((opcode32Bit & 0xbf20fc00) == 0xe007800) {
            if (verbose) {
                System.out.println("   trying ZIP2 <Vd>.<T>,<Vn>.<T>,<Vm>.<T>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ZIP2";
            stmt.key = "opcode & 0xbf20fc00 = 0xe007800";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "______r_");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith13BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 00011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x1a800400) {
            if (verbose) {
                System.out.println("   trying CINC <Wd>,<Wn>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CINC";
                stmt.key = "opcode & 0xffe00c00 = 0x1a800400";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x9a800400) {
            if (verbose) {
                System.out.println("   trying CINC <Xd>,<Xn>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CINC";
                stmt.key = "opcode & 0xffe00c00 = 0x9a800400";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01011010 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x5a800000) {
            if (verbose) {
                System.out.println("   trying CINV <Wd>,<Wn>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CINV";
                stmt.key = "opcode & 0xffe00c00 = 0x5a800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11011010 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xda800000) {
            if (verbose) {
                System.out.println("   trying CINV <Xd>,<Xn>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CINV";
                stmt.key = "opcode & 0xffe00c00 = 0xda800000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00110001 xxxxxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff00001f) == 0x3100001f) {
            if (verbose) {
                System.out.println("   trying CMN <Wn|WSP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMN";
            stmt.key = "opcode & 0xff00001f = 0x3100001f";
            stmt.arg1 = getRegisterName("W", Rn, true, -1);
            stmt.arg2 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10110001 xxxxxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff00001f) == 0xb100001f) {
            if (verbose) {
                System.out.println("   trying CMN <Xn|SP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMN";
            stmt.key = "opcode & 0xff00001f = 0xb100001f";
            stmt.arg1 = getRegisterName("X", Rn, true, -1);
            stmt.arg2 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01110001 xxxxxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff00001f) == 0x7100001f) {
            if (verbose) {
                System.out.println("   trying CMP <Wn|WSP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMP";
            stmt.key = "opcode & 0xff00001f = 0x7100001f";
            stmt.arg1 = getRegisterName("W", Rn, true, -1);
            stmt.arg2 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11110001 xxxxxxxx xxxxxxxx xxx11111
        if ((opcode32Bit & 0xff00001f) == 0xf100001f) {
            if (verbose) {
                System.out.println("   trying CMP <Xn|SP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CMP";
            stmt.key = "opcode & 0xff00001f = 0xf100001f";
            stmt.arg1 = getRegisterName("X", Rn, true, -1);
            stmt.arg2 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x5a800400) {
            if (verbose) {
                System.out.println("   trying CNEG <Wd>,<Wn>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (((cond & 0b1110) != 0b1110  && Rn == Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CNEG";
                stmt.key = "opcode & 0xffe00c00 = 0x5a800400";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xda800400) {
            if (verbose) {
                System.out.println("   trying CNEG <Xd>,<Xn>,<cond2>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (((cond & 0b1110) != 0b1110  && Rn == Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CNEG";
                stmt.key = "opcode & 0xffe00c00 = 0xda800400";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeBranchCondition(cond ^ 1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011010 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x1a800000) {
            if (verbose) {
                System.out.println("   trying CSEL <Wd>,<Wn>,<Wm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CSEL";
            stmt.key = "opcode & 0xffe00c00 = 0x1a800000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011010 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x9a800000) {
            if (verbose) {
                System.out.println("   trying CSEL <Xd>,<Xn>,<Xm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CSEL";
            stmt.key = "opcode & 0xffe00c00 = 0x9a800000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x1a800400) {
            if (verbose) {
                System.out.println("   trying CSINC <Wd>,<Wn>,<Wm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) && (!(Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSINC";
                stmt.key = "opcode & 0xffe00c00 = 0x1a800400";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = getRegisterName("W", Rm, false, -1);
                stmt.arg4 = decodeBranchCondition(cond);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x9a800400) {
            if (verbose) {
                System.out.println("   trying CSINC <Xd>,<Xn>,<Xm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) && (!(Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSINC";
                stmt.key = "opcode & 0xffe00c00 = 0x9a800400";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = getRegisterName("X", Rm, false, -1);
                stmt.arg4 = decodeBranchCondition(cond);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01011010 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x5a800000) {
            if (verbose) {
                System.out.println("   trying CSINV <Wd>,<Wn>,<Wm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) && (!(Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSINV";
                stmt.key = "opcode & 0xffe00c00 = 0x5a800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = getRegisterName("W", Rm, false, -1);
                stmt.arg4 = decodeBranchCondition(cond);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11011010 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xda800000) {
            if (verbose) {
                System.out.println("   trying CSINV <Xd>,<Xn>,<Xm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == Rm && Rm != 31 && Rn != 31 && ((cond >> 1) & 7) != 7)) && (!(Rm == 31 && Rn == 31 && ((cond >> 1) & 7) != 7))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSINV";
                stmt.key = "opcode & 0xffe00c00 = 0xda800000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = getRegisterName("X", Rm, false, -1);
                stmt.arg4 = decodeBranchCondition(cond);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x5a800400) {
            if (verbose) {
                System.out.println("   trying CSNEG <Wd>,<Wn>,<Wm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!((cond & 0b1110) != 0b1110  && Rn == Rm))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSNEG";
                stmt.key = "opcode & 0xffe00c00 = 0x5a800400";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = getRegisterName("W", Rm, false, -1);
                stmt.arg4 = decodeBranchCondition(cond);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11011010 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xda800400) {
            if (verbose) {
                System.out.println("   trying CSNEG <Xd>,<Xn>,<Xm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!((cond & 0b1110) != 0b1110  && Rn == Rm))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "CSNEG";
                stmt.key = "opcode & 0xffe00c00 = 0xda800400";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = getRegisterName("X", Rm, false, -1);
                stmt.arg4 = decodeBranchCondition(cond);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101110 xx0xxxxx 111x01xx xxxxxxxx
        if ((opcode32Bit & 0xbf20ec00) == 0x2e00e400) {
            if (verbose) {
                System.out.println("   trying FCADD <Vd>.<T-siq4>,<Vn>.<T-siq4>,<Vm>.<T-siq4>,#<rotate1>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int rot = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCADD";
            stmt.key = "opcode & 0xbf20ec00 = 0x2e00e400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr____r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____r_");
            stmt.arg4 = formatDecimalImm(rot==0?90:270);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 011xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x1e600c00) {
            if (verbose) {
                System.out.println("   trying FCSEL <Dd>,<Dn>,<Dm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCSEL";
            stmt.key = "opcode & 0xffe00c00 = 0x1e600c00";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 111xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x1ee00c00) {
            if (verbose) {
                System.out.println("   trying FCSEL <Hd>,<Hn>,<Hm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCSEL";
            stmt.key = "opcode & 0xffe00c00 = 0x1ee00c00";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011110 001xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x1e200c00) {
            if (verbose) {
                System.out.println("   trying FCSEL <Sd>,<Sn>,<Sm>,<cond>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int cond = getPart(opcode32Bit, 12, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCSEL";
            stmt.key = "opcode & 0xffe00c00 = 0x1e200c00";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            stmt.arg4 = decodeBranchCondition(cond);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 1xxxxxxx 0001x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf80f400) == 0xf801000) {
            if (verbose) {
                System.out.println("   trying FMLA <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLA";
            stmt.key = "opcode & 0xbf80f400 = 0xf801000";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 1xxxxxxx 0101x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf80f400) == 0xf805000) {
            if (verbose) {
                System.out.println("   trying FMLS <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMLS";
            stmt.key = "opcode & 0xbf80f400 = 0xf805000";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 1xxxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf80f400) == 0xf809000) {
            if (verbose) {
                System.out.println("   trying FMUL <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMUL";
            stmt.key = "opcode & 0xbf80f400 = 0xf809000";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 1xxxxxxx 1001x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf80f400) == 0x2f809000) {
            if (verbose) {
                System.out.println("   trying FMULX <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-sz1>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int sz = getPart(opcode32Bit, 22, 1);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMULX";
            stmt.key = "opcode & 0xbf80f400 = 0x2f809000";
            stmt.arg1 = decodeVectorReg6(sz, Q, Rd);
            stmt.arg2 = decodeVectorReg6(sz, Q, Rn);
            stmt.arg3 = decodeVectorRegWithIndex_szHml1(Rm, sz, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e000) == 0xdc00000) {
            if (verbose) {
                System.out.println("   trying LD1 { <Vt>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD1";
            stmt.key = "opcode & 0xbfe0e000 = 0xdc00000";
            stmt.arg1 = decodeLd1Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e000) == 0xde00000) {
            if (verbose) {
                System.out.println("   trying LD2 { <Vt>.B,<Vt2>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD2";
            stmt.key = "opcode & 0xbfe0e000 = 0xde00000";
            stmt.arg1 = decodeLd2Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 110xxxxx 001xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e000) == 0xdc02000) {
            if (verbose) {
                System.out.println("   trying LD3 { <Vt>.B,<Vt2>.B,<Vt3>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD3";
            stmt.key = "opcode & 0xbfe0e000 = 0xdc02000";
            stmt.arg1 = decodeLd3Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 111xxxxx 001xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e000) == 0xde02000) {
            if (verbose) {
                System.out.println("   trying LD4 { <Vt>.B,<Vt2>.B,<Vt3>.B,<Vt4>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LD4";
            stmt.key = "opcode & 0xbfe0e000 = 0xde02000";
            stmt.arg1 = decodeLd4Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c400c00) {
            if (verbose) {
                System.out.println("   trying LDR <Bt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c400c00";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c600800) {
            if (verbose) {
                System.out.println("   trying LDR <Bt>,[<Xn|SP>,(<Wm>|<Xm>),<extend> {<amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c600800";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c400400) {
            if (verbose) {
                System.out.println("   trying LDR <Bt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c400400";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xfc400c00) {
            if (verbose) {
                System.out.println("   trying LDR <Dt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0xfc400c00";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xfc600800) {
            if (verbose) {
                System.out.println("   trying LDR <Dt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0xfc600800";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xfc400400) {
            if (verbose) {
                System.out.println("   trying LDR <Dt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0xfc400400";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x7c400c00) {
            if (verbose) {
                System.out.println("   trying LDR <Ht>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x7c400c00";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x7c600800) {
            if (verbose) {
                System.out.println("   trying LDR <Ht>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x7c600800";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x7c400400) {
            if (verbose) {
                System.out.println("   trying LDR <Ht>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x7c400400";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 110xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3cc00c00) {
            if (verbose) {
                System.out.println("   trying LDR <Qt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x3cc00c00";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 111xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3ce00800) {
            if (verbose) {
                System.out.println("   trying LDR <Qt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x3ce00800";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 110xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3cc00400) {
            if (verbose) {
                System.out.println("   trying LDR <Qt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0x3cc00400";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xbc400c00) {
            if (verbose) {
                System.out.println("   trying LDR <St>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0xbc400c00";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xbc600800) {
            if (verbose) {
                System.out.println("   trying LDR <St>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0xbc600800";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xbc400400) {
            if (verbose) {
                System.out.println("   trying LDR <St>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffe00c00 = 0xbc400400";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38400c00) {
            if (verbose) {
                System.out.println("   trying LDRB <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38400c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38600800) {
            if (verbose) {
                System.out.println("   trying LDRB <Wt>,[<Xn|SP>,(<Wm>|<Xm>),<extend> {<amount>}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38600800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38400400) {
            if (verbose) {
                System.out.println("   trying LDRB <Wt>,[<Xn|SP>],#<simm>");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38400400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78400c00) {
            if (verbose) {
                System.out.println("   trying LDRH <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78400c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78600800) {
            if (verbose) {
                System.out.println("   trying LDRH <Wt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78600800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78400400) {
            if (verbose) {
                System.out.println("   trying LDRH <Wt>,[<Xn|SP>],#<simm>");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78400400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111000 100xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xb8800c00) {
            if (verbose) {
                System.out.println("   trying LDRSW <Xt>,[<Xn|SP>,#<simm>]!");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSW";
            stmt.key = "opcode & 0xffe00c00 = 0xb8800c00";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111000 101xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xb8a00800) {
            if (verbose) {
                System.out.println("   trying LDRSW <Xt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSW";
            stmt.key = "opcode & 0xffe00c00 = 0xb8a00800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111000 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xb8800400) {
            if (verbose) {
                System.out.println("   trying LDRSW <Xt>,[<Xn|SP>],#<simm>");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSW";
            stmt.key = "opcode & 0xffe00c00 = 0xb8800400";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 010xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38400800) {
            if (verbose) {
                System.out.println("   trying LDTRB <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38400800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 010xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78400800) {
            if (verbose) {
                System.out.println("   trying LDTRH <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78400800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111000 100xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xb8800800) {
            if (verbose) {
                System.out.println("   trying LDTRSW <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTRSW";
            stmt.key = "opcode & 0xffe00c00 = 0xb8800800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c400000) {
            if (verbose) {
                System.out.println("   trying LDUR <Bt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c400000";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xfc400000) {
            if (verbose) {
                System.out.println("   trying LDUR <Dt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUR";
            stmt.key = "opcode & 0xffe00c00 = 0xfc400000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x7c400000) {
            if (verbose) {
                System.out.println("   trying LDUR <Ht>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUR";
            stmt.key = "opcode & 0xffe00c00 = 0x7c400000";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 110xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3cc00000) {
            if (verbose) {
                System.out.println("   trying LDUR <Qt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUR";
            stmt.key = "opcode & 0xffe00c00 = 0x3cc00000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xbc400000) {
            if (verbose) {
                System.out.println("   trying LDUR <St>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUR";
            stmt.key = "opcode & 0xffe00c00 = 0xbc400000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38400000) {
            if (verbose) {
                System.out.println("   trying LDURB <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDURB";
            stmt.key = "opcode & 0xffe00c00 = 0x38400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78400000) {
            if (verbose) {
                System.out.println("   trying LDURH <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDURH";
            stmt.key = "opcode & 0xffe00c00 = 0x78400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111000 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xb8800000) {
            if (verbose) {
                System.out.println("   trying LDURSW <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDURSW";
            stmt.key = "opcode & 0xffe00c00 = 0xb8800000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101110 000xxxxx 0xxxx1xx xxxxxxxx
        if ((opcode32Bit & 0xffe08400) == 0x6e000400) {
            if (verbose) {
                System.out.println("   trying MOV <Vd>.<Ts>[<index>],<Vn>.<Ts>[<index2>]");
            }
            final int imm5 = getPart(opcode32Bit, 16, 5);
            final int imm4 = getPart(opcode32Bit, 11, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOV";
            stmt.key = "opcode & 0xffe08400 = 0x6e000400";
            stmt.arg1 = decodeVectorRegWithIndex1(Rd, imm5, true, true, true, true);
            stmt.arg2 = decodeVectorRegWithIndex10(Rn, imm5, imm4);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111000 101xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xf8a00800) {
            if (verbose) {
                System.out.println("   trying PRFM (<prfop>|#<imm5>),[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PRFM";
            stmt.key = "opcode & 0xffe00c00 = 0xf8a00800";
            stmt.arg1 = decodePrefetchOp(Rt);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111000 100xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xf8800000) {
            if (verbose) {
                System.out.println("   trying PRFUM (<prfop>|#<imm5>),[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PRFUM";
            stmt.key = "opcode & 0xffe00c00 = 0xf8800000";
            stmt.arg1 = decodePrefetchOp(Rt);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 xxxxxxxx 0011x0xx xxxxxxxx
        if ((opcode32Bit & 0xff00f400) == 0x5f003000) {
            if (verbose) {
                System.out.println("   trying SQDMLAL <V-si2><d>,<V-si3><n>,<Vm>.<Ts>[<index-si2>]");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLAL";
            stmt.key = "opcode & 0xff00f400 = 0x5f003000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "S", "D", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 xxxxxxxx 0111x0xx xxxxxxxx
        if ((opcode32Bit & 0xff00f400) == 0x5f007000) {
            if (verbose) {
                System.out.println("   trying SQDMLSL <V-si2><d>,<V-si3><n>,<Vm>.<Ts>[<index-si2>]");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLSL";
            stmt.key = "opcode & 0xff00f400 = 0x5f007000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "S", "D", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 xxxxxxxx 1100x0xx xxxxxxxx
        if ((opcode32Bit & 0xff00f400) == 0x5f00c000) {
            if (verbose) {
                System.out.println("   trying SQDMULH <V-si3><d>,<V-si3><n>,<Vm>.<Ts>[<index-si2>]");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULH";
            stmt.key = "opcode & 0xff00f400 = 0x5f00c000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 xxxxxxxx 1011x0xx xxxxxxxx
        if ((opcode32Bit & 0xff00f400) == 0x5f00b000) {
            if (verbose) {
                System.out.println("   trying SQDMULL <V-si2><d>,<V-si3><n>,<Vm>.<Ts>[<index-si2>]");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULL";
            stmt.key = "opcode & 0xff00f400 = 0x5f00b000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "S", "D", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 xxxxxxxx 1101x0xx xxxxxxxx
        if ((opcode32Bit & 0xff00f400) == 0x7f00d000) {
            if (verbose) {
                System.out.println("   trying SQRDMLAH <V-si3><d>,<V-si3><n>,<Vm>.<Ts>[<index-si2>]");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLAH";
            stmt.key = "opcode & 0xff00f400 = 0x7f00d000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111111 xxxxxxxx 1111x0xx xxxxxxxx
        if ((opcode32Bit & 0xff00f400) == 0x7f00f000) {
            if (verbose) {
                System.out.println("   trying SQRDMLSH <V-si3><d>,<V-si3><n>,<Vm>.<Ts>[<index-si2>]");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLSH";
            stmt.key = "opcode & 0xff00f400 = 0x7f00f000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011111 xxxxxxxx 1101x0xx xxxxxxxx
        if ((opcode32Bit & 0xff00f400) == 0x5f00d000) {
            if (verbose) {
                System.out.println("   trying SQRDMULH <V-si3><d>,<V-si3><n>,<Vm>.<Ts>[<index-si2>]");
            }
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMULH";
            stmt.key = "opcode & 0xff00f400 = 0x5f00d000";
            stmt.arg1 = decodeFpuRegister_size(size, Rd, null, "H", "S", null);
            stmt.arg2 = decodeFpuRegister_size(size, Rn, null, "H", "S", null);
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e000) == 0xd800000) {
            if (verbose) {
                System.out.println("   trying ST1 { <Vt>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST1";
            stmt.key = "opcode & 0xbfe0e000 = 0xd800000";
            stmt.arg1 = decodeLd1Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 000xxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0e000) == 0xda00000) {
            if (verbose) {
                System.out.println("   trying ST2 { <Vt>.B,<Vt2>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST2";
            stmt.key = "opcode & 0xbfe0e000 = 0xda00000";
            stmt.arg1 = decodeLd2Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 01xxx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0c400) == 0xd804000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.H,<Vt2>.H,<Vt3>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfe0c400 = 0xd804000";
            stmt.arg1 = decodeLd3Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 01xxx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe0c400) == 0xda04000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.H,<Vt2>.H,<Vt3>.H,<Vt4>.H }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfe0c400 = 0xda04000";
            stmt.arg1 = decodeLd4Index("H", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c000c00) {
            if (verbose) {
                System.out.println("   trying STR <Bt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c000c00";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c200800) {
            if (verbose) {
                System.out.println("   trying STR <Bt>,[<Xn|SP>,(<Wm>|<Xm>),<extend> {<amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c200800";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xfc000c00) {
            if (verbose) {
                System.out.println("   trying STR <Dt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0xfc000c00";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xfc200800) {
            if (verbose) {
                System.out.println("   trying STR <Dt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0xfc200800";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 000xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xfc000400) {
            if (verbose) {
                System.out.println("   trying STR <Dt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0xfc000400";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x7c000c00) {
            if (verbose) {
                System.out.println("   trying STR <Ht>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x7c000c00";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x7c200800) {
            if (verbose) {
                System.out.println("   trying STR <Ht>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x7c200800";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 000xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x7c000400) {
            if (verbose) {
                System.out.println("   trying STR <Ht>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x7c000400";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 100xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c800c00) {
            if (verbose) {
                System.out.println("   trying STR <Qt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c800c00";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 101xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3ca00800) {
            if (verbose) {
                System.out.println("   trying STR <Qt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x3ca00800";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 100xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x3c800400) {
            if (verbose) {
                System.out.println("   trying STR <Qt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0x3c800400";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xbc000c00) {
            if (verbose) {
                System.out.println("   trying STR <St>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0xbc000c00";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xbc200800) {
            if (verbose) {
                System.out.println("   trying STR <St>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0xbc200800";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?(size+4*(opc/2)):0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 000xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0xbc000400) {
            if (verbose) {
                System.out.println("   trying STR <St>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffe00c00 = 0xbc000400";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38000c00) {
            if (verbose) {
                System.out.println("   trying STRB <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38000c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38200800) {
            if (verbose) {
                System.out.println("   trying STRB <Wt>,[<Xn|SP>,(<Wm>|<Xm>),<extend> {<amount>}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38200800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 000xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38000400) {
            if (verbose) {
                System.out.println("   trying STRB <Wt>,[<Xn|SP>],#<simm>");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38000400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78000c00) {
            if (verbose) {
                System.out.println("   trying STRH <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78000c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78200800) {
            if (verbose) {
                System.out.println("   trying STRH <Wt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78200800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 000xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78000400) {
            if (verbose) {
                System.out.println("   trying STRH <Wt>,[<Xn|SP>],#<simm>");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78000400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 000xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38000800) {
            if (verbose) {
                System.out.println("   trying STTRB <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STTRB";
            stmt.key = "opcode & 0xffe00c00 = 0x38000800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 000xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78000800) {
            if (verbose) {
                System.out.println("   trying STTRH <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STTRH";
            stmt.key = "opcode & 0xffe00c00 = 0x78000800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 000xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x38000000) {
            if (verbose) {
                System.out.println("   trying STURB <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STURB";
            stmt.key = "opcode & 0xffe00c00 = 0x38000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 000xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffe00c00) == 0x78000000) {
            if (verbose) {
                System.out.println("   trying STURH <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STURH";
            stmt.key = "opcode & 0xffe00c00 = 0x78000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 00001xxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xfff80000) == 0xd5080000) {
            if (verbose) {
                System.out.println("   trying SYS #<op1>,<Cn>,<Cm>,#<op2>{,<Xt>}");
            }
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if ((!(getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("AT"))) && (!(getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("DC"))) && (!(getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("IC"))) && (!(getSysOp(op1, op2, CRm, CRn, Rt).split(" ")[0].equals("TLBI")))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SYS";
                stmt.key = "opcode & 0xfff80000 = 0xd5080000";
                stmt.arg1 = formatDecimalImm(op1);
                stmt.arg2 = "C" + CRn;
                stmt.arg3 = "C" + CRm;
                stmt.arg4 = formatDecimalImm(op2) + (Rt==31 ? "" : ("," + getRegisterName("X", Rt, false, -1)));
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010101 00101xxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xfff80000) == 0xd5280000) {
            if (verbose) {
                System.out.println("   trying SYSL <Xt>,#<op1>,<Cn>,<Cm>,#<op2>");
            }
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SYSL";
            stmt.key = "opcode & 0xfff80000 = 0xd5280000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatDecimalImm(op1);
            stmt.arg3 = "C" + CRn;
            stmt.arg4 = "C" + CRm;
            stmt.arg5 = formatDecimalImm(op2);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith12BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 11001110 001xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xce200000) {
            if (verbose) {
                System.out.println("   trying BCAX <Vd>.16B,<Vn>.16B,<Vm>.16B,<Va>.16B");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BCAX";
            stmt.key = "opcode & 0xffe08000 = 0xce200000";
            stmt.arg1 = formatVectorRegister(Rd, "16B");
            stmt.arg2 = formatVectorRegister(Rn, "16B");
            stmt.arg3 = formatVectorRegister(Rm, "16B");
            stmt.arg4 = formatVectorRegister(Ra, "16B");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xce000000) {
            if (verbose) {
                System.out.println("   trying EOR3 <Vd>.16B,<Vn>.16B,<Vm>.16B,<Va>.16B");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EOR3";
            stmt.key = "opcode & 0xffe08000 = 0xce000000";
            stmt.arg1 = formatVectorRegister(Rd, "16B");
            stmt.arg2 = formatVectorRegister(Rn, "16B");
            stmt.arg3 = formatVectorRegister(Rm, "16B");
            stmt.arg4 = formatVectorRegister(Ra, "16B");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101110 000xxxxx 0xxxx0xx xxxxxxxx
        if ((opcode32Bit & 0xbfe08400) == 0x2e000000) {
            if (verbose) {
                System.out.println("   trying EXT <Vd>.<T>,<Vn>.<T>,<Vm>.<T>,#<index>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm4 = getPart(opcode32Bit, 11, 4);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EXT";
            stmt.key = "opcode & 0xbfe08400 = 0x2e000000";
            stmt.arg1 = decodeVectorRegBWithQ(Q, Rd);
            stmt.arg2 = decodeVectorRegBWithQ(Q, Rn);
            stmt.arg3 = decodeVectorRegBWithQ(Q, Rm);
            stmt.arg4 = decodeIndex(Q, imm4);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010011 100xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x13800000) {
            if (verbose) {
                System.out.println("   trying EXTR <Wd>,<Wn>,<Wm>,#<lsb>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((Rn != Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "EXTR";
                stmt.key = "opcode & 0xffe08000 = 0x13800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = getRegisterName("W", Rm, false, -1);
                stmt.arg4 = decodeLsbRor(imms, sf==0?32:64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101110 xx0xxxxx 110xx1xx xxxxxxxx
        if ((opcode32Bit & 0xbf20e400) == 0x2e00c400) {
            if (verbose) {
                System.out.println("   trying FCMLA <Vd>.<T-siq4>,<Vn>.<T-siq4>,<Vm>.<T-siq4>,#<rotate2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int rot = getPart(opcode32Bit, 11, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FCMLA";
            stmt.key = "opcode & 0xbf20e400 = 0x2e00c400";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr____r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr____r_");
            stmt.arg3 = decodeVectorReg_sizeQ(size, Q, Rm, "rr____r_");
            stmt.arg4 = formatDecimalImm(rot * 90);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 01xxxxxx 0xx1x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc09400) == 0x2f401000) {
            if (verbose) {
                System.out.println("   trying FCMLA <Vd>.<T-siq5>,<Vn>.<T-siq5>,<Vm>.<Ts>[<index-si1>],#<rotate2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int rot = getPart(opcode32Bit, 13, 2);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((size != 2 || (L!=1 && Q!=0)) && (size != 1 || H!=1 || Q!=0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCMLA";
                stmt.key = "opcode & 0xbfc09400 = 0x2f401000";
                stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr__r_rr");
                stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr__r_rr");
                stmt.arg3 = decodeVectorRegWithIndex2(Rm, size, H, L, M);
                stmt.arg4 = formatDecimalImm(rot * 90);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101111 10xxxxxx 0xx1x0xx xxxxxxxx
        if ((opcode32Bit & 0xbfc09400) == 0x2f801000) {
            if (verbose) {
                System.out.println("   trying FCMLA <Vd>.<T-siq5>,<Vn>.<T-siq5>,<Vm>.<Ts>[<index-si1>],#<rotate2>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int rot = getPart(opcode32Bit, 13, 2);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((size != 2 || (L!=1 && Q!=0)) && (size != 1 || H!=1 || Q!=0)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "FCMLA";
                stmt.key = "opcode & 0xbfc09400 = 0x2f801000";
                stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "rr__r_rr");
                stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "rr__r_rr");
                stmt.arg3 = decodeVectorRegWithIndex2(Rm, size, H, L, M);
                stmt.arg4 = formatDecimalImm(rot * 90);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00011111 010xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f400000) {
            if (verbose) {
                System.out.println("   trying FMADD <Dd>,<Dn>,<Dm>,<Da>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMADD";
            stmt.key = "opcode & 0xffe08000 = 0x1f400000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            stmt.arg4 = getRegisterName("D", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 110xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1fc00000) {
            if (verbose) {
                System.out.println("   trying FMADD <Hd>,<Hn>,<Hm>,<Ha>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMADD";
            stmt.key = "opcode & 0xffe08000 = 0x1fc00000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            stmt.arg4 = getRegisterName("H", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f000000) {
            if (verbose) {
                System.out.println("   trying FMADD <Sd>,<Sn>,<Sm>,<Sa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMADD";
            stmt.key = "opcode & 0xffe08000 = 0x1f000000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            stmt.arg4 = getRegisterName("S", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 010xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f408000) {
            if (verbose) {
                System.out.println("   trying FMSUB <Dd>,<Dn>,<Dm>,<Da>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMSUB";
            stmt.key = "opcode & 0xffe08000 = 0x1f408000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            stmt.arg4 = getRegisterName("D", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 110xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1fc08000) {
            if (verbose) {
                System.out.println("   trying FMSUB <Hd>,<Hn>,<Hm>,<Ha>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMSUB";
            stmt.key = "opcode & 0xffe08000 = 0x1fc08000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            stmt.arg4 = getRegisterName("H", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 000xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f008000) {
            if (verbose) {
                System.out.println("   trying FMSUB <Sd>,<Sn>,<Sm>,<Sa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FMSUB";
            stmt.key = "opcode & 0xffe08000 = 0x1f008000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            stmt.arg4 = getRegisterName("S", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 011xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f600000) {
            if (verbose) {
                System.out.println("   trying FNMADD <Dd>,<Dn>,<Dm>,<Da>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMADD";
            stmt.key = "opcode & 0xffe08000 = 0x1f600000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            stmt.arg4 = getRegisterName("D", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 111xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1fe00000) {
            if (verbose) {
                System.out.println("   trying FNMADD <Hd>,<Hn>,<Hm>,<Ha>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMADD";
            stmt.key = "opcode & 0xffe08000 = 0x1fe00000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            stmt.arg4 = getRegisterName("H", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 001xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f200000) {
            if (verbose) {
                System.out.println("   trying FNMADD <Sd>,<Sn>,<Sm>,<Sa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMADD";
            stmt.key = "opcode & 0xffe08000 = 0x1f200000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            stmt.arg4 = getRegisterName("S", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 011xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f608000) {
            if (verbose) {
                System.out.println("   trying FNMSUB <Dd>,<Dn>,<Dm>,<Da>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMSUB";
            stmt.key = "opcode & 0xffe08000 = 0x1f608000";
            stmt.arg1 = getRegisterName("D", Rd, false, -1);
            stmt.arg2 = getRegisterName("D", Rn, false, -1);
            stmt.arg3 = getRegisterName("D", Rm, false, -1);
            stmt.arg4 = getRegisterName("D", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 111xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1fe08000) {
            if (verbose) {
                System.out.println("   trying FNMSUB <Hd>,<Hn>,<Hm>,<Ha>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMSUB";
            stmt.key = "opcode & 0xffe08000 = 0x1fe08000";
            stmt.arg1 = getRegisterName("H", Rd, false, -1);
            stmt.arg2 = getRegisterName("H", Rn, false, -1);
            stmt.arg3 = getRegisterName("H", Rm, false, -1);
            stmt.arg4 = getRegisterName("H", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011111 001xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1f208000) {
            if (verbose) {
                System.out.println("   trying FNMSUB <Sd>,<Sn>,<Sm>,<Sa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "FNMSUB";
            stmt.key = "opcode & 0xffe08000 = 0x1f208000";
            stmt.arg1 = getRegisterName("S", Rd, false, -1);
            stmt.arg2 = getRegisterName("S", Rn, false, -1);
            stmt.arg3 = getRegisterName("S", Rm, false, -1);
            stmt.arg4 = getRegisterName("S", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001000 110xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x88c08000) {
            if (verbose) {
                System.out.println("   trying LDAR <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAR";
            stmt.key = "opcode & 0xffe08000 = 0x88c08000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001000 110xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xc8c08000) {
            if (verbose) {
                System.out.println("   trying LDAR <Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAR";
            stmt.key = "opcode & 0xffe08000 = 0xc8c08000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 110xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8c08000) {
            if (verbose) {
                System.out.println("   trying LDARB <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDARB";
            stmt.key = "opcode & 0xffe08000 = 0x8c08000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 110xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48c08000) {
            if (verbose) {
                System.out.println("   trying LDARH <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDARH";
            stmt.key = "opcode & 0xffe08000 = 0x48c08000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001000 011xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x88608000) {
            if (verbose) {
                System.out.println("   trying LDAXP <Wt1>,<Wt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAXP";
            stmt.key = "opcode & 0xffe08000 = 0x88608000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001000 011xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xc8608000) {
            if (verbose) {
                System.out.println("   trying LDAXP <Xt1>,<Xt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAXP";
            stmt.key = "opcode & 0xffe08000 = 0xc8608000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001000 010xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x88408000) {
            if (verbose) {
                System.out.println("   trying LDAXR <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAXR";
            stmt.key = "opcode & 0xffe08000 = 0x88408000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001000 010xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xc8408000) {
            if (verbose) {
                System.out.println("   trying LDAXR <Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAXR";
            stmt.key = "opcode & 0xffe08000 = 0xc8408000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 010xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8408000) {
            if (verbose) {
                System.out.println("   trying LDAXRB <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAXRB";
            stmt.key = "opcode & 0xffe08000 = 0x8408000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 010xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48408000) {
            if (verbose) {
                System.out.println("   trying LDAXRH <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDAXRH";
            stmt.key = "opcode & 0xffe08000 = 0x48408000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 110xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8c00000) {
            if (verbose) {
                System.out.println("   trying LDLARB <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDLARB";
            stmt.key = "opcode & 0xffe08000 = 0x8c00000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 110xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48c00000) {
            if (verbose) {
                System.out.println("   trying LDLARH <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDLARH";
            stmt.key = "opcode & 0xffe08000 = 0x48c00000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38400c00) {
            if (verbose) {
                System.out.println("   trying LDR <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38400c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38600800) {
            if (verbose) {
                System.out.println("   trying LDR <Wt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38600800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38400400) {
            if (verbose) {
                System.out.println("   trying LDR <Wt>,[<Xn|SP>],#<simm>");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38400400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 010xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78400c00) {
            if (verbose) {
                System.out.println("   trying LDR <Xt>,[<Xn|SP>,#<simm>]!");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78400c00";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 011xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78600800) {
            if (verbose) {
                System.out.println("   trying LDR <Xt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78600800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 010xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78400400) {
            if (verbose) {
                System.out.println("   trying LDR <Xt>,[<Xn|SP>],#<simm>");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78400400";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111000 0x1xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0xf8200400) {
            if (verbose) {
                System.out.println("   trying LDRAA <Xt>,[<Xn|SP>{,#<simm2>}]");
            }
            final int S = getPart(opcode32Bit, 22, 1);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRAA";
            stmt.key = "opcode & 0xffa00c00 = 0xf8200400";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, decodeLdraaOffset(imm9, S));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111000 0x1xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0xf8200c00) {
            if (verbose) {
                System.out.println("   trying LDRAA <Xt>,[<Xn|SP>{,#<simm2>}]!");
            }
            final int S = getPart(opcode32Bit, 22, 1);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRAA";
            stmt.key = "opcode & 0xffa00c00 = 0xf8200c00";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, decodeLdraaOffset(imm9, S));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111000 1x1xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0xf8a00400) {
            if (verbose) {
                System.out.println("   trying LDRAB <Xt>,[<Xn|SP>{,#<simm2>}]");
            }
            final int S = getPart(opcode32Bit, 22, 1);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRAB";
            stmt.key = "opcode & 0xffa00c00 = 0xf8a00400";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, decodeLdraaOffset(imm9, S));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111000 1x1xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0xf8a00c00) {
            if (verbose) {
                System.out.println("   trying LDRAB <Xt>,[<Xn|SP>{,#<simm2>}]!");
            }
            final int S = getPart(opcode32Bit, 22, 1);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRAB";
            stmt.key = "opcode & 0xffa00c00 = 0xf8a00c00";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, decodeLdraaOffset(imm9, S));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x10xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38400c00) {
            if (verbose) {
                System.out.println("   trying LDRSB <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38400c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x11xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38600800) {
            if (verbose) {
                System.out.println("   trying LDRSB <Wt>,[<Xn|SP>,(<Wm>|<Xm>),<extend> {<amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38600800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x10xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38400400) {
            if (verbose) {
                System.out.println("   trying LDRSB <Wt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38400400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x00xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38000c00) {
            if (verbose) {
                System.out.println("   trying LDRSB <Xt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38000c00";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x01xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38200800) {
            if (verbose) {
                System.out.println("   trying LDRSB <Xt>,[<Xn|SP>,(<Wm>|<Xm>),<extend> {<amount>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38200800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x00xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38000400) {
            if (verbose) {
                System.out.println("   trying LDRSB <Xt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38000400";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x10xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78400c00) {
            if (verbose) {
                System.out.println("   trying LDRSH <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78400c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x11xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78600800) {
            if (verbose) {
                System.out.println("   trying LDRSH <Wt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78600800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x10xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78400400) {
            if (verbose) {
                System.out.println("   trying LDRSH <Wt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78400400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x00xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78000c00) {
            if (verbose) {
                System.out.println("   trying LDRSH <Xt>,[<Xn|SP>,#<simm>]!");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78000c00";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x01xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78200800) {
            if (verbose) {
                System.out.println("   trying LDRSH <Xt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78200800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x00xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78000400) {
            if (verbose) {
                System.out.println("   trying LDRSH <Xt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78000400";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 010xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38400800) {
            if (verbose) {
                System.out.println("   trying LDTR <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38400800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 010xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78400800) {
            if (verbose) {
                System.out.println("   trying LDTR <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78400800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x10xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38400800) {
            if (verbose) {
                System.out.println("   trying LDTRSB <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38400800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x00xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38000800) {
            if (verbose) {
                System.out.println("   trying LDTRSB <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTRSB";
            stmt.key = "opcode & 0xff600c00 = 0x38000800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x10xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78400800) {
            if (verbose) {
                System.out.println("   trying LDTRSH <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78400800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x00xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78000800) {
            if (verbose) {
                System.out.println("   trying LDTRSH <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDTRSH";
            stmt.key = "opcode & 0xff600c00 = 0x78000800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38400000) {
            if (verbose) {
                System.out.println("   trying LDUR <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 010xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78400000) {
            if (verbose) {
                System.out.println("   trying LDUR <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDUR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78400000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x10xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38400000) {
            if (verbose) {
                System.out.println("   trying LDURSB <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDURSB";
            stmt.key = "opcode & 0xff600c00 = 0x38400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111000 x00xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x38000000) {
            if (verbose) {
                System.out.println("   trying LDURSB <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDURSB";
            stmt.key = "opcode & 0xff600c00 = 0x38000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x10xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78400000) {
            if (verbose) {
                System.out.println("   trying LDURSH <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDURSH";
            stmt.key = "opcode & 0xff600c00 = 0x78400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111000 x00xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xff600c00) == 0x78000000) {
            if (verbose) {
                System.out.println("   trying LDURSH <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDURSH";
            stmt.key = "opcode & 0xff600c00 = 0x78000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001000 011xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x88600000) {
            if (verbose) {
                System.out.println("   trying LDXP <Wt1>,<Wt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDXP";
            stmt.key = "opcode & 0xffe08000 = 0x88600000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001000 011xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xc8600000) {
            if (verbose) {
                System.out.println("   trying LDXP <Xt1>,<Xt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDXP";
            stmt.key = "opcode & 0xffe08000 = 0xc8600000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 010xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8400000) {
            if (verbose) {
                System.out.println("   trying LDXRB <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDXRB";
            stmt.key = "opcode & 0xffe08000 = 0x8400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 010xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48400000) {
            if (verbose) {
                System.out.println("   trying LDXRH <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDXRH";
            stmt.key = "opcode & 0xffe08000 = 0x48400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011011 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1b000000) {
            if (verbose) {
                System.out.println("   trying MADD <Wd>,<Wn>,<Wm>,<Wa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Ra != 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MADD";
                stmt.key = "opcode & 0xffe08000 = 0x1b000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = getRegisterName("W", Rm, false, -1);
                stmt.arg4 = getRegisterName("W", Ra, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10011011 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9b000000) {
            if (verbose) {
                System.out.println("   trying MADD <Xd>,<Xn>,<Xm>,<Xa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Ra != 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MADD";
                stmt.key = "opcode & 0xffe08000 = 0x9b000000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = getRegisterName("X", Rm, false, -1);
                stmt.arg4 = getRegisterName("X", Ra, false, -1);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 0x101111 xxxxxxxx 0000x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0x2f000000) {
            if (verbose) {
                System.out.println("   trying MLA <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MLA";
            stmt.key = "opcode & 0xbf00f400 = 0x2f000000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 xxxxxxxx 0100x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0x2f004000) {
            if (verbose) {
                System.out.println("   trying MLS <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-si3>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MLS";
            stmt.key = "opcode & 0xbf00f400 = 0x2f004000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorRegWithIndex7(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 0011xxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xfff00000) == 0xd5300000) {
            if (verbose) {
                System.out.println("   trying MRS <Xt>,(<systemreg>|S<op0>_<op1>_<Cn>_<Cm>_<op2>)");
            }
            final int o0 = getPart(opcode32Bit, 19, 1);
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MRS";
            stmt.key = "opcode & 0xfff00000 = 0xd5300000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = decodeSystemRegister(o0+2, op1, CRn, CRm, op2);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010101 0001xxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xfff00000) == 0xd5100000) {
            if (verbose) {
                System.out.println("   trying MSR (<systemreg>|S<op0>_<op1>_<Cn>_<Cm>_<op2>),<Xt>");
            }
            final int o0 = getPart(opcode32Bit, 19, 1);
            final int op1 = getPart(opcode32Bit, 16, 3);
            final int CRn = getPart(opcode32Bit, 12, 4);
            final int CRm = getPart(opcode32Bit, 8, 4);
            final int op2 = getPart(opcode32Bit, 5, 3);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MSR";
            stmt.key = "opcode & 0xfff00000 = 0xd5100000";
            stmt.arg1 = decodeSystemRegister(o0+2, op1, CRn, CRm, op2);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011011 000xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x1b008000) {
            if (verbose) {
                System.out.println("   trying MSUB <Wd>,<Wn>,<Wm>,<Wa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MSUB";
            stmt.key = "opcode & 0xffe08000 = 0x1b008000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            stmt.arg4 = getRegisterName("W", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 000xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9b008000) {
            if (verbose) {
                System.out.println("   trying MSUB <Xd>,<Xn>,<Xm>,<Xa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MSUB";
            stmt.key = "opcode & 0xffe08000 = 0x9b008000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            stmt.arg4 = getRegisterName("X", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 1000x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf008000) {
            if (verbose) {
                System.out.println("   trying MUL <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-si3>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MUL";
            stmt.key = "opcode & 0xbf00f400 = 0xf008000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorRegWithIndex7(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010011 100xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x13800000) {
            if (verbose) {
                System.out.println("   trying ROR <Wd>,<Wn>,#<shift>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "ROR";
                stmt.key = "opcode & 0xffe08000 = 0x13800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11001110 010xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xce400000) {
            if (verbose) {
                System.out.println("   trying SM3SS1 <Vd>.4S,<Vn>.4S,<Vm>.4S,<Va>.4S");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SM3SS1";
            stmt.key = "opcode & 0xffe08000 = 0xce400000";
            stmt.arg1 = formatVectorRegister(Rd, "4S");
            stmt.arg2 = formatVectorRegister(Rn, "4S");
            stmt.arg3 = formatVectorRegister(Rm, "4S");
            stmt.arg4 = formatVectorRegister(Ra, "4S");
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 001xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9b200000) {
            if (verbose) {
                System.out.println("   trying SMADDL <Xd>,<Wn>,<Wm>,<Xa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMADDL";
            stmt.key = "opcode & 0xffe08000 = 0x9b200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            stmt.arg4 = getRegisterName("X", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 0010x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf002000) {
            if (verbose) {
                System.out.println("   trying SMLAL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMLAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0xf002000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 0110x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf006000) {
            if (verbose) {
                System.out.println("   trying SMLSL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMLSL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0xf006000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 001xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9b208000) {
            if (verbose) {
                System.out.println("   trying SMSUBL <Xd>,<Wn>,<Wm>,<Xa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMSUBL";
            stmt.key = "opcode & 0xffe08000 = 0x9b208000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            stmt.arg4 = getRegisterName("X", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 010xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9b400000) {
            if (verbose) {
                System.out.println("   trying SMULH <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMULH";
            stmt.key = "opcode & 0xffe08000 = 0x9b400000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 1010x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf00a000) {
            if (verbose) {
                System.out.println("   trying SMULL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SMULL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0xf00a000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 0011x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf003000) {
            if (verbose) {
                System.out.println("   trying SQDMLAL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0xf003000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 0111x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf007000) {
            if (verbose) {
                System.out.println("   trying SQDMLSL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMLSL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0xf007000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 1100x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf00c000) {
            if (verbose) {
                System.out.println("   trying SQDMULH <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULH";
            stmt.key = "opcode & 0xbf00f400 = 0xf00c000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 1011x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf00b000) {
            if (verbose) {
                System.out.println("   trying SQDMULL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQDMULL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0xf00b000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 xxxxxxxx 1101x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0x2f00d000) {
            if (verbose) {
                System.out.println("   trying SQRDMLAH <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLAH";
            stmt.key = "opcode & 0xbf00f400 = 0x2f00d000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 xxxxxxxx 1111x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0x2f00f000) {
            if (verbose) {
                System.out.println("   trying SQRDMLSH <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMLSH";
            stmt.key = "opcode & 0xbf00f400 = 0x2f00f000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001111 xxxxxxxx 1101x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0xf00d000) {
            if (verbose) {
                System.out.println("   trying SQRDMULH <Vd>.<T>,<Vn>.<T>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SQRDMULH";
            stmt.key = "opcode & 0xbf00f400 = 0xf00d000";
            stmt.arg1 = decodeVectorReg_sizeQ(size, Q, Rd, "______r_");
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______r_");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 100xxxxx 00xxxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0c000) == 0xd800000) {
            if (verbose) {
                System.out.println("   trying ST3 { <Vt>.B,<Vt2>.B,<Vt3>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST3";
            stmt.key = "opcode & 0xbfe0c000 = 0xd800000";
            stmt.arg1 = decodeLd3Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x001101 101xxxxx 00xxxxxx xxxxxxxx
        if ((opcode32Bit & 0xbfe0c000) == 0xda00000) {
            if (verbose) {
                System.out.println("   trying ST4 { <Vt>.B,<Vt2>.B,<Vt3>.B,<Vt4>.B }[<index>],[<Xn|SP>],<Xm>");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int opcode = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int size = getPart(opcode32Bit, 10, 2);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ST4";
            stmt.key = "opcode & 0xbfe0c000 = 0xda00000";
            stmt.arg1 = decodeLd4Index("B", Rt, Q, S, size);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001000 100xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x88800000) {
            if (verbose) {
                System.out.println("   trying STLLR <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLLR";
            stmt.key = "opcode & 0xffe08000 = 0x88800000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001000 100xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xc8800000) {
            if (verbose) {
                System.out.println("   trying STLLR <Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLLR";
            stmt.key = "opcode & 0xffe08000 = 0xc8800000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 100xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8800000) {
            if (verbose) {
                System.out.println("   trying STLLRB <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLLRB";
            stmt.key = "opcode & 0xffe08000 = 0x8800000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 100xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48800000) {
            if (verbose) {
                System.out.println("   trying STLLRH <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLLRH";
            stmt.key = "opcode & 0xffe08000 = 0x48800000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 100xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8808000) {
            if (verbose) {
                System.out.println("   trying STLRB <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLRB";
            stmt.key = "opcode & 0xffe08000 = 0x8808000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 100xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48808000) {
            if (verbose) {
                System.out.println("   trying STLRH <Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLRH";
            stmt.key = "opcode & 0xffe08000 = 0x48808000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001000 001xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x88208000) {
            if (verbose) {
                System.out.println("   trying STLXP <Ws>,<Wt1>,<Wt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLXP";
            stmt.key = "opcode & 0xffe08000 = 0x88208000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = getRegisterName("W", Rt2, false, -1);
            stmt.arg4 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001000 001xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xc8208000) {
            if (verbose) {
                System.out.println("   trying STLXP <Ws>,<Xt1>,<Xt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLXP";
            stmt.key = "opcode & 0xffe08000 = 0xc8208000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = getRegisterName("X", Rt2, false, -1);
            stmt.arg4 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 000xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8008000) {
            if (verbose) {
                System.out.println("   trying STLXRB <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLXRB";
            stmt.key = "opcode & 0xffe08000 = 0x8008000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 000xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48008000) {
            if (verbose) {
                System.out.println("   trying STLXRH <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLXRH";
            stmt.key = "opcode & 0xffe08000 = 0x48008000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 0x0xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0x3c000400) {
            if (verbose) {
                System.out.println("   trying STR <Bt>,[<Xn|SP>],#<simm>");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffa00c00 = 0x3c000400";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38000c00) {
            if (verbose) {
                System.out.println("   trying STR <Wt>,[<Xn|SP>,#<simm>]!");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38000c00";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38200800) {
            if (verbose) {
                System.out.println("   trying STR <Wt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38200800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 000xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38000400) {
            if (verbose) {
                System.out.println("   trying STR <Wt>,[<Xn|SP>],#<simm>");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38000400";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 000xxxxx xxxx11xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78000c00) {
            if (verbose) {
                System.out.println("   trying STR <Xt>,[<Xn|SP>,#<simm>]!");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78000c00";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPreIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 001xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78200800) {
            if (verbose) {
                System.out.println("   trying STR <Xt>,[<Xn|SP>,(<Wm>|<Xm>){,<extend> {<amount>}}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int S = getPart(opcode32Bit, 12, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78200800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithTwoRegisters("X", Rn, Rm, option, S==1?size:0, false, S, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 000xxxxx xxxx01xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78000400) {
            if (verbose) {
                System.out.println("   trying STR <Xt>,[<Xn|SP>],#<simm>");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78000400";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatPostIndexMemAccess("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 000xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38000800) {
            if (verbose) {
                System.out.println("   trying STTR <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STTR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38000800";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 000xxxxx xxxx10xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78000800) {
            if (verbose) {
                System.out.println("   trying STTR <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STTR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78000800";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 0x0xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0x3c000000) {
            if (verbose) {
                System.out.println("   trying STUR <Bt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUR";
            stmt.key = "opcode & 0xffa00c00 = 0x3c000000";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111100 0x0xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0xfc000000) {
            if (verbose) {
                System.out.println("   trying STUR <Dt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUR";
            stmt.key = "opcode & 0xffa00c00 = 0xfc000000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111100 0x0xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0x7c000000) {
            if (verbose) {
                System.out.println("   trying STUR <Ht>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUR";
            stmt.key = "opcode & 0xffa00c00 = 0x7c000000";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111100 1x0xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0x3c800000) {
            if (verbose) {
                System.out.println("   trying STUR <Qt>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUR";
            stmt.key = "opcode & 0xffa00c00 = 0x3c800000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111100 0x0xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0xffa00c00) == 0xbc000000) {
            if (verbose) {
                System.out.println("   trying STUR <St>,[<Xn|SP>{,#<simm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUR";
            stmt.key = "opcode & 0xffa00c00 = 0xbc000000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111000 000xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x38000000) {
            if (verbose) {
                System.out.println("   trying STUR <Wt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUR";
            stmt.key = "opcode & 0x7fe00c00 = 0x38000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111000 000xxxxx xxxx00xx xxxxxxxx
        if ((opcode32Bit & 0x7fe00c00) == 0x78000000) {
            if (verbose) {
                System.out.println("   trying STUR <Xt>,[<Xn|SP>{,#<simm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm9 = getPart(opcode32Bit, 12, 9);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm9Signed = asSigned(imm9, 9);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STUR";
            stmt.key = "opcode & 0x7fe00c00 = 0x78000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm9Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001000 001xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x88200000) {
            if (verbose) {
                System.out.println("   trying STXP <Ws>,<Wt1>,<Wt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STXP";
            stmt.key = "opcode & 0xffe08000 = 0x88200000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = getRegisterName("W", Rt2, false, -1);
            stmt.arg4 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001000 001xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0xc8200000) {
            if (verbose) {
                System.out.println("   trying STXP <Ws>,<Xt1>,<Xt2>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STXP";
            stmt.key = "opcode & 0xffe08000 = 0xc8200000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = getRegisterName("X", Rt2, false, -1);
            stmt.arg4 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001000 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x8000000) {
            if (verbose) {
                System.out.println("   trying STXRB <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STXRB";
            stmt.key = "opcode & 0xffe08000 = 0x8000000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001000 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x48000000) {
            if (verbose) {
                System.out.println("   trying STXRH <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STXRH";
            stmt.key = "opcode & 0xffe08000 = 0x48000000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 101xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9ba00000) {
            if (verbose) {
                System.out.println("   trying UMADDL <Xd>,<Wn>,<Wm>,<Xa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMADDL";
            stmt.key = "opcode & 0xffe08000 = 0x9ba00000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            stmt.arg4 = getRegisterName("X", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 xxxxxxxx 0010x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0x2f002000) {
            if (verbose) {
                System.out.println("   trying UMLAL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMLAL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0x2f002000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 xxxxxxxx 0110x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0x2f006000) {
            if (verbose) {
                System.out.println("   trying UMLSL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMLSL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0x2f006000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 101xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9ba08000) {
            if (verbose) {
                System.out.println("   trying UMSUBL <Xd>,<Wn>,<Wm>,<Xa>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMSUBL";
            stmt.key = "opcode & 0xffe08000 = 0x9ba08000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = getRegisterName("W", Rm, false, -1);
            stmt.arg4 = getRegisterName("X", Ra, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011011 110xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe08000) == 0x9bc00000) {
            if (verbose) {
                System.out.println("   trying UMULH <Xd>,<Xn>,<Xm>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int Ra = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMULH";
            stmt.key = "opcode & 0xffe08000 = 0x9bc00000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = getRegisterName("X", Rm, false, -1);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 0x101111 xxxxxxxx 1010x0xx xxxxxxxx
        if ((opcode32Bit & 0xbf00f400) == 0x2f00a000) {
            if (verbose) {
                System.out.println("   trying UMULL{2} <Vd>.<T-si1>,<Vn>.<T-siq1>,<Vm>.<Ts>[<index-si2>]");
            }
            final int Q = getPart(opcode32Bit, 30, 1);
            final int size = getPart(opcode32Bit, 22, 2);
            final int L = getPart(opcode32Bit, 21, 1);
            final int M = getPart(opcode32Bit, 20, 1);
            final int Rm = getPart(opcode32Bit, 16, 4);
            final int H = getPart(opcode32Bit, 11, 1);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "UMULL" + (Q==0?"":"2");
            stmt.key = "opcode & 0xbf00f400 = 0x2f00a000";
            stmt.arg1 = decodeVectorReg_size1(size, Rd);
            stmt.arg2 = decodeVectorReg_sizeQ(size, Q, Rn, "______rr");
            stmt.arg3 = decodeVectorRegWithIndex6(Rm, size, H, L, M);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith11BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 00001011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0xb200000) {
            if (verbose) {
                System.out.println("   trying ADD <Wd|WSP>,<Wn|WSP>,<Wm>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADD";
            stmt.key = "opcode & 0xffe00000 = 0xb200000";
            stmt.arg1 = getRegisterName("W", Rd, true, -1);
            stmt.arg2 = getRegisterName("W", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend("W", Rm, option, imm3, Rn == 31 || Rd == 31, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0x8b200000) {
            if (verbose) {
                System.out.println("   trying ADD <Xd|SP>,<Xn|SP>,<R><m>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADD";
            stmt.key = "opcode & 0xffe00000 = 0x8b200000";
            stmt.arg1 = getRegisterName("X", Rd, true, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend((option&3)==3 ? "X" : "W", Rm, option, imm3, Rn == 31 || Rd == 31, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0x2b200000) {
            if (verbose) {
                System.out.println("   trying ADDS <Wd>,<Wn|WSP>,<Wm>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDS";
            stmt.key = "opcode & 0xffe00000 = 0x2b200000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend("W", Rm, option, imm3, Rn == 31 || Rd == 31, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0xab200000) {
            if (verbose) {
                System.out.println("   trying ADDS <Xd>,<Xn|SP>,<R><m>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDS";
            stmt.key = "opcode & 0xffe00000 = 0xab200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend((option&3)==3 ? "X" : "W", Rm, option, imm3, Rn == 31 || Rd == 31, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010011 00xxxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc08000) == 0x13000000) {
            if (verbose) {
                System.out.println("   trying ASR <Wd>,<Wn>,#<shift>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms == 31)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "ASR";
                stmt.key = "opcode & 0xffc08000 = 0x13000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeShift(immr, imms, 32);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 01xxxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc08000) == 0x93408000) {
            if (verbose) {
                System.out.println("   trying ASR <Xd>,<Xn>,#<shift>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms == 63)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "ASR";
                stmt.key = "opcode & 0xffc08000 = 0x93408000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeShift(immr, imms, 64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 110xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0x93c00000) {
            if (verbose) {
                System.out.println("   trying EXTR <Xd>,<Xn>,<Xm>,#<lsb>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if ((Rn != Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "EXTR";
                stmt.key = "opcode & 0xffe00000 = 0x93c00000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = getRegisterName("X", Rm, false, -1);
                stmt.arg4 = decodeLsbRor(imms, sf==0?32:64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // x0001000 110xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x8c00000) {
            if (verbose) {
                System.out.println("   trying LDLAR <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDLAR";
            stmt.key = "opcode & 0x7fe08000 = 0x8c00000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 110xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x48c00000) {
            if (verbose) {
                System.out.println("   trying LDLAR <Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDLAR";
            stmt.key = "opcode & 0x7fe08000 = 0x48c00000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0001000 010xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x8400000) {
            if (verbose) {
                System.out.println("   trying LDXR <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDXR";
            stmt.key = "opcode & 0x7fe08000 = 0x8400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 010xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x48400000) {
            if (verbose) {
                System.out.println("   trying LDXR <Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDXR";
            stmt.key = "opcode & 0x7fe08000 = 0x48400000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01010011 00xxxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc08000) == 0x53000000) {
            if (verbose) {
                System.out.println("   trying LSL <Wd>,<Wn>,#<shift>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int n = getPart(opcode32Bit, 22, 1); // raw
            if ((imms != 31 && imms + 1 == immr) && (imms +1 == immr) && (!((n == 0 && imms == 0b11111) || (n == 1 && imms == 0b111111)))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "LSL";
                stmt.key = "opcode & 0xffc08000 = 0x53000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeShift(immr, imms, 32);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01010011 00xxxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc08000) == 0x53000000) {
            if (verbose) {
                System.out.println("   trying LSR <Wd>,<Wn>,#<shift>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int n = getPart(opcode32Bit, 22, 1); // raw
            if ((imms == 31) && ((n == 0 && imms == 0b11111) || (n == 1 && imms == 0b111111))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "LSR";
                stmt.key = "opcode & 0xffc08000 = 0x53000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeShift(immr, imms, 32);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010011 01xxxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc08000) == 0xd3408000) {
            if (verbose) {
                System.out.println("   trying LSR <Xd>,<Xn>,#<shift>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int n = getPart(opcode32Bit, 22, 1); // raw
            if ((imms == 63) && ((n == 0 && imms == 0b11111) || (n == 1 && imms == 0b111111))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "LSR";
                stmt.key = "opcode & 0xffc08000 = 0xd3408000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeShift(immr, imms, 64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 110xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0x93c00000) {
            if (verbose) {
                System.out.println("   trying ROR <Xd>,<Xn>,#<shift>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn == Rm)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "ROR";
                stmt.key = "opcode & 0xffe00000 = 0x93c00000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // x0001000 100xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x8808000) {
            if (verbose) {
                System.out.println("   trying STLR <Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLR";
            stmt.key = "opcode & 0x7fe08000 = 0x8808000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 100xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x48808000) {
            if (verbose) {
                System.out.println("   trying STLR <Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLR";
            stmt.key = "opcode & 0x7fe08000 = 0x48808000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0001000 000xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x8008000) {
            if (verbose) {
                System.out.println("   trying STLXR <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLXR";
            stmt.key = "opcode & 0x7fe08000 = 0x8008000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 000xxxxx 1xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x48008000) {
            if (verbose) {
                System.out.println("   trying STLXR <Ws>,<Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STLXR";
            stmt.key = "opcode & 0x7fe08000 = 0x48008000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0001000 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x8000000) {
            if (verbose) {
                System.out.println("   trying STXR <Ws>,<Wt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STXR";
            stmt.key = "opcode & 0x7fe08000 = 0x8000000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("W", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1001000 000xxxxx 0xxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fe08000) == 0x48000000) {
            if (verbose) {
                System.out.println("   trying STXR <Ws>,<Xt>,[<Xn|SP>{,#0}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int Rs = getPart(opcode32Bit, 16, 5);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STXR";
            stmt.key = "opcode & 0x7fe08000 = 0x48000000";
            stmt.arg1 = getRegisterName("W", Rs, false, -1);
            stmt.arg2 = getRegisterName("X", Rt, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0x4b200000) {
            if (verbose) {
                System.out.println("   trying SUB <Wd|WSP>,<Wn|WSP>,<Wm>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xffe00000 = 0x4b200000";
            stmt.arg1 = getRegisterName("W", Rd, true, -1);
            stmt.arg2 = getRegisterName("W", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend("W", Rm, option, imm3, Rn == 31 || Rd == 31, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0xcb200000) {
            if (verbose) {
                System.out.println("   trying SUB <Xd|SP>,<Xn|SP>,<R><m>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xffe00000 = 0xcb200000";
            stmt.arg1 = getRegisterName("X", Rd, true, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend((option&3)==3 ? "X" : "W", Rm, option, imm3, Rn == 31 || Rd == 31, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0x6b200000) {
            if (verbose) {
                System.out.println("   trying SUBS <Wd>,<Wn|WSP>,<Wm>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUBS";
            stmt.key = "opcode & 0xffe00000 = 0x6b200000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend("W", Rm, option, imm3, Rn == 31 || Rd == 31, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11101011 001xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0xeb200000) {
            if (verbose) {
                System.out.println("   trying SUBS <Xd>,<Xn|SP>,<R><m>{,<extend> {#<amount>}}");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int option = getPart(opcode32Bit, 13, 3);
            final int imm3 = getPart(opcode32Bit, 10, 3);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUBS";
            stmt.key = "opcode & 0xffe00000 = 0xeb200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            stmt.arg3 = decodeRegisterWithExtend((option&3)==3 ? "X" : "W", Rm, option, imm3, Rn == 31 || Rd == 31, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001110 100xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffe00000) == 0xce800000) {
            if (verbose) {
                System.out.println("   trying XAR <Vd>.2D,<Vn>.2D,<Vm>.2D,#<imm6>");
            }
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "XAR";
            stmt.key = "opcode & 0xffe00000 = 0xce800000";
            stmt.arg1 = formatVectorRegister(Rd, "2D");
            stmt.arg2 = formatVectorRegister(Rn, "2D");
            stmt.arg3 = formatVectorRegister(Rm, "2D");
            stmt.arg4 = formatDecimalImm(imm6);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith10BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 00010010 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x12000000) {
            if (verbose) {
                System.out.println("   trying AND <Wd|WSP>,<Wn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AND";
            stmt.key = "opcode & 0xffc00000 = 0x12000000";
            stmt.arg1 = getRegisterName("W", Rd, true, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01110010 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x72000000) {
            if (verbose) {
                System.out.println("   trying ANDS <Wd>,<Wn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ANDS";
            stmt.key = "opcode & 0xffc00000 = 0x72000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00110011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x33000000) {
            if (verbose) {
                System.out.println("   trying BFI <Wd>,<Wn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn != 31 && imms < immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFI";
                stmt.key = "opcode & 0xffc00000 = 0x33000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10110011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xb3400000) {
            if (verbose) {
                System.out.println("   trying BFI <Xd>,<Xn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((Rn != 31 && imms < immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFI";
                stmt.key = "opcode & 0xffc00000 = 0xb3400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00110011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x33000000) {
            if (verbose) {
                System.out.println("   trying BFM <Wd>,<Wn>,#<immr>,#<imms>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == 31 && imms < immr)) && (!(Rn != 31 && imms < immr)) && (!(imms >= immr))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFM";
                stmt.key = "opcode & 0xffc00000 = 0x33000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(immr);
                stmt.arg4 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10110011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xb3400000) {
            if (verbose) {
                System.out.println("   trying BFM <Xd>,<Xn>,#<immr>,#<imms>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rn == 31 && imms < immr)) && (!(Rn != 31 && imms < immr)) && (!(imms >= immr))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFM";
                stmt.key = "opcode & 0xffc00000 = 0xb3400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(immr);
                stmt.arg4 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00110011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x33000000) {
            if (verbose) {
                System.out.println("   trying BFXIL <Wd>,<Wn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms >= immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFXIL";
                stmt.key = "opcode & 0xffc00000 = 0x33000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, true);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10110011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xb3400000) {
            if (verbose) {
                System.out.println("   trying BFXIL <Xd>,<Xn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms >= immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "BFXIL";
                stmt.key = "opcode & 0xffc00000 = 0xb3400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, true);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01010010 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x52000000) {
            if (verbose) {
                System.out.println("   trying EOR <Wd|WSP>,<Wn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EOR";
            stmt.key = "opcode & 0xffc00000 = 0x52000000";
            stmt.arg1 = getRegisterName("W", Rd, true, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101100 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6c400000) {
            if (verbose) {
                System.out.println("   trying LDNP <Dt1>,<Dt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDNP";
            stmt.key = "opcode & 0xffc00000 = 0x6c400000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101100 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xac400000) {
            if (verbose) {
                System.out.println("   trying LDNP <Qt1>,<Qt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDNP";
            stmt.key = "opcode & 0xffc00000 = 0xac400000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101100 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2c400000) {
            if (verbose) {
                System.out.println("   trying LDNP <St1>,<St2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDNP";
            stmt.key = "opcode & 0xffc00000 = 0x2c400000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101000 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x28400000) {
            if (verbose) {
                System.out.println("   trying LDNP <Wt1>,<Wt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDNP";
            stmt.key = "opcode & 0xffc00000 = 0x28400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101000 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa8400000) {
            if (verbose) {
                System.out.println("   trying LDNP <Xt1>,<Xt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDNP";
            stmt.key = "opcode & 0xffc00000 = 0xa8400000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101101 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6dc00000) {
            if (verbose) {
                System.out.println("   trying LDP <Dt1>,<Dt2>,[<Xn|SP>,#<imm2>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x6dc00000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101100 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6cc00000) {
            if (verbose) {
                System.out.println("   trying LDP <Dt1>,<Dt2>,[<Xn|SP>],#<imm2>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x6cc00000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101101 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6d400000) {
            if (verbose) {
                System.out.println("   trying LDP <Dt1>,<Dt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x6d400000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101101 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xadc00000) {
            if (verbose) {
                System.out.println("   trying LDP <Qt1>,<Qt2>,[<Xn|SP>,#<imm2>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0xadc00000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101100 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xacc00000) {
            if (verbose) {
                System.out.println("   trying LDP <Qt1>,<Qt2>,[<Xn|SP>],#<imm2>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0xacc00000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101101 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xad400000) {
            if (verbose) {
                System.out.println("   trying LDP <Qt1>,<Qt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0xad400000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101101 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2dc00000) {
            if (verbose) {
                System.out.println("   trying LDP <St1>,<St2>,[<Xn|SP>,#<imm2>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x2dc00000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101100 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2cc00000) {
            if (verbose) {
                System.out.println("   trying LDP <St1>,<St2>,[<Xn|SP>],#<imm2>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x2cc00000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101101 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2d400000) {
            if (verbose) {
                System.out.println("   trying LDP <St1>,<St2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x2d400000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101001 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x29c00000) {
            if (verbose) {
                System.out.println("   trying LDP <Wt1>,<Wt2>,[<Xn|SP>,#<imm>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x29c00000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101000 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x28c00000) {
            if (verbose) {
                System.out.println("   trying LDP <Wt1>,<Wt2>,[<Xn|SP>],#<imm>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x28c00000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101001 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x29400000) {
            if (verbose) {
                System.out.println("   trying LDP <Wt1>,<Wt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0x29400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101001 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa9c00000) {
            if (verbose) {
                System.out.println("   trying LDP <Xt1>,<Xt2>,[<Xn|SP>,#<imm>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0xa9c00000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101000 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa8c00000) {
            if (verbose) {
                System.out.println("   trying LDP <Xt1>,<Xt2>,[<Xn|SP>],#<imm>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0xa8c00000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101001 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa9400000) {
            if (verbose) {
                System.out.println("   trying LDP <Xt1>,<Xt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDP";
            stmt.key = "opcode & 0xffc00000 = 0xa9400000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101001 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x69c00000) {
            if (verbose) {
                System.out.println("   trying LDPSW <Xt1>,<Xt2>,[<Xn|SP>,#<imm>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (((Rn != Rt && Rn != Rt2) || Rn == 31) && (Rt != Rt2)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "LDPSW";
                stmt.key = "opcode & 0xffc00000 = 0x69c00000";
                stmt.arg1 = getRegisterName("X", Rt, false, -1);
                stmt.arg2 = getRegisterName("X", Rt2, false, -1);
                stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2));
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01101000 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x68c00000) {
            if (verbose) {
                System.out.println("   trying LDPSW <Xt1>,<Xt2>,[<Xn|SP>],#<imm>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (((Rn != Rt && Rn != Rt2) || Rn == 31) && (Rt != Rt2)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "LDPSW";
                stmt.key = "opcode & 0xffc00000 = 0x68c00000";
                stmt.arg1 = getRegisterName("X", Rt, false, -1);
                stmt.arg2 = getRegisterName("X", Rt2, false, -1);
                stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2) );
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01101001 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x69400000) {
            if (verbose) {
                System.out.println("   trying LDPSW <Xt1>,<Xt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if ((Rt != Rt2)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "LDPSW";
                stmt.key = "opcode & 0xffc00000 = 0x69400000";
                stmt.arg1 = getRegisterName("X", Rt, false, -1);
                stmt.arg2 = getRegisterName("X", Rt2, false, -1);
                stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00111101 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x3d400000) {
            if (verbose) {
                System.out.println("   trying LDR <Bt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffc00000 = 0x3d400000";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111101 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xfd400000) {
            if (verbose) {
                System.out.println("   trying LDR <Dt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffc00000 = 0xfd400000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111101 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x7d400000) {
            if (verbose) {
                System.out.println("   trying LDR <Ht>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffc00000 = 0x7d400000";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111101 11xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x3dc00000) {
            if (verbose) {
                System.out.println("   trying LDR <Qt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffc00000 = 0x3dc00000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111101 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xbd400000) {
            if (verbose) {
                System.out.println("   trying LDR <St>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xffc00000 = 0xbd400000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111001 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x39400000) {
            if (verbose) {
                System.out.println("   trying LDRB <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRB";
            stmt.key = "opcode & 0xffc00000 = 0x39400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111001 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x79400000) {
            if (verbose) {
                System.out.println("   trying LDRH <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRH";
            stmt.key = "opcode & 0xffc00000 = 0x79400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111001 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xb9800000) {
            if (verbose) {
                System.out.println("   trying LDRSW <Xt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSW";
            stmt.key = "opcode & 0xffc00000 = 0xb9800000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xd3400000) {
            if (verbose) {
                System.out.println("   trying LSL <Xd>,<Xn>,#<shift>");
            }
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int n = getPart(opcode32Bit, 22, 1); // raw
            if ((imms != 63 && imms + 1 == immr) && (imms +1 == immr) && (!((n == 0 && imms == 0b11111) || (n == 1 && imms == 0b111111)))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "LSL";
                stmt.key = "opcode & 0xffc00000 = 0xd3400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeShift(immr, imms, 64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00110010 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x32000000) {
            if (verbose) {
                System.out.println("   trying ORR <Wd|WSP>,<Wn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORR";
            stmt.key = "opcode & 0xffc00000 = 0x32000000";
            stmt.arg1 = getRegisterName("W", Rd, true, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111001 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xf9800000) {
            if (verbose) {
                System.out.println("   trying PRFM (<prfop>|#<imm5>),[<Xn|SP>{,#<pimm>}]");
            }
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PRFM";
            stmt.key = "opcode & 0xffc00000 = 0xf9800000";
            stmt.arg1 = decodePrefetchOp(Rt);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x13000000) {
            if (verbose) {
                System.out.println("   trying SBFIZ <Wd>,<Wn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms < immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBFIZ";
                stmt.key = "opcode & 0xffc00000 = 0x13000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x93400000) {
            if (verbose) {
                System.out.println("   trying SBFIZ <Xd>,<Xn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms < immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBFIZ";
                stmt.key = "opcode & 0xffc00000 = 0x93400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00010011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x13000000) {
            if (verbose) {
                System.out.println("   trying SBFM <Wd>,<Wn>,#<immr>,#<imms>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imms == 31)) && (!(imms == 63)) && (!(imms < immr)) && (!(isBfxPreferred(sf, 0, imms, immr))) && (!(immr == 0 && imms == 7)) && (!(immr == 0 && imms == 15)) && (!(immr == 0 && imms == 31))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBFM";
                stmt.key = "opcode & 0xffc00000 = 0x13000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(immr);
                stmt.arg4 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x93400000) {
            if (verbose) {
                System.out.println("   trying SBFM <Xd>,<Xn>,#<immr>,#<imms>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imms == 31)) && (!(imms == 63)) && (!(imms < immr)) && (!(isBfxPreferred(sf, 0, imms, immr))) && (!(immr == 0 && imms == 7)) && (!(immr == 0 && imms == 15)) && (!(immr == 0 && imms == 31))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBFM";
                stmt.key = "opcode & 0xffc00000 = 0x93400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(immr);
                stmt.arg4 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00010011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x13000000) {
            if (verbose) {
                System.out.println("   trying SBFX <Wd>,<Wn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((isBfxPreferred(sf, 0, imms, immr))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBFX";
                stmt.key = "opcode & 0xffc00000 = 0x13000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, true);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x93400000) {
            if (verbose) {
                System.out.println("   trying SBFX <Xd>,<Xn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((isBfxPreferred(sf, 0, imms, immr))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SBFX";
                stmt.key = "opcode & 0xffc00000 = 0x93400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, true);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01101100 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6c000000) {
            if (verbose) {
                System.out.println("   trying STNP <Dt1>,<Dt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STNP";
            stmt.key = "opcode & 0xffc00000 = 0x6c000000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101100 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xac000000) {
            if (verbose) {
                System.out.println("   trying STNP <Qt1>,<Qt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STNP";
            stmt.key = "opcode & 0xffc00000 = 0xac000000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101100 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2c000000) {
            if (verbose) {
                System.out.println("   trying STNP <St1>,<St2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STNP";
            stmt.key = "opcode & 0xffc00000 = 0x2c000000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101000 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x28000000) {
            if (verbose) {
                System.out.println("   trying STNP <Wt1>,<Wt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STNP";
            stmt.key = "opcode & 0xffc00000 = 0x28000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101000 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa8000000) {
            if (verbose) {
                System.out.println("   trying STNP <Xt1>,<Xt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STNP";
            stmt.key = "opcode & 0xffc00000 = 0xa8000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101101 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6d800000) {
            if (verbose) {
                System.out.println("   trying STP <Dt1>,<Dt2>,[<Xn|SP>,#<imm2>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x6d800000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101100 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6c800000) {
            if (verbose) {
                System.out.println("   trying STP <Dt1>,<Dt2>,[<Xn|SP>],#<imm2>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x6c800000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101101 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x6d000000) {
            if (verbose) {
                System.out.println("   trying STP <Dt1>,<Dt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x6d000000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = getRegisterName("D", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101101 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xad800000) {
            if (verbose) {
                System.out.println("   trying STP <Qt1>,<Qt2>,[<Xn|SP>,#<imm2>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0xad800000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101100 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xac800000) {
            if (verbose) {
                System.out.println("   trying STP <Qt1>,<Qt2>,[<Xn|SP>],#<imm2>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0xac800000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101101 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xad000000) {
            if (verbose) {
                System.out.println("   trying STP <Qt1>,<Qt2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0xad000000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = getRegisterName("Q", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101101 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2d800000) {
            if (verbose) {
                System.out.println("   trying STP <St1>,<St2>,[<Xn|SP>,#<imm2>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x2d800000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101100 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2c800000) {
            if (verbose) {
                System.out.println("   trying STP <St1>,<St2>,[<Xn|SP>],#<imm2>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x2c800000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101101 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x2d000000) {
            if (verbose) {
                System.out.println("   trying STP <St1>,<St2>,[<Xn|SP>{,#<imm2>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x2d000000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = getRegisterName("S", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101001 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x29800000) {
            if (verbose) {
                System.out.println("   trying STP <Wt1>,<Wt2>,[<Xn|SP>,#<imm>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x29800000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101000 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x28800000) {
            if (verbose) {
                System.out.println("   trying STP <Wt1>,<Wt2>,[<Xn|SP>],#<imm>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x28800000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101001 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x29000000) {
            if (verbose) {
                System.out.println("   trying STP <Wt1>,<Wt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0x29000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = getRegisterName("W", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101001 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa9800000) {
            if (verbose) {
                System.out.println("   trying STP <Xt1>,<Xt2>,[<Xn|SP>,#<imm>]!");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0xa9800000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatPreIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101000 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa8800000) {
            if (verbose) {
                System.out.println("   trying STP <Xt1>,<Xt2>,[<Xn|SP>],#<imm>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0xa8800000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatPostIndexMemAccess("X", Rn, imm7Signed<<(2 + opc/2) );
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101001 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xa9000000) {
            if (verbose) {
                System.out.println("   trying STP <Xt1>,<Xt2>,[<Xn|SP>{,#<imm>}]");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm7 = getPart(opcode32Bit, 15, 7);
            final int Rt2 = getPart(opcode32Bit, 10, 5);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm7Signed = asSigned(imm7, 7);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STP";
            stmt.key = "opcode & 0xffc00000 = 0xa9000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = getRegisterName("X", Rt2, false, -1);
            stmt.arg3 = formatMemAccessWithOffset("X", Rn, imm7Signed<<(2 + opc/2));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111101 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x3d000000) {
            if (verbose) {
                System.out.println("   trying STR <Bt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffc00000 = 0x3d000000";
            stmt.arg1 = getRegisterName("B", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11111101 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xfd000000) {
            if (verbose) {
                System.out.println("   trying STR <Dt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffc00000 = 0xfd000000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111101 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x7d000000) {
            if (verbose) {
                System.out.println("   trying STR <Ht>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffc00000 = 0x7d000000";
            stmt.arg1 = getRegisterName("H", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111101 10xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x3d800000) {
            if (verbose) {
                System.out.println("   trying STR <Qt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffc00000 = 0x3d800000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10111101 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xbd000000) {
            if (verbose) {
                System.out.println("   trying STR <St>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            final int opcPart = getPart(opcode32Bit, 23, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0xffc00000 = 0xbd000000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << (opcPart*4+size));
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111001 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x39000000) {
            if (verbose) {
                System.out.println("   trying STRB <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRB";
            stmt.key = "opcode & 0xffc00000 = 0x39000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << 0);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111001 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x79000000) {
            if (verbose) {
                System.out.println("   trying STRH <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STRH";
            stmt.key = "opcode & 0xffc00000 = 0x79000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01010011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x53000000) {
            if (verbose) {
                System.out.println("   trying UBFIZ <Wd>,<Wn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms < immr && imms + 1 != immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UBFIZ";
                stmt.key = "opcode & 0xffc00000 = 0x53000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xd3400000) {
            if (verbose) {
                System.out.println("   trying UBFIZ <Xd>,<Xn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((imms < immr && imms + 1 != immr)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UBFIZ";
                stmt.key = "opcode & 0xffc00000 = 0xd3400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, false);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01010011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x53000000) {
            if (verbose) {
                System.out.println("   trying UBFM <Wd>,<Wn>,#<immr>,#<imms>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imms != 31 && imms + 1 == immr)) && (!(imms != 63 && imms + 1 == immr)) && (!(imms == 31)) && (!(imms == 63)) && (!(imms < immr && imms + 1 != immr)) && (!(isBfxPreferred(sf, 0, imms, immr))) && (!(immr == 0 && imms == 7)) && (!(immr == 0 && imms == 15))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UBFM";
                stmt.key = "opcode & 0xffc00000 = 0x53000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(immr);
                stmt.arg4 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xd3400000) {
            if (verbose) {
                System.out.println("   trying UBFM <Xd>,<Xn>,#<immr>,#<imms>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imms != 31 && imms + 1 == immr)) && (!(imms != 63 && imms + 1 == immr)) && (!(imms == 31)) && (!(imms == 63)) && (!(imms < immr && imms + 1 != immr)) && (!(isBfxPreferred(sf, 0, imms, immr))) && (!(immr == 0 && imms == 7)) && (!(immr == 0 && imms == 15))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UBFM";
                stmt.key = "opcode & 0xffc00000 = 0xd3400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = formatDecimalImm(immr);
                stmt.arg4 = formatDecimalImm(imms);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01010011 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0x53000000) {
            if (verbose) {
                System.out.println("   trying UBFX <Wd>,<Wn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((isBfxPreferred(sf, 0, imms, immr))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UBFX";
                stmt.key = "opcode & 0xffc00000 = 0x53000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, true);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010011 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xffc00000) == 0xd3400000) {
            if (verbose) {
                System.out.println("   trying UBFX <Xd>,<Xn>,#<lsb>,#<width>");
            }
            final int sf = getPart(opcode32Bit, 31, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((isBfxPreferred(sf, 0, imms, immr))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "UBFX";
                stmt.key = "opcode & 0xffc00000 = 0xd3400000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeLsb(immr, imms, sf==0?32:64, true);
                stmt.arg4 = decodeWidth(immr, imms, sf==0?32:64, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith9BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 00001011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xb000000) {
            if (verbose) {
                System.out.println("   trying ADD <Wd>,<Wn>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADD";
            stmt.key = "opcode & 0xff200000 = 0xb000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x8b000000) {
            if (verbose) {
                System.out.println("   trying ADD <Xd>,<Xn>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADD";
            stmt.key = "opcode & 0xff200000 = 0x8b000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x2b000000) {
            if (verbose) {
                System.out.println("   trying ADDS <Wd>,<Wn>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDS";
            stmt.key = "opcode & 0xff200000 = 0x2b000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xab000000) {
            if (verbose) {
                System.out.println("   trying ADDS <Xd>,<Xn>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDS";
            stmt.key = "opcode & 0xff200000 = 0xab000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xa000000) {
            if (verbose) {
                System.out.println("   trying AND <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AND";
            stmt.key = "opcode & 0xff200000 = 0xa000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x8a000000) {
            if (verbose) {
                System.out.println("   trying AND <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AND";
            stmt.key = "opcode & 0xff200000 = 0x8a000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10010010 0xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x92000000) {
            if (verbose) {
                System.out.println("   trying AND <Xd|SP>,<Xn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "AND";
            stmt.key = "opcode & 0xff800000 = 0x92000000";
            stmt.arg1 = getRegisterName("X", Rd, true, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x6a000000) {
            if (verbose) {
                System.out.println("   trying ANDS <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ANDS";
            stmt.key = "opcode & 0xff200000 = 0x6a000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11110010 0xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0xf2000000) {
            if (verbose) {
                System.out.println("   trying ANDS <Xd>,<Xn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ANDS";
            stmt.key = "opcode & 0xff800000 = 0xf2000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11101010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xea000000) {
            if (verbose) {
                System.out.println("   trying ANDS <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ANDS";
            stmt.key = "opcode & 0xff200000 = 0xea000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01010100 xxxxxxxx xxxxxxxx xxx0xxxx
        if ((opcode32Bit & 0xff000010) == 0x54000000) {
            if (verbose) {
                System.out.println("   trying B.<cond> <label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int cond = getPart(opcode32Bit, 0, 4);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "B." + decodeBranchCondition(cond);
            stmt.key = "opcode & 0xff000010 = 0x54000000";
            stmt.arg1 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00001010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xa200000) {
            if (verbose) {
                System.out.println("   trying BIC <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BIC";
            stmt.key = "opcode & 0xff200000 = 0xa200000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10001010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x8a200000) {
            if (verbose) {
                System.out.println("   trying BIC <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BIC";
            stmt.key = "opcode & 0xff200000 = 0x8a200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x6a200000) {
            if (verbose) {
                System.out.println("   trying BICS <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BICS";
            stmt.key = "opcode & 0xff200000 = 0x6a200000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11101010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xea200000) {
            if (verbose) {
                System.out.println("   trying BICS <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BICS";
            stmt.key = "opcode & 0xff200000 = 0xea200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x4a200000) {
            if (verbose) {
                System.out.println("   trying EON <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EON";
            stmt.key = "opcode & 0xff200000 = 0x4a200000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xca200000) {
            if (verbose) {
                System.out.println("   trying EON <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EON";
            stmt.key = "opcode & 0xff200000 = 0xca200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x4a000000) {
            if (verbose) {
                System.out.println("   trying EOR <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EOR";
            stmt.key = "opcode & 0xff200000 = 0x4a000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xca000000) {
            if (verbose) {
                System.out.println("   trying EOR <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EOR";
            stmt.key = "opcode & 0xff200000 = 0xca000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010010 0xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0xd2000000) {
            if (verbose) {
                System.out.println("   trying EOR <Xd|SP>,<Xn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "EOR";
            stmt.key = "opcode & 0xff800000 = 0xd2000000";
            stmt.arg1 = getRegisterName("X", Rd, true, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111001 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fc00000) == 0x39400000) {
            if (verbose) {
                System.out.println("   trying LDR <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fc00000 = 0x39400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111001 01xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fc00000) == 0x79400000) {
            if (verbose) {
                System.out.println("   trying LDR <Xt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7fc00000 = 0x79400000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111001 x1xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff400000) == 0x39400000) {
            if (verbose) {
                System.out.println("   trying LDRSB <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff400000 = 0x39400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00111001 x0xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff400000) == 0x39000000) {
            if (verbose) {
                System.out.println("   trying LDRSB <Xt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSB";
            stmt.key = "opcode & 0xff400000 = 0x39000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111001 x1xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff400000) == 0x79400000) {
            if (verbose) {
                System.out.println("   trying LDRSH <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff400000 = 0x79400000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01111001 x0xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff400000) == 0x79000000) {
            if (verbose) {
                System.out.println("   trying LDRSH <Xt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int opc = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int size = getPart(opcode32Bit, 30, 2); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSH";
            stmt.key = "opcode & 0xff400000 = 0x79000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x12800000) {
            if (verbose) {
                System.out.println("   trying MOV <Wd>,#<imm-inv-hw>");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imm16==0 && hw!=0) && imm16!=0xffff)) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xff800000 = 0x12800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeShiftedImm16("W", imm16, hw, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x52800000) {
            if (verbose) {
                System.out.println("   trying MOV <Wd>,#<imm-nor-hw>");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imm16==0 && hw!=0))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xff800000 = 0x52800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeShiftedImm16("W", imm16, hw, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x92800000) {
            if (verbose) {
                System.out.println("   trying MOV <Xd>,#<imm-inv-hw>");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imm16==0 && hw!=0))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xff800000 = 0x92800000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeShiftedImm16("X", imm16, hw, true);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0xd2800000) {
            if (verbose) {
                System.out.println("   trying MOV <Xd>,#<imm-nor-hw>");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(imm16==0 && hw!=0)) && (!(imm16 == 0 && hw != 0))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOV";
                stmt.key = "opcode & 0xff800000 = 0xd2800000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeShiftedImm16("X", imm16, hw, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01110010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x72800000) {
            if (verbose) {
                System.out.println("   trying MOVK <Wd>,#<imm>{,LSL #<shift>}");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int s = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVK";
            stmt.key = "opcode & 0xff800000 = 0x72800000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = decodeMovShiftedImm16(imm16, hw, s==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11110010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0xf2800000) {
            if (verbose) {
                System.out.println("   trying MOVK <Xd>,#<imm>{,LSL #<shift>}");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int s = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "MOVK";
            stmt.key = "opcode & 0xff800000 = 0xf2800000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = decodeMovShiftedImm16(imm16, hw, s==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x12800000) {
            if (verbose) {
                System.out.println("   trying MOVN <Wd>,#<imm>{,LSL #<shift>}");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int s = getPart(opcode32Bit, 31, 1); // raw
            if ((!(!(imm16==0 && hw!=0) && imm16!=0xffff))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOVN";
                stmt.key = "opcode & 0xff800000 = 0x12800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeMovShiftedImm16(imm16, hw, s==0?32:64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x92800000) {
            if (verbose) {
                System.out.println("   trying MOVN <Xd>,#<imm>{,LSL #<shift>}");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int s = getPart(opcode32Bit, 31, 1); // raw
            if ((!(!(imm16==0 && hw!=0)))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOVN";
                stmt.key = "opcode & 0xff800000 = 0x92800000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeMovShiftedImm16(imm16, hw, s==0?32:64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 01010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0x52800000) {
            if (verbose) {
                System.out.println("   trying MOVZ <Wd>,#<imm>{,LSL #<shift>}");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int s = getPart(opcode32Bit, 31, 1); // raw
            if ((!(!(imm16==0 && hw!=0)))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOVZ";
                stmt.key = "opcode & 0xff800000 = 0x52800000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = decodeMovShiftedImm16(imm16, hw, s==0?32:64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11010010 1xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0xd2800000) {
            if (verbose) {
                System.out.println("   trying MOVZ <Xd>,#<imm>{,LSL #<shift>}");
            }
            final int hw = getPart(opcode32Bit, 21, 2);
            final int imm16 = getPart(opcode32Bit, 5, 16);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int s = getPart(opcode32Bit, 31, 1); // raw
            if ((!(!(imm16==0 && hw!=0)))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "MOVZ";
                stmt.key = "opcode & 0xff800000 = 0xd2800000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = decodeMovShiftedImm16(imm16, hw, s==0?32:64);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00101010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x2a200000) {
            if (verbose) {
                System.out.println("   trying ORN <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORN";
            stmt.key = "opcode & 0xff200000 = 0x2a200000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101010 xx1xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xaa200000) {
            if (verbose) {
                System.out.println("   trying ORN <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORN";
            stmt.key = "opcode & 0xff200000 = 0xaa200000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00101010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x2a000000) {
            if (verbose) {
                System.out.println("   trying ORR <Wd>,<Wn>,<Wm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORR";
            stmt.key = "opcode & 0xff200000 = 0x2a000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10101010 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xaa000000) {
            if (verbose) {
                System.out.println("   trying ORR <Xd>,<Xn>,<Xm>{,<shift> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORR";
            stmt.key = "opcode & 0xff200000 = 0xaa000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10110010 0xxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff800000) == 0xb2000000) {
            if (verbose) {
                System.out.println("   trying ORR <Xd|SP>,<Xn>,#<imm>");
            }
            final int N = getPart(opcode32Bit, 22, 1);
            final int immr = getPart(opcode32Bit, 16, 6);
            final int imms = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            final int sf = getPart(opcode32Bit, 31, 1); // raw
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ORR";
            stmt.key = "opcode & 0xff800000 = 0xb2000000";
            stmt.arg1 = getRegisterName("X", Rd, true, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeAluImm(N, immr, imms, sf==0?32:64);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0111001 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fc00000) == 0x39000000) {
            if (verbose) {
                System.out.println("   trying STR <Wt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fc00000 = 0x39000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1111001 00xxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7fc00000) == 0x79000000) {
            if (verbose) {
                System.out.println("   trying STR <Xt>,[<Xn|SP>{,#<pimm>}]");
            }
            final int size = getPart(opcode32Bit, 30, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rt = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "STR";
            stmt.key = "opcode & 0x7fc00000 = 0x79000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = formatMemAccessWithOffset("X", Rn, imm12 << size);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01001011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x4b000000) {
            if (verbose) {
                System.out.println("   trying SUB <Wd>,<Wn>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xff200000 = 0x4b000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11001011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xcb000000) {
            if (verbose) {
                System.out.println("   trying SUB <Xd>,<Xn>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xff200000 = 0xcb000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, false, -1);
            stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01101011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0x6b000000) {
            if (verbose) {
                System.out.println("   trying SUBS <Wd>,<Wn>,<Wm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rd == 31 && Rn != 31)) && (!(Rn == 31))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SUBS";
                stmt.key = "opcode & 0xff200000 = 0x6b000000";
                stmt.arg1 = getRegisterName("W", Rd, false, -1);
                stmt.arg2 = getRegisterName("W", Rn, false, -1);
                stmt.arg3 = decodeShiftedRegister("W", Rm, shift, imm6, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 11101011 xx0xxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff200000) == 0xeb000000) {
            if (verbose) {
                System.out.println("   trying SUBS <Xd>,<Xn>,<Xm>{,<shift2> #<amount>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int Rm = getPart(opcode32Bit, 16, 5);
            final int imm6 = getPart(opcode32Bit, 10, 6);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(Rd == 31 && Rn != 31)) && (!(Rn == 31))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "SUBS";
                stmt.key = "opcode & 0xff200000 = 0xeb000000";
                stmt.arg1 = getRegisterName("X", Rd, false, -1);
                stmt.arg2 = getRegisterName("X", Rn, false, -1);
                stmt.arg3 = decodeShiftedRegister("X", Rm, shift, imm6, false);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith8BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 00010001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x11000000) {
            if (verbose) {
                System.out.println("   trying ADD <Wd|WSP>,<Wn|WSP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(shift == 0 && imm12 == 0 && (Rd == 31 || Rn == 31)))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "ADD";
                stmt.key = "opcode & 0xff000000 = 0x11000000";
                stmt.arg1 = getRegisterName("W", Rd, true, -1);
                stmt.arg2 = getRegisterName("W", Rn, true, -1);
                stmt.arg3 = decodeShiftedImm12(imm12, shift);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 10010001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x91000000) {
            if (verbose) {
                System.out.println("   trying ADD <Xd|SP>,<Xn|SP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if ((!(shift == 0 && imm12 == 0 && (Rd == 31 || Rn == 31)))) {
                if (numMatching > 0) {
                    if (numMatching == 1) {
                        matching = new ArrayList<>();
                    }
                    matching.add(stmt.format());
                }
                numMatching += 1;
                stmt.opcode = "ADD";
                stmt.key = "opcode & 0xff000000 = 0x91000000";
                stmt.arg1 = getRegisterName("X", Rd, true, -1);
                stmt.arg2 = getRegisterName("X", Rn, true, -1);
                stmt.arg3 = decodeShiftedImm12(imm12, shift);
                if (showMatching) {
                    System.out.println(stmt.format() + " " + stmt.key);
                }
            }
        }

        // 00110001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x31000000) {
            if (verbose) {
                System.out.println("   trying ADDS <Wd>,<Wn|WSP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDS";
            stmt.key = "opcode & 0xff000000 = 0x31000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, true, -1);
            stmt.arg3 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10110001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0xb1000000) {
            if (verbose) {
                System.out.println("   trying ADDS <Xd>,<Xn|SP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADDS";
            stmt.key = "opcode & 0xff000000 = 0xb1000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            stmt.arg3 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00110101 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x35000000) {
            if (verbose) {
                System.out.println("   trying CBNZ <Wt>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CBNZ";
            stmt.key = "opcode & 0xff000000 = 0x35000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10110101 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0xb5000000) {
            if (verbose) {
                System.out.println("   trying CBNZ <Xt>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CBNZ";
            stmt.key = "opcode & 0xff000000 = 0xb5000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00110100 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x34000000) {
            if (verbose) {
                System.out.println("   trying CBZ <Wt>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CBZ";
            stmt.key = "opcode & 0xff000000 = 0x34000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10110100 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0xb4000000) {
            if (verbose) {
                System.out.println("   trying CBZ <Xt>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "CBZ";
            stmt.key = "opcode & 0xff000000 = 0xb4000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01011100 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x5c000000) {
            if (verbose) {
                System.out.println("   trying LDR <Dt>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xff000000 = 0x5c000000";
            stmt.arg1 = getRegisterName("D", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011100 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x9c000000) {
            if (verbose) {
                System.out.println("   trying LDR <Qt>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xff000000 = 0x9c000000";
            stmt.arg1 = getRegisterName("Q", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 00011100 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x1c000000) {
            if (verbose) {
                System.out.println("   trying LDR <St>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0xff000000 = 0x1c000000";
            stmt.arg1 = getRegisterName("S", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 10011000 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x98000000) {
            if (verbose) {
                System.out.println("   trying LDRSW <Xt>,<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDRSW";
            stmt.key = "opcode & 0xff000000 = 0x98000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11011000 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0xd8000000) {
            if (verbose) {
                System.out.println("   trying PRFM (<prfop>|#<imm5>),<label>");
            }
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "PRFM";
            stmt.key = "opcode & 0xff000000 = 0xd8000000";
            stmt.arg1 = decodePrefetchOp(Rt);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01010001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x51000000) {
            if (verbose) {
                System.out.println("   trying SUB <Wd|WSP>,<Wn|WSP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xff000000 = 0x51000000";
            stmt.arg1 = getRegisterName("W", Rd, true, -1);
            stmt.arg2 = getRegisterName("W", Rn, true, -1);
            stmt.arg3 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11010001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0xd1000000) {
            if (verbose) {
                System.out.println("   trying SUB <Xd|SP>,<Xn|SP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUB";
            stmt.key = "opcode & 0xff000000 = 0xd1000000";
            stmt.arg1 = getRegisterName("X", Rd, true, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            stmt.arg3 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 01110001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0x71000000) {
            if (verbose) {
                System.out.println("   trying SUBS <Wd>,<Wn|WSP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUBS";
            stmt.key = "opcode & 0xff000000 = 0x71000000";
            stmt.arg1 = getRegisterName("W", Rd, false, -1);
            stmt.arg2 = getRegisterName("W", Rn, true, -1);
            stmt.arg3 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 11110001 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xff000000) == 0xf1000000) {
            if (verbose) {
                System.out.println("   trying SUBS <Xd>,<Xn|SP>,#<imm>{,<shift>}");
            }
            final int shift = getPart(opcode32Bit, 22, 2);
            final int imm12 = getPart(opcode32Bit, 10, 12);
            final int Rn = getPart(opcode32Bit, 5, 5);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "SUBS";
            stmt.key = "opcode & 0xff000000 = 0xf1000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = getRegisterName("X", Rn, true, -1);
            stmt.arg3 = decodeShiftedImm12(imm12, shift);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith7BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // x0011000 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7f000000) == 0x18000000) {
            if (verbose) {
                System.out.println("   trying LDR <Wt>,<label>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7f000000 = 0x18000000";
            stmt.arg1 = getRegisterName("W", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x1011000 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7f000000) == 0x58000000) {
            if (verbose) {
                System.out.println("   trying LDR <Xt>,<label>");
            }
            final int opc = getPart(opcode32Bit, 30, 2);
            final int imm19 = getPart(opcode32Bit, 5, 19);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm19Signed = asSigned(imm19, 19);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "LDR";
            stmt.key = "opcode & 0x7f000000 = 0x58000000";
            stmt.arg1 = getRegisterName("X", Rt, false, -1);
            stmt.arg2 = decodeLoadStoreRegAddrLabel(pc, imm19Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0110111 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7f000000) == 0x37000000) {
            if (verbose) {
                System.out.println("   trying TBNZ <R><t>,#<imm>,<label>");
            }
            final int b5 = getPart(opcode32Bit, 31, 1);
            final int b40 = getPart(opcode32Bit, 19, 5);
            final int imm14 = getPart(opcode32Bit, 5, 14);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm14Signed = asSigned(imm14, 14);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBNZ";
            stmt.key = "opcode & 0x7f000000 = 0x37000000";
            stmt.arg1 = getRegisterName(b5==0 ? "W" : "X", Rt, false, -1);
            stmt.arg2 = formatDecimalImm((b5<<5)+b40);
            stmt.arg3 = decodePcRelativeLabel(pc, 4 * imm14Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // x0110110 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x7f000000) == 0x36000000) {
            if (verbose) {
                System.out.println("   trying TBZ <R><t>,#<imm>,<label>");
            }
            final int b5 = getPart(opcode32Bit, 31, 1);
            final int b40 = getPart(opcode32Bit, 19, 5);
            final int imm14 = getPart(opcode32Bit, 5, 14);
            final int Rt = getPart(opcode32Bit, 0, 5);
            final int imm14Signed = asSigned(imm14, 14);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "TBZ";
            stmt.key = "opcode & 0x7f000000 = 0x36000000";
            stmt.arg1 = getRegisterName(b5==0 ? "W" : "X", Rt, false, -1);
            stmt.arg2 = formatDecimalImm((b5<<5)+b40);
            stmt.arg3 = decodePcRelativeLabel(pc, 4 * imm14Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

    private boolean decodeWith6BitsSet(long pc, int opcode32Bit, AsmStatement stmt) {
        int numMatching = 0;
        List<String> matching = null;

        // 0xx10000 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x9f000000) == 0x10000000) {
            if (verbose) {
                System.out.println("   trying ADR <Xd>,<label>");
            }
            final int immlo = getPart(opcode32Bit, 29, 2);
            final int immhi = getPart(opcode32Bit, 5, 19);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADR";
            stmt.key = "opcode & 0x9f000000 = 0x10000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = decodeAdrLabel(pc, asSigned((immhi<<2)+immlo, 21), false);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 1xx10000 xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0x9f000000) == 0x90000000) {
            if (verbose) {
                System.out.println("   trying ADRP <Xd>,<label>");
            }
            final int immlo = getPart(opcode32Bit, 29, 2);
            final int immhi = getPart(opcode32Bit, 5, 19);
            final int Rd = getPart(opcode32Bit, 0, 5);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "ADRP";
            stmt.key = "opcode & 0x9f000000 = 0x90000000";
            stmt.arg1 = getRegisterName("X", Rd, false, -1);
            stmt.arg2 = decodeAdrLabel(pc, asSigned((immhi<<2)+immlo, 21), true);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 000101xx xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xfc000000) == 0x14000000) {
            if (verbose) {
                System.out.println("   trying B <label>");
            }
            final int imm26 = getPart(opcode32Bit, 0, 26);
            final int imm26Signed = asSigned(imm26, 26);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "B";
            stmt.key = "opcode & 0xfc000000 = 0x14000000";
            stmt.arg1 = decodeLongBranchLabel(pc, imm26Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }

        // 100101xx xxxxxxxx xxxxxxxx xxxxxxxx
        if ((opcode32Bit & 0xfc000000) == 0x94000000) {
            if (verbose) {
                System.out.println("   trying BL <label>");
            }
            final int imm26 = getPart(opcode32Bit, 0, 26);
            final int imm26Signed = asSigned(imm26, 26);
            if (numMatching > 0) {
                if (numMatching == 1) {
                    matching = new ArrayList<>();
                }
                matching.add(stmt.format());
            }
            numMatching += 1;
            stmt.opcode = "BL";
            stmt.key = "opcode & 0xfc000000 = 0x94000000";
            stmt.arg1 = decodeLongBranchLabel(pc, imm26Signed);
            if (showMatching) {
                System.out.println(stmt.format() + " " + stmt.key);
            }
        }


        if (numMatching == 0) {
            return false;
        } else if (numMatching == 1) {
            return true;
        }
        matching.add(stmt.format());
        throw new RuntimeException("Multiple interpretations possible for "+String.format("0x%08x", opcode32Bit)+": " + matching);
    }

}
